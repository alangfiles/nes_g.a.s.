;
; File generated by cc65 v 2.18 - N/A
;
	.fopt		compiler,"cc65 v 2.18 - N/A"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_bank_spr
	.import		_vram_adr
	.import		_set_vram_buffer
	.import		_one_vram_buffer
	.import		_multi_vram_buffer_horz
	.import		_zap_shoot
	.export		_pad2_zapper
	.export		_zapper_ready
	.export		_hit_detected
	.export		_cost5
	.export		_cost4
	.export		_cost3
	.export		_cost2
	.export		_cost1
	.export		_gas6
	.export		_gas5
	.export		_gas4
	.export		_gas3
	.export		_gas2
	.export		_gas1
	.export		_gas_speed
	.export		_cost_speed
	.export		_star_active
	.export		_star_color
	.export		_star_x
	.export		_star_y
	.export		_star_x_speed
	.export		_star_y_speed
	.export		_star_wait
	.export		_temp1
	.export		_temp2
	.export		_adjust_cost
	.export		_adjust_gas
	.export		_draw_cost
	.export		_draw_gas
	.export		_StarDark
	.export		_StarLight
	.export		_WhiteBox
	.export		_pal1
	.export		_pal2
	.export		_main

.segment	"RODATA"

_StarDark:
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$11
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$11
	.byte	$40
	.byte	$80
_StarLight:
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$02
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$12
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$12
	.byte	$40
	.byte	$80
_WhiteBox:
	.byte	$FC
	.byte	$FC
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$FC
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$FC
	.byte	$00
	.byte	$00
	.byte	$FC
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$FC
	.byte	$0C
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$0C
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$0C
	.byte	$00
	.byte	$00
	.byte	$80
_pal1:
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_pal2:
	.byte	$0F
	.byte	$12
	.byte	$22
	.byte	$30
	.byte	$0F
	.byte	$15
	.byte	$25
	.byte	$30
	.byte	$0F
	.byte	$17
	.byte	$27
	.byte	$30
	.byte	$0F
	.byte	$19
	.byte	$29
	.byte	$30
L0081:
	.byte	$47,$61,$73,$20,$50,$75,$6D,$70,$65,$64,$3A,$00
L00AE:
	.byte	$50,$75,$6D,$70,$69,$6E,$67,$21,$21,$21,$00
L00B9:
	.byte	$57,$61,$69,$74,$69,$6E,$67,$2E,$2E,$2E,$00
L008B:
	.byte	$43,$6F,$73,$74,$3A,$00

.segment	"BSS"

.segment	"ZEROPAGE"
_pad2_zapper:
	.res	1,$00
_zapper_ready:
	.res	1,$00
_hit_detected:
	.res	1,$00
_cost5:
	.res	1,$00
_cost4:
	.res	1,$00
_cost3:
	.res	1,$00
_cost2:
	.res	1,$00
_cost1:
	.res	1,$00
_gas6:
	.res	1,$00
_gas5:
	.res	1,$00
_gas4:
	.res	1,$00
_gas3:
	.res	1,$00
_gas2:
	.res	1,$00
_gas1:
	.res	1,$00
_gas_speed:
	.res	2,$00
_cost_speed:
	.res	2,$00
_star_active:
	.res	1,$00
_star_color:
	.res	1,$00
_star_x:
	.res	2,$00
_star_y:
	.res	2,$00
_star_x_speed:
	.res	2,$00
_star_y_speed:
	.res	2,$00
_star_wait:
	.res	1,$00
_temp1:
	.res	1,$00
_temp2:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ adjust_cost (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_adjust_cost: near

.segment	"CODE"

;
; if(cost1 >= 10){
;
	lda     _cost1
	cmp     #$0A
	bcc     L0185
;
; cost1 = 0;
;
	lda     #$00
	sta     _cost1
;
; ++cost2;
;
	inc     _cost2
;
; if(cost2 >= 10){
;
	lda     _cost2
	cmp     #$0A
	bcc     L0185
;
; cost2 = 0;
;
	lda     #$00
	sta     _cost2
;
; ++cost3;
;
	inc     _cost3
;
; if(cost3 >= 10){
;
	lda     _cost3
	cmp     #$0A
	bcc     L0184
;
; cost3 = 0;
;
	lda     #$00
	sta     _cost3
;
; ++cost4;
;
	inc     _cost4
;
; if(cost4 >= 10) {
;
L0184:	lda     _cost4
	cmp     #$0A
	bcc     L0185
;
; cost4 = 0;
;
	lda     #$00
	sta     _cost4
;
; ++cost5;
;
	inc     _cost5
;
; if(cost5 >= 10){ // maximum 9999
;
L0185:	lda     _cost5
	cmp     #$0A
	bcc     L00F8
;
; cost5 = 9;
;
	lda     #$09
	sta     _cost5
;
; cost4 = 9;
;
	sta     _cost4
;
; cost3 = 9;
;
	sta     _cost3
;
; cost2 = 9;
;
	sta     _cost2
;
; cost1 = 9;
;
	sta     _cost1
;
; }
;
L00F8:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ adjust_gas (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_adjust_gas: near

.segment	"CODE"

;
; if(gas1 >= 10){
;
	lda     _gas1
	cmp     #$0A
	bcc     L0187
;
; gas1 = 0;
;
	lda     #$00
	sta     _gas1
;
; ++gas2;
;
	inc     _gas2
;
; if(gas2 >= 10){
;
	lda     _gas2
	cmp     #$0A
	bcc     L0187
;
; gas2 = 0;
;
	lda     #$00
	sta     _gas2
;
; ++gas3;
;
	inc     _gas3
;
; if(gas3 >= 10){
;
	lda     _gas3
	cmp     #$0A
	bcc     L0186
;
; gas3 = 0;
;
	lda     #$00
	sta     _gas3
;
; ++gas4;
;
	inc     _gas4
;
; if(gas4 >= 10) {
;
L0186:	lda     _gas4
	cmp     #$0A
	bcc     L0187
;
; gas4 = 0;
;
	lda     #$00
	sta     _gas4
;
; ++gas5;
;
	inc     _gas5
;
; if(gas5 >= 10){ // maximum 9999
;
L0187:	lda     _gas5
	cmp     #$0A
	bcc     L00D7
;
; gas5 = 9;
;
	lda     #$09
	sta     _gas5
;
; gas4 = 9;
;
	sta     _gas4
;
; gas3 = 9;
;
	sta     _gas3
;
; gas2 = 9;
;
	sta     _gas2
;
; gas1 = 9;
;
	sta     _gas1
;
; }
;
L00D7:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_cost (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_cost: near

.segment	"CODE"

;
; temp1 = cost5 + 0x30;
;
	lda     _cost5
	clc
	adc     #$30
	sta     _temp1
;
; one_vram_buffer(temp1, NTADR_A(22,9));
;
	jsr     pusha
	ldx     #$21
	lda     #$36
	jsr     _one_vram_buffer
;
; temp1 = cost4 + 0x30;
;
	lda     _cost4
	clc
	adc     #$30
	sta     _temp1
;
; one_vram_buffer(temp1, NTADR_A(23,9));
;
	jsr     pusha
	ldx     #$21
	lda     #$37
	jsr     _one_vram_buffer
;
; temp1 = cost3 + 0x30;
;
	lda     _cost3
	clc
	adc     #$30
	sta     _temp1
;
; one_vram_buffer(temp1, NTADR_A(24,9));
;
	jsr     pusha
	ldx     #$21
	lda     #$38
	jsr     _one_vram_buffer
;
; one_vram_buffer('.', NTADR_A(25,9));
;
	lda     #$2E
	jsr     pusha
	ldx     #$21
	lda     #$39
	jsr     _one_vram_buffer
;
; temp1 = cost2 + 0x30;
;
	lda     _cost2
	clc
	adc     #$30
	sta     _temp1
;
; one_vram_buffer(temp1, NTADR_A(26,9));
;
	jsr     pusha
	ldx     #$21
	lda     #$3A
	jsr     _one_vram_buffer
;
; temp1 = cost1 + 0x30;
;
	lda     _cost1
	clc
	adc     #$30
	sta     _temp1
;
; one_vram_buffer(temp1, NTADR_A(27,9));
;
	jsr     pusha
	ldx     #$21
	lda     #$3B
	jmp     _one_vram_buffer

.endproc

; ---------------------------------------------------------------
; void __near__ draw_gas (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_gas: near

.segment	"CODE"

;
; temp1 = gas5 + 0x30;
;
	lda     _gas5
	clc
	adc     #$30
	sta     _temp1
;
; one_vram_buffer(temp1, NTADR_A(22,7));
;
	jsr     pusha
	ldx     #$20
	lda     #$F6
	jsr     _one_vram_buffer
;
; temp1 = gas4 + 0x30;
;
	lda     _gas4
	clc
	adc     #$30
	sta     _temp1
;
; one_vram_buffer(temp1, NTADR_A(23,7));
;
	jsr     pusha
	ldx     #$20
	lda     #$F7
	jsr     _one_vram_buffer
;
; temp1 = gas3 + 0x30;
;
	lda     _gas3
	clc
	adc     #$30
	sta     _temp1
;
; one_vram_buffer('.', NTADR_A(24,7));
;
	lda     #$2E
	jsr     pusha
	ldx     #$20
	lda     #$F8
	jsr     _one_vram_buffer
;
; one_vram_buffer(temp1, NTADR_A(25,7));
;
	lda     _temp1
	jsr     pusha
	ldx     #$20
	lda     #$F9
	jsr     _one_vram_buffer
;
; temp1 = gas2 + 0x30;
;
	lda     _gas2
	clc
	adc     #$30
	sta     _temp1
;
; one_vram_buffer(temp1, NTADR_A(26,7));
;
	jsr     pusha
	ldx     #$20
	lda     #$FA
	jsr     _one_vram_buffer
;
; temp1 = gas1 + 0x30;
;
	lda     _gas1
	clc
	adc     #$30
	sta     _temp1
;
; one_vram_buffer(temp1, NTADR_A(27,7));
;
	jsr     pusha
	ldx     #$20
	lda     #$FB
	jmp     _one_vram_buffer

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; pal_bg(pal1); // load the palette
;
	lda     #<(_pal1)
	ldx     #>(_pal1)
	jsr     _pal_bg
;
; pal_spr(pal2); // load the palette
;
	lda     #<(_pal2)
	ldx     #>(_pal2)
	jsr     _pal_spr
;
; bank_spr(1); // sprites use the 2nd tileset
;
	lda     #$01
	jsr     _bank_spr
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; ppu_wait_nmi(); // wait
;
	jsr     _ppu_wait_nmi
;
; set_vram_buffer(); // points ppu update to vram_buffer, do this at least once
;
	jsr     _set_vram_buffer
;
; ppu_on_all(); // turn on screen
;
	jsr     _ppu_on_all
;
; ppu_wait_nmi(); // wait till beginning of the frame
;
L0077:	jsr     _ppu_wait_nmi
;
; oam_clear();
;
	jsr     _oam_clear
;
; pad2_zapper = zap_shoot(0); // controller slot 1
;
	lda     #$00
	jsr     _zap_shoot
	sta     _pad2_zapper
;
; multi_vram_buffer_horz("Gas Pumped:", 11, NTADR_A(10,7)); 
;
	jsr     decsp3
	lda     #<(L0081)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L0081)
	sta     (sp),y
	lda     #$0B
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$EA
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz("Cost:", 11, NTADR_A(10,9)); 
;
	jsr     decsp3
	lda     #<(L008B)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L008B)
	sta     (sp),y
	lda     #$0B
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$2A
	jsr     _multi_vram_buffer_horz
;
; if(pad2_zapper == 1){
;
	lda     _pad2_zapper
	cmp     #$01
	jne     L0094
;
; gas_speed += GAS_STEP;
;
	lda     #$F4
	clc
	adc     _gas_speed
	sta     _gas_speed
	lda     #$01
	adc     _gas_speed+1
;
; while(gas_speed > 256){
;
	jmp     L018B
;
; ++gas1;
;
L0189:	inc     _gas1
;
; gas_speed -= 256;
;
	lda     _gas_speed
	sec
	sbc     #$00
	sta     _gas_speed
	lda     _gas_speed+1
	sbc     #$01
L018B:	sta     _gas_speed+1
;
; while(gas_speed > 256){
;
	lda     _gas_speed
	cmp     #$01
	lda     _gas_speed+1
	sbc     #$01
	bcs     L0189
;
; adjust_gas();
;
	jsr     _adjust_gas
;
; draw_gas();
;
	jsr     _draw_gas
;
; cost_speed += COST_STEP;
;
	lda     #$50
	clc
	adc     _cost_speed
	sta     _cost_speed
	bcc     L00A6
	inc     _cost_speed+1
;
; while(cost_speed > 256){
;
	jmp     L00A6
;
; ++cost1;
;
L018A:	inc     _cost1
;
; cost_speed -= 256;
;
	lda     _cost_speed
	sec
	sbc     #$00
	sta     _cost_speed
	lda     _cost_speed+1
	sbc     #$01
	sta     _cost_speed+1
;
; while(cost_speed > 256){
;
L00A6:	lda     _cost_speed
	cmp     #$01
	lda     _cost_speed+1
	sbc     #$01
	bcs     L018A
;
; adjust_cost();
;
	jsr     _adjust_cost
;
; draw_cost();
;
	jsr     _draw_cost
;
; multi_vram_buffer_horz("Pumping!!!", 10, NTADR_A(10,11)); 
;
	jsr     decsp3
	lda     #<(L00AE)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L00AE)
	sta     (sp),y
	lda     #$0A
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$6A
	jsr     _multi_vram_buffer_horz
;
; } else {
;
	jmp     L0077
;
; multi_vram_buffer_horz("Waiting...", 10, NTADR_A(10,11)); 
;
L0094:	jsr     decsp3
	lda     #<(L00B9)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L00B9)
	sta     (sp),y
	lda     #$0A
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$6A
	jsr     _multi_vram_buffer_horz
;
; while (1){
;
	jmp     L0077

.endproc

