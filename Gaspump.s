;
; File generated by cc65 v 2.18 - N/A
;
	.fopt		compiler,"cc65 v 2.18 - N/A"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_pal_col
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_meta_spr
	.import		_pad_poll
	.import		_scroll
	.import		_bank_spr
	.import		_vram_adr
	.import		_vram_put
	.import		_vram_unrle
	.import		_set_vram_buffer
	.import		_one_vram_buffer
	.import		_multi_vram_buffer_horz
	.import		_get_pad_new
	.import		_set_scroll_y
	.import		_flush_vram_update2
	.import		_zap_shoot
	.export		_bankLevel
	.export		_bankBuffer
	.export		_banked_call
	.export		_bank_push
	.export		_bank_pop
	.import		_set_prg_bank
	.import		_set_chr_bank_0
	.import		_set_chr_bank_1
	.import		_set_mirroring
	.export		_pad2_zapper
	.export		_zapper_ready
	.export		_hit_detected
	.export		_scroll_y
	.export		_scrolled_past_once
	.export		_stop_scrolling
	.export		_cost5
	.export		_cost4
	.export		_cost3
	.export		_cost2
	.export		_cost1
	.export		_cost5_changed
	.export		_cost4_changed
	.export		_cost3_changed
	.export		_cost2_changed
	.export		_cost1_changed
	.export		_gas5
	.export		_gas4
	.export		_gas3
	.export		_gas2
	.export		_gas1
	.export		_gas5_changed
	.export		_gas4_changed
	.export		_gas3_changed
	.export		_gas2_changed
	.export		_gas1_changed
	.export		_gas_speed
	.export		_cost_speed
	.export		_pad1
	.export		_pad1_new
	.export		_trigger_pulled
	.export		_trigger_clicked
	.export		_started_pumping
	.export		_sprite_cost
	.export		_cost_sprite
	.export		_game_mode
	.export		_game_level
	.export		_pointer
	.export		_temp1
	.export		_temp2
	.export		_temp3
	.export		_tempint
	.export		_talking_time
	.export		_bird_x
	.export		_bird_y
	.export		_address
	.export		_x
	.export		_y
	.export		_num_holder
	.export		_index
	.export		_index2
	.export		_largeindex
	.export		_moveframes
	.export		_wram_array
	.export		_adjust_cost
	.export		_adjust_gas
	.export		_draw_cost
	.export		_draw_gas
	.export		_read_input
	.export		_find_sprite
	.export		_init_mode_title
	.export		_init_mode_intro_cutscene
	.export		_init_mode_intro_instructions
	.export		_init_mode_game
	.export		_init_level_one_end
	.export		_draw_number_as_bg_tile
	.export		_draw_level_one_sprites
	.export		_draw_talking_time
	.export		_draw_talking_time_background
	.export		_draw_evaluation_time_background
	.export		_draw_talking_time_sprites
	.export		_clear_background
	.export		_reset_game_variables
	.export		_TurboGut_2
	.export		_BigAlTalk1
	.export		_BigAlTalk2
	.export		_Decimal_1
	.export		_BigAlsShirt
	.export		_Bird
	.export		_One
	.export		_Two
	.export		_Three
	.export		_Four
	.export		_Five
	.export		_Six
	.export		_Seven
	.export		_Eight
	.export		_Nine
	.export		_Zero
	.export		_metatiles_1
	.export		_room_1
	.export		_LEVEL_1_PUMP
	.export		_EVALUATION
	.export		_TALKING_TIME_LEVEL
	.export		_background_pal
	.export		_pal2
	.export		_talking_time_palete
	.export		_INTRO_TOP
	.export		_INTRO_MIDDLE
	.export		_INTRO_BOTTOM
	.export		_mode_intro_cutscene
	.export		_main

.segment	"DATA"

_talking_time:
	.byte	$00
_index:
	.byte	$00

.segment	"RODATA"

_TurboGut_2:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$11
	.byte	$00
	.byte	$80
_BigAlTalk1:
	.byte	$08
	.byte	$30
	.byte	$E1
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$E2
	.byte	$00
	.byte	$18
	.byte	$30
	.byte	$E3
	.byte	$00
	.byte	$20
	.byte	$30
	.byte	$E4
	.byte	$00
	.byte	$28
	.byte	$30
	.byte	$E5
	.byte	$00
	.byte	$30
	.byte	$30
	.byte	$E6
	.byte	$00
	.byte	$80
_BigAlTalk2:
	.byte	$08
	.byte	$30
	.byte	$E1
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$E2
	.byte	$00
	.byte	$18
	.byte	$30
	.byte	$E9
	.byte	$01
	.byte	$20
	.byte	$30
	.byte	$EA
	.byte	$00
	.byte	$28
	.byte	$30
	.byte	$EB
	.byte	$00
	.byte	$30
	.byte	$30
	.byte	$E6
	.byte	$00
	.byte	$80
_Decimal_1:
	.byte	$00
	.byte	$00
	.byte	$84
	.byte	$00
	.byte	$80
_BigAlsShirt:
	.byte	$00
	.byte	$00
	.byte	$D8
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$D9
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$DA
	.byte	$00
	.byte	$18
	.byte	$00
	.byte	$DB
	.byte	$00
	.byte	$20
	.byte	$00
	.byte	$DC
	.byte	$00
	.byte	$28
	.byte	$00
	.byte	$DD
	.byte	$00
	.byte	$30
	.byte	$00
	.byte	$DE
	.byte	$00
	.byte	$38
	.byte	$00
	.byte	$DF
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$E8
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$E9
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$EA
	.byte	$00
	.byte	$18
	.byte	$08
	.byte	$EB
	.byte	$00
	.byte	$20
	.byte	$08
	.byte	$EC
	.byte	$00
	.byte	$28
	.byte	$08
	.byte	$ED
	.byte	$00
	.byte	$30
	.byte	$08
	.byte	$EE
	.byte	$00
	.byte	$38
	.byte	$08
	.byte	$EF
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$F8
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$F9
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$FA
	.byte	$00
	.byte	$18
	.byte	$10
	.byte	$FB
	.byte	$00
	.byte	$20
	.byte	$10
	.byte	$FC
	.byte	$00
	.byte	$28
	.byte	$10
	.byte	$FD
	.byte	$00
	.byte	$30
	.byte	$10
	.byte	$FE
	.byte	$00
	.byte	$38
	.byte	$10
	.byte	$FF
	.byte	$00
	.byte	$80
_Bird:
	.byte	$00
	.byte	$00
	.byte	$A2
	.byte	$20
	.byte	$08
	.byte	$00
	.byte	$A3
	.byte	$20
	.byte	$10
	.byte	$00
	.byte	$A4
	.byte	$20
	.byte	$00
	.byte	$08
	.byte	$B2
	.byte	$20
	.byte	$08
	.byte	$08
	.byte	$B3
	.byte	$20
	.byte	$10
	.byte	$08
	.byte	$B4
	.byte	$20
	.byte	$80
_One:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$20
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$21
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$30
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$31
	.byte	$00
	.byte	$80
_Two:
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$12
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$13
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$22
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$23
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$32
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$33
	.byte	$00
	.byte	$80
_Three:
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$14
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$15
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$24
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$25
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$34
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$35
	.byte	$00
	.byte	$80
_Four:
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$16
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$17
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$26
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$27
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$36
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$37
	.byte	$00
	.byte	$80
_Five:
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$19
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$28
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$29
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$38
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$39
	.byte	$00
	.byte	$80
_Six:
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$0B
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$1A
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$1B
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$2A
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$2B
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$3A
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$3B
	.byte	$00
	.byte	$80
_Seven:
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$0D
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$1C
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$1D
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$2C
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$2D
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$3C
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$3D
	.byte	$00
	.byte	$80
_Eight:
	.byte	$00
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$0F
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$1E
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$1F
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$2E
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$2F
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$3E
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$3F
	.byte	$00
	.byte	$80
_Nine:
	.byte	$00
	.byte	$00
	.byte	$4E
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$4F
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$5E
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$5F
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$6E
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$6F
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$7E
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$7F
	.byte	$00
	.byte	$80
_Zero:
	.byte	$00
	.byte	$00
	.byte	$4C
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$4D
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$5C
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$5D
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$6C
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$7C
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$7D
	.byte	$00
	.byte	$80
_metatiles_1:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$C0
	.byte	$C1
	.byte	$D0
	.byte	$D1
	.byte	$01
	.byte	$E0
	.byte	$E1
	.byte	$F0
	.byte	$F1
	.byte	$01
	.byte	$C2
	.byte	$C3
	.byte	$D2
	.byte	$D3
	.byte	$01
	.byte	$E0
	.byte	$E3
	.byte	$F2
	.byte	$F3
	.byte	$01
	.byte	$C4
	.byte	$C5
	.byte	$D4
	.byte	$D5
	.byte	$01
	.byte	$E4
	.byte	$E5
	.byte	$F4
	.byte	$F5
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$7E
	.byte	$00
	.byte	$01
	.byte	$7C
	.byte	$00
	.byte	$5D
	.byte	$7B
	.byte	$01
	.byte	$5B
	.byte	$5C
	.byte	$5D
	.byte	$5C
	.byte	$01
	.byte	$7E
	.byte	$5B
	.byte	$7C
	.byte	$7C
	.byte	$01
	.byte	$3C
	.byte	$5C
	.byte	$7D
	.byte	$7C
	.byte	$01
	.byte	$7E
	.byte	$7E
	.byte	$7C
	.byte	$7C
	.byte	$01
	.byte	$7E
	.byte	$00
	.byte	$7C
	.byte	$00
	.byte	$01
	.byte	$5B
	.byte	$5C
	.byte	$3E
	.byte	$7F
	.byte	$01
	.byte	$5F
	.byte	$3C
	.byte	$00
	.byte	$7C
	.byte	$01
	.byte	$2F
	.byte	$5B
	.byte	$00
	.byte	$7C
	.byte	$01
	.byte	$5C
	.byte	$5B
	.byte	$7C
	.byte	$7C
	.byte	$01
	.byte	$5C
	.byte	$00
	.byte	$7F
	.byte	$00
	.byte	$01
	.byte	$7C
	.byte	$00
	.byte	$7C
	.byte	$00
	.byte	$01
	.byte	$7D
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$5F
	.byte	$7B
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$7F
	.byte	$00
	.byte	$7C
	.byte	$00
	.byte	$01
	.byte	$5E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$5B
	.byte	$7B
	.byte	$7C
	.byte	$00
	.byte	$01
	.byte	$5D
	.byte	$5E
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$7D
	.byte	$7D
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$7D
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$5D
	.byte	$5E
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$5D
	.byte	$3D
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$7D
	.byte	$7D
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$7D
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$5D
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$5E
	.byte	$7D
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$7D
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$7C
	.byte	$00
	.byte	$7C
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$5F
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$7E
	.byte	$00
	.byte	$01
	.byte	$5E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$5C
	.byte	$00
	.byte	$01
	.byte	$5D
	.byte	$7B
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$7B
	.byte	$7B
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$5E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$7E
	.byte	$00
	.byte	$01
_room_1:
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$14
	.byte	$12
	.byte	$12
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$14
	.byte	$12
	.byte	$10
	.byte	$14
	.byte	$12
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$14
	.byte	$01
	.byte	$23
	.byte	$0A
	.byte	$10
	.byte	$14
	.byte	$14
	.byte	$07
	.byte	$02
	.byte	$02
	.byte	$07
	.byte	$0B
	.byte	$0A
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$09
	.byte	$25
	.byte	$24
	.byte	$01
	.byte	$07
	.byte	$01
	.byte	$1A
	.byte	$15
	.byte	$15
	.byte	$15
	.byte	$19
	.byte	$02
	.byte	$0A
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$14
	.byte	$01
	.byte	$25
	.byte	$01
	.byte	$0B
	.byte	$02
	.byte	$16
	.byte	$28
	.byte	$1F
	.byte	$00
	.byte	$17
	.byte	$23
	.byte	$11
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$13
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$16
	.byte	$00
	.byte	$00
	.byte	$1E
	.byte	$17
	.byte	$24
	.byte	$12
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$04
	.byte	$11
	.byte	$13
	.byte	$01
	.byte	$01
	.byte	$1B
	.byte	$18
	.byte	$00
	.byte	$18
	.byte	$1C
	.byte	$01
	.byte	$11
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$09
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$26
	.byte	$01
	.byte	$01
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$13
	.byte	$05
	.byte	$0B
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$12
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$13
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$25
_LEVEL_1_PUMP:
	.byte	$13
	.byte	$00
	.byte	$13
	.byte	$12
	.byte	$22
	.byte	$23
	.byte	$03
	.byte	$15
	.byte	$16
	.byte	$17
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$1B
	.byte	$2C
	.byte	$2D
	.byte	$00
	.byte	$13
	.byte	$13
	.byte	$32
	.byte	$03
	.byte	$03
	.byte	$25
	.byte	$26
	.byte	$27
	.byte	$28
	.byte	$29
	.byte	$2A
	.byte	$2B
	.byte	$03
	.byte	$3D
	.byte	$00
	.byte	$13
	.byte	$13
	.byte	$42
	.byte	$03
	.byte	$03
	.byte	$35
	.byte	$36
	.byte	$37
	.byte	$38
	.byte	$39
	.byte	$3A
	.byte	$3B
	.byte	$03
	.byte	$4D
	.byte	$00
	.byte	$13
	.byte	$13
	.byte	$42
	.byte	$03
	.byte	$44
	.byte	$45
	.byte	$46
	.byte	$47
	.byte	$48
	.byte	$49
	.byte	$4A
	.byte	$4B
	.byte	$03
	.byte	$4D
	.byte	$00
	.byte	$13
	.byte	$13
	.byte	$52
	.byte	$53
	.byte	$54
	.byte	$55
	.byte	$56
	.byte	$57
	.byte	$58
	.byte	$59
	.byte	$5A
	.byte	$5B
	.byte	$5C
	.byte	$5D
	.byte	$00
	.byte	$13
	.byte	$13
	.byte	$62
	.byte	$63
	.byte	$64
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$69
	.byte	$6A
	.byte	$6B
	.byte	$6C
	.byte	$6D
	.byte	$00
	.byte	$13
	.byte	$14
	.byte	$73
	.byte	$74
	.byte	$75
	.byte	$76
	.byte	$77
	.byte	$78
	.byte	$79
	.byte	$7A
	.byte	$7B
	.byte	$7C
	.byte	$00
	.byte	$13
	.byte	$15
	.byte	$83
	.byte	$84
	.byte	$85
	.byte	$86
	.byte	$87
	.byte	$88
	.byte	$89
	.byte	$8A
	.byte	$8B
	.byte	$8C
	.byte	$00
	.byte	$13
	.byte	$13
	.byte	$91
	.byte	$92
	.byte	$93
	.byte	$94
	.byte	$95
	.byte	$96
	.byte	$97
	.byte	$98
	.byte	$99
	.byte	$9A
	.byte	$9B
	.byte	$9C
	.byte	$9D
	.byte	$9E
	.byte	$00
	.byte	$13
	.byte	$11
	.byte	$A1
	.byte	$A2
	.byte	$A3
	.byte	$A4
	.byte	$A5
	.byte	$01
	.byte	$A7
	.byte	$A8
	.byte	$A9
	.byte	$AA
	.byte	$AB
	.byte	$AC
	.byte	$AD
	.byte	$AE
	.byte	$00
	.byte	$13
	.byte	$11
	.byte	$B1
	.byte	$B2
	.byte	$B3
	.byte	$B4
	.byte	$B5
	.byte	$B6
	.byte	$B7
	.byte	$B8
	.byte	$B9
	.byte	$BA
	.byte	$BB
	.byte	$BC
	.byte	$BD
	.byte	$BE
	.byte	$00
	.byte	$13
	.byte	$11
	.byte	$B0
	.byte	$01
	.byte	$13
	.byte	$0B
	.byte	$BF
	.byte	$60
	.byte	$13
	.byte	$11
	.byte	$B0
	.byte	$81
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$0B
	.byte	$0B
	.byte	$0C
	.byte	$0D
	.byte	$0E
	.byte	$0F
	.byte	$71
	.byte	$9F
	.byte	$60
	.byte	$13
	.byte	$11
	.byte	$B0
	.byte	$81
	.byte	$06
	.byte	$20
	.byte	$21
	.byte	$30
	.byte	$30
	.byte	$31
	.byte	$40
	.byte	$41
	.byte	$50
	.byte	$05
	.byte	$71
	.byte	$BF
	.byte	$60
	.byte	$13
	.byte	$11
	.byte	$90
	.byte	$81
	.byte	$02
	.byte	$1E
	.byte	$1F
	.byte	$1E
	.byte	$1F
	.byte	$1E
	.byte	$1F
	.byte	$1E
	.byte	$1F
	.byte	$02
	.byte	$71
	.byte	$BF
	.byte	$61
	.byte	$61
	.byte	$03
	.byte	$03
	.byte	$61
	.byte	$03
	.byte	$61
	.byte	$13
	.byte	$05
	.byte	$03
	.byte	$03
	.byte	$61
	.byte	$03
	.byte	$61
	.byte	$61
	.byte	$A0
	.byte	$81
	.byte	$02
	.byte	$2E
	.byte	$2F
	.byte	$2E
	.byte	$2F
	.byte	$2E
	.byte	$2F
	.byte	$2E
	.byte	$2F
	.byte	$02
	.byte	$3C
	.byte	$BF
	.byte	$02
	.byte	$13
	.byte	$05
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$B0
	.byte	$81
	.byte	$02
	.byte	$3E
	.byte	$3F
	.byte	$3E
	.byte	$3F
	.byte	$3E
	.byte	$3F
	.byte	$3E
	.byte	$3F
	.byte	$02
	.byte	$4C
	.byte	$9F
	.byte	$02
	.byte	$04
	.byte	$02
	.byte	$13
	.byte	$02
	.byte	$04
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$03
	.byte	$03
	.byte	$04
	.byte	$02
	.byte	$B0
	.byte	$81
	.byte	$02
	.byte	$4E
	.byte	$4F
	.byte	$4E
	.byte	$4F
	.byte	$4E
	.byte	$4F
	.byte	$4E
	.byte	$4F
	.byte	$02
	.byte	$71
	.byte	$AF
	.byte	$03
	.byte	$13
	.byte	$0C
	.byte	$70
	.byte	$03
	.byte	$13
	.byte	$03
	.byte	$B0
	.byte	$81
	.byte	$43
	.byte	$01
	.byte	$7D
	.byte	$01
	.byte	$13
	.byte	$05
	.byte	$33
	.byte	$71
	.byte	$BF
	.byte	$03
	.byte	$13
	.byte	$11
	.byte	$90
	.byte	$81
	.byte	$06
	.byte	$10
	.byte	$31
	.byte	$30
	.byte	$30
	.byte	$21
	.byte	$11
	.byte	$41
	.byte	$50
	.byte	$05
	.byte	$71
	.byte	$BF
	.byte	$03
	.byte	$13
	.byte	$04
	.byte	$70
	.byte	$03
	.byte	$70
	.byte	$13
	.byte	$05
	.byte	$03
	.byte	$03
	.byte	$70
	.byte	$13
	.byte	$02
	.byte	$B0
	.byte	$81
	.byte	$02
	.byte	$1E
	.byte	$1F
	.byte	$1E
	.byte	$1F
	.byte	$1E
	.byte	$1F
	.byte	$1E
	.byte	$1F
	.byte	$02
	.byte	$71
	.byte	$BF
	.byte	$03
	.byte	$13
	.byte	$03
	.byte	$12
	.byte	$60
	.byte	$13
	.byte	$0C
	.byte	$B0
	.byte	$81
	.byte	$02
	.byte	$2E
	.byte	$2F
	.byte	$2E
	.byte	$2F
	.byte	$2E
	.byte	$2F
	.byte	$2E
	.byte	$2F
	.byte	$02
	.byte	$3C
	.byte	$BF
	.byte	$03
	.byte	$13
	.byte	$03
	.byte	$24
	.byte	$60
	.byte	$13
	.byte	$0C
	.byte	$B0
	.byte	$81
	.byte	$02
	.byte	$3E
	.byte	$3F
	.byte	$3E
	.byte	$3F
	.byte	$3E
	.byte	$3F
	.byte	$3E
	.byte	$3F
	.byte	$02
	.byte	$4C
	.byte	$BF
	.byte	$03
	.byte	$13
	.byte	$04
	.byte	$24
	.byte	$60
	.byte	$13
	.byte	$0A
	.byte	$34
	.byte	$B0
	.byte	$81
	.byte	$02
	.byte	$4E
	.byte	$4F
	.byte	$4E
	.byte	$4F
	.byte	$4E
	.byte	$4F
	.byte	$4E
	.byte	$4F
	.byte	$02
	.byte	$71
	.byte	$BF
	.byte	$03
	.byte	$70
	.byte	$03
	.byte	$13
	.byte	$04
	.byte	$61
	.byte	$03
	.byte	$24
	.byte	$60
	.byte	$13
	.byte	$05
	.byte	$34
	.byte	$70
	.byte	$B0
	.byte	$81
	.byte	$43
	.byte	$01
	.byte	$09
	.byte	$0A
	.byte	$0B
	.byte	$0B
	.byte	$0C
	.byte	$0D
	.byte	$01
	.byte	$33
	.byte	$71
	.byte	$AF
	.byte	$03
	.byte	$13
	.byte	$09
	.byte	$61
	.byte	$13
	.byte	$04
	.byte	$03
	.byte	$13
	.byte	$02
	.byte	$B0
	.byte	$01
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$0B
	.byte	$0B
	.byte	$0C
	.byte	$0D
	.byte	$0E
	.byte	$0F
	.byte	$01
	.byte	$BF
	.byte	$03
	.byte	$13
	.byte	$02
	.byte	$70
	.byte	$03
	.byte	$13
	.byte	$0D
	.byte	$80
	.byte	$A2
	.byte	$A3
	.byte	$A4
	.byte	$A5
	.byte	$01
	.byte	$13
	.byte	$02
	.byte	$A9
	.byte	$AA
	.byte	$AB
	.byte	$AC
	.byte	$AD
	.byte	$8D
	.byte	$03
	.byte	$13
	.byte	$02
	.byte	$61
	.byte	$03
	.byte	$13
	.byte	$0D
	.byte	$B1
	.byte	$B2
	.byte	$B3
	.byte	$B4
	.byte	$B5
	.byte	$B6
	.byte	$B7
	.byte	$B8
	.byte	$B9
	.byte	$BA
	.byte	$BB
	.byte	$BC
	.byte	$BD
	.byte	$BE
	.byte	$03
	.byte	$13
	.byte	$0E
	.byte	$70
	.byte	$03
	.byte	$03
	.byte	$B0
	.byte	$01
	.byte	$01
	.byte	$82
	.byte	$30
	.byte	$51
	.byte	$31
	.byte	$20
	.byte	$51
	.byte	$20
	.byte	$82
	.byte	$01
	.byte	$01
	.byte	$BF
	.byte	$03
	.byte	$13
	.byte	$11
	.byte	$B0
	.byte	$01
	.byte	$13
	.byte	$0A
	.byte	$7D
	.byte	$BF
	.byte	$00
	.byte	$13
	.byte	$04
	.byte	$54
	.byte	$55
	.byte	$01
	.byte	$00
	.byte	$13
	.byte	$04
	.byte	$05
	.byte	$05
	.byte	$01
	.byte	$00
	.byte	$13
	.byte	$07
	.byte	$FF
	.byte	$13
	.byte	$03
	.byte	$33
	.byte	$A0
	.byte	$A0
	.byte	$20
	.byte	$FA
	.byte	$FE
	.byte	$13
	.byte	$02
	.byte	$32
	.byte	$0A
	.byte	$0A
	.byte	$02
	.byte	$FF
	.byte	$13
	.byte	$03
	.byte	$33
	.byte	$AA
	.byte	$AA
	.byte	$22
	.byte	$FF
	.byte	$13
	.byte	$03
	.byte	$33
	.byte	$00
	.byte	$13
	.byte	$02
	.byte	$0F
	.byte	$13
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$13
	.byte	$00
_EVALUATION:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$1F
	.byte	$90
	.byte	$00
	.byte	$01
	.byte	$22
	.byte	$47
	.byte	$6F
	.byte	$61
	.byte	$6C
	.byte	$2E
	.byte	$01
	.byte	$0C
	.byte	$00
	.byte	$01
	.byte	$23
	.byte	$87
	.byte	$00
	.byte	$87
	.byte	$00
	.byte	$01
	.byte	$47
	.byte	$53
	.byte	$70
	.byte	$65
	.byte	$65
	.byte	$64
	.byte	$2E
	.byte	$01
	.byte	$0B
	.byte	$00
	.byte	$01
	.byte	$0A
	.byte	$F0
	.byte	$00
	.byte	$01
	.byte	$22
	.byte	$41
	.byte	$63
	.byte	$63
	.byte	$75
	.byte	$72
	.byte	$61
	.byte	$63
	.byte	$79
	.byte	$2E
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$CF
	.byte	$00
	.byte	$01
	.byte	$19
	.byte	$53
	.byte	$74
	.byte	$79
	.byte	$6C
	.byte	$65
	.byte	$2E
	.byte	$01
	.byte	$0B
	.byte	$00
	.byte	$01
	.byte	$6B
	.byte	$04
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$0A
	.byte	$2D
	.byte	$41
	.byte	$4C
	.byte	$2D
	.byte	$00
	.byte	$01
	.byte	$0A
	.byte	$0A
	.byte	$0B
	.byte	$00
	.byte	$00
	.byte	$14
	.byte	$00
	.byte	$01
	.byte	$1A
	.byte	$1A
	.byte	$1B
	.byte	$00
	.byte	$00
	.byte	$16
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$80
	.byte	$81
	.byte	$82
	.byte	$83
	.byte	$84
	.byte	$85
	.byte	$86
	.byte	$87
	.byte	$D7
	.byte	$16
	.byte	$00
	.byte	$00
	.byte	$16
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$90
	.byte	$91
	.byte	$92
	.byte	$93
	.byte	$94
	.byte	$95
	.byte	$96
	.byte	$97
	.byte	$D7
	.byte	$16
	.byte	$00
	.byte	$00
	.byte	$16
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$A0
	.byte	$A1
	.byte	$A2
	.byte	$A3
	.byte	$A4
	.byte	$A5
	.byte	$A6
	.byte	$A7
	.byte	$D7
	.byte	$16
	.byte	$00
	.byte	$00
	.byte	$16
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$B0
	.byte	$B1
	.byte	$B2
	.byte	$B3
	.byte	$B4
	.byte	$B5
	.byte	$B6
	.byte	$B7
	.byte	$D7
	.byte	$16
	.byte	$00
	.byte	$00
	.byte	$16
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$C0
	.byte	$C1
	.byte	$C2
	.byte	$C3
	.byte	$C4
	.byte	$C5
	.byte	$C6
	.byte	$C7
	.byte	$D7
	.byte	$16
	.byte	$00
	.byte	$00
	.byte	$16
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$D0
	.byte	$D1
	.byte	$D2
	.byte	$D3
	.byte	$D4
	.byte	$D5
	.byte	$D6
	.byte	$D7
	.byte	$D7
	.byte	$16
	.byte	$00
	.byte	$00
	.byte	$16
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$E1
	.byte	$BC
	.byte	$BD
	.byte	$BE
	.byte	$BF
	.byte	$E6
	.byte	$CF
	.byte	$D7
	.byte	$16
	.byte	$00
	.byte	$00
	.byte	$16
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$D8
	.byte	$D9
	.byte	$DA
	.byte	$DB
	.byte	$DC
	.byte	$DD
	.byte	$DE
	.byte	$DF
	.byte	$D7
	.byte	$16
	.byte	$00
	.byte	$00
	.byte	$16
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$E8
	.byte	$E9
	.byte	$EA
	.byte	$EB
	.byte	$EC
	.byte	$ED
	.byte	$EE
	.byte	$EF
	.byte	$D7
	.byte	$16
	.byte	$00
	.byte	$00
	.byte	$16
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$F8
	.byte	$F9
	.byte	$FA
	.byte	$FB
	.byte	$FC
	.byte	$FD
	.byte	$FE
	.byte	$FF
	.byte	$D7
	.byte	$16
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$17
	.byte	$01
	.byte	$1B
	.byte	$19
	.byte	$00
	.byte	$01
	.byte	$22
	.byte	$F0
	.byte	$F1
	.byte	$00
	.byte	$01
	.byte	$16
	.byte	$F7
	.byte	$00
	.byte	$01
	.byte	$23
	.byte	$55
	.byte	$A5
	.byte	$01
	.byte	$02
	.byte	$A1
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$90
	.byte	$A0
	.byte	$01
	.byte	$03
	.byte	$24
	.byte	$00
	.byte	$00
	.byte	$55
	.byte	$AA
	.byte	$01
	.byte	$03
	.byte	$62
	.byte	$50
	.byte	$00
	.byte	$A5
	.byte	$55
	.byte	$01
	.byte	$05
	.byte	$A5
	.byte	$66
	.byte	$55
	.byte	$01
	.byte	$05
	.byte	$99
	.byte	$66
	.byte	$55
	.byte	$01
	.byte	$04
	.byte	$45
	.byte	$99
	.byte	$AA
	.byte	$A5
	.byte	$01
	.byte	$05
	.byte	$A9
	.byte	$05
	.byte	$01
	.byte	$06
	.byte	$05
	.byte	$01
	.byte	$00
_TALKING_TIME_LEVEL:
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$1F
	.byte	$90
	.byte	$00
	.byte	$02
	.byte	$1F
	.byte	$04
	.byte	$05
	.byte	$00
	.byte	$02
	.byte	$19
	.byte	$0A
	.byte	$0B
	.byte	$00
	.byte	$00
	.byte	$14
	.byte	$00
	.byte	$02
	.byte	$1A
	.byte	$1A
	.byte	$1B
	.byte	$00
	.byte	$00
	.byte	$16
	.byte	$00
	.byte	$02
	.byte	$1B
	.byte	$16
	.byte	$00
	.byte	$00
	.byte	$16
	.byte	$00
	.byte	$02
	.byte	$13
	.byte	$9A
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$16
	.byte	$00
	.byte	$00
	.byte	$16
	.byte	$00
	.byte	$02
	.byte	$1B
	.byte	$16
	.byte	$00
	.byte	$F0
	.byte	$16
	.byte	$00
	.byte	$02
	.byte	$1B
	.byte	$16
	.byte	$00
	.byte	$00
	.byte	$16
	.byte	$00
	.byte	$02
	.byte	$1B
	.byte	$16
	.byte	$00
	.byte	$00
	.byte	$16
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$CF
	.byte	$00
	.byte	$02
	.byte	$13
	.byte	$16
	.byte	$00
	.byte	$00
	.byte	$16
	.byte	$00
	.byte	$02
	.byte	$1B
	.byte	$16
	.byte	$00
	.byte	$00
	.byte	$16
	.byte	$00
	.byte	$02
	.byte	$1B
	.byte	$16
	.byte	$00
	.byte	$00
	.byte	$16
	.byte	$00
	.byte	$02
	.byte	$1B
	.byte	$16
	.byte	$00
	.byte	$00
	.byte	$16
	.byte	$00
	.byte	$02
	.byte	$1B
	.byte	$16
	.byte	$00
	.byte	$00
	.byte	$16
	.byte	$00
	.byte	$02
	.byte	$1B
	.byte	$16
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$17
	.byte	$02
	.byte	$1B
	.byte	$19
	.byte	$00
	.byte	$02
	.byte	$1C
	.byte	$87
	.byte	$00
	.byte	$02
	.byte	$38
	.byte	$80
	.byte	$81
	.byte	$82
	.byte	$83
	.byte	$84
	.byte	$85
	.byte	$86
	.byte	$87
	.byte	$00
	.byte	$02
	.byte	$17
	.byte	$90
	.byte	$91
	.byte	$92
	.byte	$93
	.byte	$94
	.byte	$95
	.byte	$96
	.byte	$97
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$88
	.byte	$00
	.byte	$02
	.byte	$12
	.byte	$A0
	.byte	$A1
	.byte	$A2
	.byte	$A3
	.byte	$A4
	.byte	$A5
	.byte	$A6
	.byte	$A7
	.byte	$00
	.byte	$02
	.byte	$17
	.byte	$B0
	.byte	$B1
	.byte	$B2
	.byte	$B3
	.byte	$B4
	.byte	$B5
	.byte	$B6
	.byte	$B7
	.byte	$00
	.byte	$02
	.byte	$17
	.byte	$C0
	.byte	$C1
	.byte	$C2
	.byte	$C3
	.byte	$C4
	.byte	$C5
	.byte	$C6
	.byte	$C7
	.byte	$00
	.byte	$02
	.byte	$17
	.byte	$D0
	.byte	$D1
	.byte	$D2
	.byte	$D3
	.byte	$D4
	.byte	$D5
	.byte	$D6
	.byte	$D7
	.byte	$00
	.byte	$02
	.byte	$17
	.byte	$C8
	.byte	$C9
	.byte	$CA
	.byte	$CB
	.byte	$CC
	.byte	$CD
	.byte	$CE
	.byte	$CF
	.byte	$00
	.byte	$02
	.byte	$17
	.byte	$D8
	.byte	$D9
	.byte	$DA
	.byte	$DB
	.byte	$DC
	.byte	$DD
	.byte	$DE
	.byte	$DF
	.byte	$00
	.byte	$02
	.byte	$17
	.byte	$E8
	.byte	$E9
	.byte	$EA
	.byte	$EB
	.byte	$EC
	.byte	$ED
	.byte	$EE
	.byte	$EF
	.byte	$00
	.byte	$02
	.byte	$17
	.byte	$F8
	.byte	$F9
	.byte	$FA
	.byte	$FB
	.byte	$FC
	.byte	$FD
	.byte	$FE
	.byte	$FF
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$F0
	.byte	$F1
	.byte	$00
	.byte	$02
	.byte	$16
	.byte	$F7
	.byte	$00
	.byte	$02
	.byte	$23
	.byte	$AA
	.byte	$05
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$A0
	.byte	$22
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$8A
	.byte	$62
	.byte	$50
	.byte	$02
	.byte	$05
	.byte	$98
	.byte	$A6
	.byte	$A5
	.byte	$02
	.byte	$02
	.byte	$A0
	.byte	$A5
	.byte	$A5
	.byte	$AA
	.byte	$55
	.byte	$02
	.byte	$17
	.byte	$05
	.byte	$02
	.byte	$06
	.byte	$05
	.byte	$02
	.byte	$00
_background_pal:
	.byte	$2C
	.byte	$05
	.byte	$3D
	.byte	$15
	.byte	$2C
	.byte	$05
	.byte	$37
	.byte	$15
	.byte	$2C
	.byte	$0F
	.byte	$20
	.byte	$11
	.byte	$2C
	.byte	$19
	.byte	$2A
	.byte	$0F
_pal2:
	.byte	$0F
	.byte	$20
	.byte	$16
	.byte	$36
	.byte	$0F
	.byte	$05
	.byte	$16
	.byte	$36
	.byte	$0F
	.byte	$13
	.byte	$0F
	.byte	$36
	.byte	$0F
	.byte	$09
	.byte	$19
	.byte	$29
_talking_time_palete:
	.byte	$0F
	.byte	$20
	.byte	$16
	.byte	$36
	.byte	$0F
	.byte	$05
	.byte	$16
	.byte	$36
	.byte	$0F
	.byte	$13
	.byte	$0F
	.byte	$36
	.byte	$0F
	.byte	$09
	.byte	$19
	.byte	$29
.segment	"BANK0"
_INTRO_TOP:
	.byte	$04
	.byte	$00
	.byte	$04
	.byte	$56
	.byte	$03
	.byte	$00
	.byte	$04
	.byte	$0C
	.byte	$03
	.byte	$00
	.byte	$04
	.byte	$06
	.byte	$03
	.byte	$00
	.byte	$04
	.byte	$4D
	.byte	$03
	.byte	$00
	.byte	$04
	.byte	$A6
	.byte	$03
	.byte	$00
	.byte	$04
	.byte	$DE
	.byte	$03
	.byte	$00
	.byte	$04
	.byte	$09
	.byte	$03
	.byte	$00
	.byte	$04
	.byte	$06
	.byte	$03
	.byte	$00
	.byte	$04
	.byte	$05
	.byte	$03
	.byte	$00
	.byte	$04
	.byte	$BF
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$05
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$03
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$0E
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$09
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$03
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$06
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$06
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$FF
	.byte	$CF
	.byte	$FF
	.byte	$CF
	.byte	$FF
	.byte	$3F
	.byte	$FF
	.byte	$04
	.byte	$05
	.byte	$33
	.byte	$FF
	.byte	$FF
	.byte	$FC
	.byte	$FF
	.byte	$CF
	.byte	$FF
	.byte	$04
	.byte	$0A
	.byte	$F0
	.byte	$FF
	.byte	$04
	.byte	$02
	.byte	$CF
	.byte	$FF
	.byte	$3F
	.byte	$FF
	.byte	$3F
	.byte	$FF
	.byte	$3F
	.byte	$FF
	.byte	$04
	.byte	$07
	.byte	$AE
	.byte	$AE
	.byte	$BF
	.byte	$AE
	.byte	$BB
	.byte	$EB
	.byte	$AF
	.byte	$EB
	.byte	$0A
	.byte	$04
	.byte	$02
	.byte	$0E
	.byte	$0E
	.byte	$0A
	.byte	$0E
	.byte	$0A
	.byte	$04
	.byte	$00
_INTRO_MIDDLE:
	.byte	$04
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$08
	.byte	$01
	.byte	$04
	.byte	$0A
	.byte	$02
	.byte	$04
	.byte	$16
	.byte	$01
	.byte	$04
	.byte	$09
	.byte	$02
	.byte	$04
	.byte	$0B
	.byte	$01
	.byte	$04
	.byte	$09
	.byte	$03
	.byte	$04
	.byte	$09
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$12
	.byte	$03
	.byte	$04
	.byte	$0B
	.byte	$01
	.byte	$04
	.byte	$09
	.byte	$03
	.byte	$04
	.byte	$15
	.byte	$01
	.byte	$04
	.byte	$09
	.byte	$03
	.byte	$04
	.byte	$15
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$09
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$09
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$09
	.byte	$01
	.byte	$04
	.byte	$0A
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$11
	.byte	$01
	.byte	$04
	.byte	$09
	.byte	$02
	.byte	$04
	.byte	$0C
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$11
	.byte	$03
	.byte	$04
	.byte	$0D
	.byte	$02
	.byte	$04
	.byte	$11
	.byte	$03
	.byte	$04
	.byte	$0D
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$0B
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$0D
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$0B
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$0D
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$04
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$03
	.byte	$01
	.byte	$04
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$04
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$03
	.byte	$01
	.byte	$04
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$04
	.byte	$0B
	.byte	$01
	.byte	$04
	.byte	$03
	.byte	$03
	.byte	$04
	.byte	$0D
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$04
	.byte	$0B
	.byte	$01
	.byte	$04
	.byte	$03
	.byte	$03
	.byte	$04
	.byte	$0D
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$06
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$04
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$03
	.byte	$01
	.byte	$04
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$04
	.byte	$02
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$01
	.byte	$04
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$02
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$02
	.byte	$04
	.byte	$03
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$02
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$03
	.byte	$01
	.byte	$04
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$05
	.byte	$01
	.byte	$04
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$04
	.byte	$A0
	.byte	$AA
	.byte	$04
	.byte	$09
	.byte	$6A
	.byte	$5A
	.byte	$04
	.byte	$04
	.byte	$55
	.byte	$A5
	.byte	$A5
	.byte	$5A
	.byte	$5A
	.byte	$56
	.byte	$55
	.byte	$55
	.byte	$79
	.byte	$5A
	.byte	$5A
	.byte	$56
	.byte	$59
	.byte	$5A
	.byte	$04
	.byte	$02
	.byte	$67
	.byte	$55
	.byte	$55
	.byte	$9D
	.byte	$67
	.byte	$55
	.byte	$04
	.byte	$02
	.byte	$77
	.byte	$55
	.byte	$55
	.byte	$DD
	.byte	$77
	.byte	$55
	.byte	$04
	.byte	$02
	.byte	$FF
	.byte	$33
	.byte	$FF
	.byte	$04
	.byte	$03
	.byte	$CC
	.byte	$FF
	.byte	$0F
	.byte	$03
	.byte	$0F
	.byte	$04
	.byte	$03
	.byte	$0C
	.byte	$0F
	.byte	$04
	.byte	$00
_INTRO_BOTTOM:
	.byte	$04
	.byte	$02
	.byte	$04
	.byte	$5F
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$08
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$02
	.byte	$90
	.byte	$A1
	.byte	$02
	.byte	$04
	.byte	$0C
	.byte	$00
	.byte	$04
	.byte	$10
	.byte	$A0
	.byte	$A1
	.byte	$A2
	.byte	$A3
	.byte	$A4
	.byte	$A5
	.byte	$A6
	.byte	$A7
	.byte	$A8
	.byte	$A9
	.byte	$AA
	.byte	$AB
	.byte	$AC
	.byte	$AD
	.byte	$AE
	.byte	$00
	.byte	$04
	.byte	$11
	.byte	$B1
	.byte	$B2
	.byte	$B3
	.byte	$B4
	.byte	$B5
	.byte	$B6
	.byte	$B7
	.byte	$B8
	.byte	$B9
	.byte	$BA
	.byte	$BB
	.byte	$BC
	.byte	$BD
	.byte	$BE
	.byte	$00
	.byte	$04
	.byte	$11
	.byte	$C1
	.byte	$C2
	.byte	$C3
	.byte	$C4
	.byte	$C5
	.byte	$C6
	.byte	$C7
	.byte	$C8
	.byte	$C9
	.byte	$CA
	.byte	$CB
	.byte	$CC
	.byte	$CD
	.byte	$CE
	.byte	$00
	.byte	$04
	.byte	$05
	.byte	$03
	.byte	$04
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$D0
	.byte	$03
	.byte	$04
	.byte	$02
	.byte	$D4
	.byte	$D5
	.byte	$D6
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$DC
	.byte	$DD
	.byte	$03
	.byte	$04
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$0E
	.byte	$E0
	.byte	$E1
	.byte	$00
	.byte	$00
	.byte	$E4
	.byte	$E5
	.byte	$01
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$ED
	.byte	$EE
	.byte	$00
	.byte	$04
	.byte	$13
	.byte	$F3
	.byte	$F4
	.byte	$F5
	.byte	$01
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$FD
	.byte	$FE
	.byte	$00
	.byte	$04
	.byte	$16
	.byte	$01
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$02
	.byte	$04
	.byte	$0D
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$02
	.byte	$04
	.byte	$0F
	.byte	$00
	.byte	$04
	.byte	$03
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$0B
	.byte	$02
	.byte	$04
	.byte	$0E
	.byte	$00
	.byte	$04
	.byte	$03
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$1E
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$04
	.byte	$05
	.byte	$49
	.byte	$49
	.byte	$00
	.byte	$04
	.byte	$05
	.byte	$49
	.byte	$49
	.byte	$00
	.byte	$04
	.byte	$06
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$04
	.byte	$05
	.byte	$49
	.byte	$49
	.byte	$00
	.byte	$04
	.byte	$05
	.byte	$49
	.byte	$49
	.byte	$00
	.byte	$04
	.byte	$06
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$49
	.byte	$49
	.byte	$01
	.byte	$04
	.byte	$05
	.byte	$49
	.byte	$49
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$05
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$04
	.byte	$0C
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$05
	.byte	$00
	.byte	$04
	.byte	$16
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$03
	.byte	$00
	.byte	$04
	.byte	$19
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$07
	.byte	$49
	.byte	$49
	.byte	$00
	.byte	$04
	.byte	$03
	.byte	$49
	.byte	$49
	.byte	$00
	.byte	$04
	.byte	$09
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$07
	.byte	$49
	.byte	$49
	.byte	$00
	.byte	$04
	.byte	$03
	.byte	$49
	.byte	$49
	.byte	$00
	.byte	$04
	.byte	$0A
	.byte	$01
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$03
	.byte	$01
	.byte	$04
	.byte	$03
	.byte	$49
	.byte	$49
	.byte	$01
	.byte	$04
	.byte	$03
	.byte	$49
	.byte	$49
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$0A
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$04
	.byte	$0C
	.byte	$00
	.byte	$04
	.byte	$0A
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$1D
	.byte	$02
	.byte	$04
	.byte	$02
	.byte	$10
	.byte	$04
	.byte	$1E
	.byte	$02
	.byte	$02
	.byte	$10
	.byte	$04
	.byte	$1B
	.byte	$02
	.byte	$04
	.byte	$05
	.byte	$10
	.byte	$04
	.byte	$10
	.byte	$02
	.byte	$04
	.byte	$2A
	.byte	$F0
	.byte	$04
	.byte	$07
	.byte	$15
	.byte	$05
	.byte	$04
	.byte	$02
	.byte	$45
	.byte	$55
	.byte	$55
	.byte	$05
	.byte	$D5
	.byte	$F5
	.byte	$04
	.byte	$03
	.byte	$55
	.byte	$55
	.byte	$01
	.byte	$4C
	.byte	$9F
	.byte	$5F
	.byte	$9F
	.byte	$5F
	.byte	$47
	.byte	$7F
	.byte	$50
	.byte	$05
	.byte	$08
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$55
	.byte	$47
	.byte	$55
	.byte	$50
	.byte	$0D
	.byte	$2E
	.byte	$8B
	.byte	$0F
	.byte	$FF
	.byte	$77
	.byte	$55
	.byte	$F5
	.byte	$F0
	.byte	$04
	.byte	$03
	.byte	$F5
	.byte	$04
	.byte	$02
	.byte	$0F
	.byte	$04
	.byte	$06
	.byte	$0F
	.byte	$04
	.byte	$00
.segment	"CODE"
L129D:
	.byte	$50,$75,$6C,$6C,$20,$74,$68,$65,$20,$74,$72,$69,$67,$67,$65,$72
	.byte	$20,$68,$61,$6C,$66,$77,$61,$79,$00
L12A8:
	.byte	$42,$75,$74,$20,$6E,$6F,$74,$20,$74,$69,$6C,$20,$69,$74,$20,$63
	.byte	$6C,$69,$63,$6B,$73,$00
L1232:
	.byte	$50,$75,$6C,$6C,$20,$74,$72,$69,$67,$67,$65,$72,$20,$74,$6F,$20
	.byte	$73,$74,$61,$72,$74,$00
L1227:
	.byte	$47,$61,$73,$20,$53,$74,$61,$74,$69,$6F,$6E,$20,$53,$69,$6D,$75
	.byte	$6C,$61,$74,$6F,$72,$00
L1269:
	.byte	$68,$61,$76,$65,$20,$77,$68,$61,$74,$20,$69,$74,$20,$74,$61,$6B
	.byte	$65,$73,$00
L1292:
	.byte	$47,$69,$76,$65,$20,$6D,$65,$20,$32,$20,$67,$61,$6C,$6C,$6F,$6E
	.byte	$73,$21,$00
L125F:
	.byte	$59,$6F,$75,$20,$6A,$75,$73,$74,$20,$64,$6F,$6E,$27,$74,$00
L1287:
	.byte	$20,$70,$75,$6D,$70,$20,$67,$61,$73,$3F,$21,$3F,$00
L127D:
	.byte	$53,$6F,$20,$79,$6F,$75,$20,$77,$61,$6E,$6E,$61,$00
L124A:
	.byte	$4E,$69,$63,$65,$20,$57,$6F,$72,$6B,$21,$00
L1255:
	.byte	$48,$6D,$6D,$6D,$6D,$2E,$2E,$2E,$2E,$00

.segment	"BSS"

_bankLevel:
	.res	1,$00
_bankBuffer:
	.res	10,$00
.segment	"ZEROPAGE"
_pad2_zapper:
	.res	1,$00
_zapper_ready:
	.res	1,$00
_hit_detected:
	.res	1,$00
_scroll_y:
	.res	2,$00
_scrolled_past_once:
	.res	1,$00
_stop_scrolling:
	.res	1,$00
_cost5:
	.res	1,$00
_cost4:
	.res	1,$00
_cost3:
	.res	1,$00
_cost2:
	.res	1,$00
_cost1:
	.res	1,$00
_cost5_changed:
	.res	1,$00
_cost4_changed:
	.res	1,$00
_cost3_changed:
	.res	1,$00
_cost2_changed:
	.res	1,$00
_cost1_changed:
	.res	1,$00
_gas5:
	.res	1,$00
_gas4:
	.res	1,$00
_gas3:
	.res	1,$00
_gas2:
	.res	1,$00
_gas1:
	.res	1,$00
_gas5_changed:
	.res	1,$00
_gas4_changed:
	.res	1,$00
_gas3_changed:
	.res	1,$00
_gas2_changed:
	.res	1,$00
_gas1_changed:
	.res	1,$00
_gas_speed:
	.res	2,$00
_cost_speed:
	.res	2,$00
_pad1:
	.res	1,$00
_pad1_new:
	.res	1,$00
_trigger_pulled:
	.res	1,$00
_trigger_clicked:
	.res	1,$00
_started_pumping:
	.res	1,$00
_sprite_cost:
	.res	1,$00
_cost_sprite:
	.res	1,$00
_game_mode:
	.res	1,$00
_game_level:
	.res	1,$00
_pointer:
	.res	2,$00
_temp1:
	.res	1,$00
_temp2:
	.res	1,$00
_temp3:
	.res	1,$00
_tempint:
	.res	2,$00
_bird_x:
	.res	1,$00
_bird_y:
	.res	1,$00
_address:
	.res	2,$00
_x:
	.res	1,$00
_y:
	.res	1,$00
_num_holder:
	.res	1,$00
_index2:
	.res	1,$00
_largeindex:
	.res	2,$00
_moveframes:
	.res	1,$00
.segment	"XRAM"
_wram_array:
	.res	8192,$00

; ---------------------------------------------------------------
; void __near__ banked_call (unsigned char, __near__ __near__ function returning void *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_banked_call: near

.segment	"CODE"

;
; void banked_call(unsigned char bankId, void (*method)(void)) {
;
	jsr     pushax
;
; bank_push(bankId);
;
	ldy     #$02
	lda     (sp),y
	jsr     _bank_push
;
; (*method)();
;
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     callax
;
; bank_pop();
;
	jsr     _bank_pop
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ bank_push (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bank_push: near

.segment	"CODE"

;
; void bank_push(unsigned char bankId) {
;
	jsr     pusha
;
; bankBuffer[bankLevel] = bankId;
;
	ldy     #$00
	lda     (sp),y
	ldy     _bankLevel
	sta     _bankBuffer,y
;
; ++bankLevel;
;
	inc     _bankLevel
;
; set_prg_bank(bankId);
;
	ldy     #$00
	lda     (sp),y
	jsr     _set_prg_bank
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ bank_pop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bank_pop: near

.segment	"CODE"

;
; --bankLevel;
;
	dec     _bankLevel
;
; if (bankLevel > 0) {
;
	beq     L0012
;
; set_prg_bank(bankBuffer[bankLevel-1]);
;
	ldx     #$00
	lda     _bankLevel
	sec
	sbc     #$01
	bcs     L0017
	dex
L0017:	sta     ptr1
	txa
	clc
	adc     #>(_bankBuffer)
	sta     ptr1+1
	ldy     #<(_bankBuffer)
	lda     (ptr1),y
	jmp     _set_prg_bank
;
; }
;
L0012:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ adjust_cost (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_adjust_cost: near

.segment	"CODE"

;
; if(cost1 >= 10){
;
	lda     _cost1
	cmp     #$0A
	bcc     L12DD
;
; cost1_changed = 1;
;
	lda     #$01
	sta     _cost1_changed
;
; cost1 = 0;
;
	lda     #$00
	sta     _cost1
;
; ++cost2;
;
	inc     _cost2
;
; if(cost2 >= 10){
;
	lda     _cost2
	cmp     #$0A
	bcc     L12DD
;
; cost2_changed = 1;
;
	lda     #$01
	sta     _cost2_changed
;
; cost2 = 0;
;
	lda     #$00
	sta     _cost2
;
; ++cost3;
;
	inc     _cost3
;
; if(cost3 >= 10){
;
	lda     _cost3
	cmp     #$0A
	bcc     L12DC
;
; cost3_changed = 1;
;
	lda     #$01
	sta     _cost3_changed
;
; cost3 = 0;
;
	lda     #$00
	sta     _cost3
;
; ++cost4;
;
	inc     _cost4
;
; if(cost4 >= 10) {
;
L12DC:	lda     _cost4
	cmp     #$0A
	bcc     L12DD
;
; cost4_changed = 1;
;
	lda     #$01
	sta     _cost4_changed
;
; cost4 = 0;
;
	lda     #$00
	sta     _cost4
;
; ++cost5;
;
	inc     _cost5
;
; if(cost5 >= 10){ // maximum 9999
;
L12DD:	lda     _cost5
	cmp     #$0A
	bcc     L0E84
;
; cost5 = 9;
;
	lda     #$09
	sta     _cost5
;
; cost4 = 9;
;
	sta     _cost4
;
; cost3 = 9;
;
	sta     _cost3
;
; cost2 = 9;
;
	sta     _cost2
;
; cost1 = 9;
;
	sta     _cost1
;
; }
;
L0E84:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ adjust_gas (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_adjust_gas: near

.segment	"CODE"

;
; if(gas1 >= 10){
;
	lda     _gas1
	cmp     #$0A
	bcc     L12DF
;
; gas1_changed = 1;
;
	lda     #$01
	sta     _gas1_changed
;
; gas1 = 0;
;
	lda     #$00
	sta     _gas1
;
; ++gas2;
;
	inc     _gas2
;
; if(gas2 >= 10){
;
	lda     _gas2
	cmp     #$0A
	bcc     L12DF
;
; gas2_changed = 1;
;
	lda     #$01
	sta     _gas2_changed
;
; gas2 = 0;
;
	lda     #$00
	sta     _gas2
;
; ++gas3;
;
	inc     _gas3
;
; if(gas3 >= 10){
;
	lda     _gas3
	cmp     #$0A
	bcc     L12DE
;
; gas3_changed = 1;
;
	lda     #$01
	sta     _gas3_changed
;
; gas3 = 0;
;
	lda     #$00
	sta     _gas3
;
; ++gas4;
;
	inc     _gas4
;
; if(gas4 >= 10) {
;
L12DE:	lda     _gas4
	cmp     #$0A
	bcc     L12DF
;
; gas4_changed = 1;
;
	lda     #$01
	sta     _gas4_changed
;
; gas4 = 0;
;
	lda     #$00
	sta     _gas4
;
; ++gas5;
;
	inc     _gas5
;
; if(gas5 >= 10){ // maximum 9999
;
L12DF:	lda     _gas5
	cmp     #$0A
	bcc     L0E5B
;
; gas5 = 9;
;
	lda     #$09
	sta     _gas5
;
; gas4 = 9;
;
	sta     _gas4
;
; gas3 = 9;
;
	sta     _gas3
;
; gas2 = 9;
;
	sta     _gas2
;
; gas1 = 9;
;
	sta     _gas1
;
; }
;
L0E5B:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_cost (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_cost: near

.segment	"CODE"

;
; if(cost3_changed){
;
	lda     _cost3_changed
	beq     L0E9B
;
; num_holder = cost4;
;
	lda     _cost4
	sta     _num_holder
;
; x=21;
;
	lda     #$15
	sta     _x
;
; y=14;
;
	lda     #$0E
	sta     _y
;
; draw_number_as_bg_tile();
;
	jsr     _draw_number_as_bg_tile
;
; cost3_changed = 0;
;
	lda     #$00
	sta     _cost3_changed
;
; if(cost2_changed){
;
L0E9B:	lda     _cost2_changed
	beq     L0EA6
;
; num_holder = cost3;
;
	lda     _cost3
	sta     _num_holder
;
; x=23;
;
	lda     #$17
	sta     _x
;
; y=14;
;
	lda     #$0E
	sta     _y
;
; draw_number_as_bg_tile();
;
	jsr     _draw_number_as_bg_tile
;
; cost2_changed = 0;
;
	lda     #$00
	sta     _cost2_changed
;
; if(cost1_changed){
;
L0EA6:	lda     _cost1_changed
	beq     L0EB1
;
; num_holder = cost2;
;
	lda     _cost2
	sta     _num_holder
;
; x=25;
;
	lda     #$19
	sta     _x
;
; y=14;
;
	lda     #$0E
	sta     _y
;
; draw_number_as_bg_tile();
;
	jsr     _draw_number_as_bg_tile
;
; cost1_changed = 0;
;
	lda     #$00
	sta     _cost1_changed
;
; num_holder = cost1;
;
L0EB1:	lda     _cost1
	sta     _num_holder
;
; x=27;
;
	lda     #$1B
	sta     _x
;
; y=14;
;
	lda     #$0E
	sta     _y
;
; draw_number_as_bg_tile();
;
	jmp     _draw_number_as_bg_tile

.endproc

; ---------------------------------------------------------------
; void __near__ draw_gas (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_gas: near

.segment	"CODE"

;
; if(gas3_changed){
;
	lda     _gas3_changed
	beq     L11C1
;
; num_holder = gas4;
;
	lda     _gas4
	sta     _num_holder
;
; x=21;
;
	lda     #$15
	sta     _x
;
; y=20;
;
	lda     #$14
	sta     _y
;
; draw_number_as_bg_tile();
;
	jsr     _draw_number_as_bg_tile
;
; gas3_changed=0;
;
	lda     #$00
	sta     _gas3_changed
;
; if(gas2_changed){
;
L11C1:	lda     _gas2_changed
	beq     L11CC
;
; num_holder = gas3;
;
	lda     _gas3
	sta     _num_holder
;
; x=23;
;
	lda     #$17
	sta     _x
;
; y=20;
;
	lda     #$14
	sta     _y
;
; draw_number_as_bg_tile();
;
	jsr     _draw_number_as_bg_tile
;
; gas2_changed = 0;
;
	lda     #$00
	sta     _gas2_changed
;
; if(gas1_changed){
;
L11CC:	lda     _gas1_changed
	beq     L11D7
;
; num_holder = gas2;
;
	lda     _gas2
	sta     _num_holder
;
; x=25;
;
	lda     #$19
	sta     _x
;
; y=20;
;
	lda     #$14
	sta     _y
;
; draw_number_as_bg_tile();
;
	jsr     _draw_number_as_bg_tile
;
; gas1_changed = 0;
;
	lda     #$00
	sta     _gas1_changed
;
; oam_meta_spr(0xc5,0x89,Decimal_1);//decimal for dollars
;
L11D7:	jsr     decsp2
	lda     #$C5
	ldy     #$01
	sta     (sp),y
	lda     #$89
	dey
	sta     (sp),y
	lda     #<(_Decimal_1)
	ldx     #>(_Decimal_1)
	jsr     _oam_meta_spr
;
; oam_meta_spr(0xc5,0xb9,Decimal_1);//decimal for gas
;
	jsr     decsp2
	lda     #$C5
	ldy     #$01
	sta     (sp),y
	lda     #$B9
	dey
	sta     (sp),y
	lda     #<(_Decimal_1)
	ldx     #>(_Decimal_1)
	jsr     _oam_meta_spr
;
; num_holder = gas1;
;
	lda     _gas1
	sta     _num_holder
;
; x=27;
;
	lda     #$1B
	sta     _x
;
; y=20;
;
	lda     #$14
	sta     _y
;
; draw_number_as_bg_tile();
;
	jmp     _draw_number_as_bg_tile

.endproc

; ---------------------------------------------------------------
; void __near__ read_input (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_read_input: near

.segment	"CODE"

;
; pad1 = pad_poll(0);     // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0); // newly pressed button. do pad_poll first
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; trigger_pulled =  (pad1 & PAD_A) || zap_shoot(0); // controller slot 1 zapper
;
	lda     _pad1
	and     #$80
	bne     L12E0
	jsr     _zap_shoot
	tax
	beq     L12E1
L12E0:	lda     #$01
L12E1:	sta     _trigger_pulled
;
; trigger_clicked = (pad1_new & PAD_A);
;
	lda     _pad1_new
	and     #$80
	sta     _trigger_clicked
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ find_sprite (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_find_sprite: near

.segment	"CODE"

;
; switch(sprite_cost) {
;
	lda     _sprite_cost
;
; }
;
	beq     L11F6
	cmp     #$01
	beq     L11FA
	cmp     #$02
	beq     L11FE
	cmp     #$03
	beq     L1202
	cmp     #$04
	beq     L1206
	cmp     #$05
	beq     L120A
	cmp     #$06
	beq     L120E
	cmp     #$07
	beq     L1212
	cmp     #$08
	beq     L1216
	cmp     #$09
	beq     L121A
	rts
;
; pointer = Zero;
;
L11F6:	lda     #>(_Zero)
	sta     _pointer+1
	lda     #<(_Zero)
	sta     _pointer
;
; break;
;
	rts
;
; pointer = One;
;
L11FA:	lda     #>(_One)
	sta     _pointer+1
	lda     #<(_One)
	sta     _pointer
;
; break;
;
	rts
;
; pointer = Two;
;
L11FE:	lda     #>(_Two)
	sta     _pointer+1
	lda     #<(_Two)
	sta     _pointer
;
; break;
;
	rts
;
; pointer = Three;
;
L1202:	lda     #>(_Three)
	sta     _pointer+1
	lda     #<(_Three)
	sta     _pointer
;
; break;
;
	rts
;
; pointer = Four;
;
L1206:	lda     #>(_Four)
	sta     _pointer+1
	lda     #<(_Four)
	sta     _pointer
;
; break;
;
	rts
;
; pointer = Five;
;
L120A:	lda     #>(_Five)
	sta     _pointer+1
	lda     #<(_Five)
	sta     _pointer
;
; break;
;
	rts
;
; pointer = Six;
;
L120E:	lda     #>(_Six)
	sta     _pointer+1
	lda     #<(_Six)
	sta     _pointer
;
; break;
;
	rts
;
; pointer = Seven;
;
L1212:	lda     #>(_Seven)
	sta     _pointer+1
	lda     #<(_Seven)
	sta     _pointer
;
; break;
;
	rts
;
; pointer = Eight;
;
L1216:	lda     #>(_Eight)
	sta     _pointer+1
	lda     #<(_Eight)
	sta     _pointer
;
; break;
;
	rts
;
; pointer = Nine;
;
L121A:	lda     #>(_Nine)
	sta     _pointer+1
	lda     #<(_Nine)
	sta     _pointer
;
; break;
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ init_mode_title (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_mode_title: near

.segment	"CODE"

;
; ppu_off();  // screen off
;
	jsr     _ppu_off
;
; oam_clear(); // clear all sprites
;
	jsr     _oam_clear
;
; set_chr_bank_0(TALKING_TIME_CHR);
;
	lda     #$02
	jsr     _set_chr_bank_0
;
; set_chr_bank_1(TALKING_TIME_CHR);
;
	lda     #$02
	jsr     _set_chr_bank_1
;
; clear_background();
;
	jsr     _clear_background
;
; multi_vram_buffer_horz("Gas Station Simulator", 21, NTADR_A(4,16)); 
;
	jsr     decsp3
	lda     #<(L1227)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1227)
	sta     (sp),y
	lda     #$15
	ldy     #$00
	sta     (sp),y
	ldx     #$22
	lda     #$04
	jsr     _multi_vram_buffer_horz
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; multi_vram_buffer_horz("Pull trigger to start", 21, NTADR_A(4,17)); 
;
	jsr     decsp3
	lda     #<(L1232)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1232)
	sta     (sp),y
	lda     #$15
	ldy     #$00
	sta     (sp),y
	ldx     #$22
	lda     #$24
	jsr     _multi_vram_buffer_horz
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; ppu_on_all(); // turn on screen
;
	jsr     _ppu_on_all
;
; game_mode=MODE_TITLE;
;
	lda     #$00
	sta     _game_mode
;
; game_level=START_OF_GAME;
;
	sta     _game_level
;
; reset_game_variables();
;
	jmp     _reset_game_variables

.endproc

; ---------------------------------------------------------------
; void __near__ init_mode_intro_cutscene (void)
; ---------------------------------------------------------------

.segment	"BANK0"

.proc	_init_mode_intro_cutscene: near

.segment	"BANK0"

;
; scrolled_past_once = 0;
;
	lda     #$00
	sta     _scrolled_past_once
;
; stop_scrolling = 0;
;
	sta     _stop_scrolling
;
; set_mirroring(MIRROR_HORIZONTAL);
;
	lda     #$03
	jsr     _set_mirroring
;
; ppu_off();  // screen off
;
	jsr     _ppu_off
;
; oam_clear(); // clear all sprites
;
	jsr     _oam_clear
;
; pal_col(0,0x21);
;
	lda     #$00
	jsr     pusha
	lda     #$21
	jsr     _pal_col
;
; pal_bg(background_pal);
;
	lda     #<(_background_pal)
	ldx     #>(_background_pal)
	jsr     _pal_bg
;
; set_chr_bank_0(INTRO_CHR);
;
	lda     #$04
	jsr     _set_chr_bank_0
;
; set_chr_bank_1(TALKING_TIME_CHR);
;
	lda     #$02
	jsr     _set_chr_bank_1
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(INTRO_TOP);
;
	lda     #<(_INTRO_TOP)
	ldx     #>(_INTRO_TOP)
	jsr     _vram_unrle
;
; vram_adr(NAMETABLE_C);
;
	ldx     #$28
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(INTRO_MIDDLE);
;
	lda     #<(_INTRO_MIDDLE)
	ldx     #>(_INTRO_MIDDLE)
	jsr     _vram_unrle
;
; ppu_on_all(); // turn on screen
;
	jsr     _ppu_on_all
;
; game_mode=MODE_INTRO_CUTSCENE;
;
	lda     #$03
	sta     _game_mode
;
; } 
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ init_mode_intro_instructions (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_mode_intro_instructions: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; oam_clear();
;
	jsr     _oam_clear
;
; draw_talking_time_background();
;
	jsr     _draw_talking_time_background
;
; multi_vram_buffer_horz("So you wanna", 12, NTADR_A(15,6)); 
;
	jsr     decsp3
	lda     #<(L127D)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L127D)
	sta     (sp),y
	lda     #$0C
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$CF
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(" pump gas?!?", 12, NTADR_A(15,7)); 
;
	jsr     decsp3
	lda     #<(L1287)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1287)
	sta     (sp),y
	lda     #$0C
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$EF
	jsr     _multi_vram_buffer_horz
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; multi_vram_buffer_horz("Give me 2 gallons!", 18, NTADR_A(13,9)); 
;
	jsr     decsp3
	lda     #<(L1292)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1292)
	sta     (sp),y
	lda     #$12
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$2D
	jsr     _multi_vram_buffer_horz
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; multi_vram_buffer_horz("Pull the trigger halfway", 24, NTADR_A(4,16)); 
;
	jsr     decsp3
	lda     #<(L129D)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L129D)
	sta     (sp),y
	lda     #$18
	ldy     #$00
	sta     (sp),y
	ldx     #$22
	lda     #$04
	jsr     _multi_vram_buffer_horz
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; multi_vram_buffer_horz("But not til it clicks", 21, NTADR_A(4,17)); 
;
	jsr     decsp3
	lda     #<(L12A8)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L12A8)
	sta     (sp),y
	lda     #$15
	ldy     #$00
	sta     (sp),y
	ldx     #$22
	lda     #$24
	jsr     _multi_vram_buffer_horz
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; ppu_on_all(); // turn on screen
;
	jsr     _ppu_on_all
;
; game_mode = MODE_INTRO_INSTRUCTION;
;
	lda     #$04
	sta     _game_mode
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ init_mode_game (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_mode_game: near

.segment	"CODE"

;
; ppu_off();  // screen off
;
	jsr     _ppu_off
;
; oam_clear(); // clear all sprites
;
	jsr     _oam_clear
;
; pal_col(0,0x21);
;
	lda     #$00
	jsr     pusha
	lda     #$21
	jsr     _pal_col
;
; pal_bg(background_pal);
;
	lda     #<(_background_pal)
	ldx     #>(_background_pal)
	jsr     _pal_bg
;
; bird_x = 0;
;
	lda     #$00
	sta     _bird_x
;
; set_chr_bank_0(LEVEL1_BG_CHR);
;
	jsr     _set_chr_bank_0
;
; set_chr_bank_1(LEVEL1_FG_CHR);
;
	lda     #$01
	jsr     _set_chr_bank_1
;
; scroll(0,0); //reset scrolling
;
	jsr     push0
	jsr     _scroll
;
; index = 0;
;
	lda     #$00
	sta     _index
;
; vram_adr(NAMETABLE_A); //Nametable A;
;
	ldx     #$20
	jsr     _vram_adr
;
; vram_unrle(LEVEL_1_PUMP);
;
	lda     #<(_LEVEL_1_PUMP)
	ldx     #>(_LEVEL_1_PUMP)
	jsr     _vram_unrle
;
; ppu_on_all(); // turn on screen
;
	jsr     _ppu_on_all
;
; game_mode=MODE_GAME;
;
	lda     #$01
	sta     _game_mode
;
; } 
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ init_level_one_end (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_level_one_end: near

.segment	"CODE"

;
; ppu_off();  // screen off
;
	jsr     _ppu_off
;
; oam_clear(); // clear all sprites
;
	jsr     _oam_clear
;
; clear_background();
;
	jsr     _clear_background
;
; draw_evaluation_time_background();
;
	jsr     _draw_evaluation_time_background
;
; if(gas3 == 2){
;
	lda     _gas3
	cmp     #$02
	bne     L1247
;
; multi_vram_buffer_horz("Nice Work!", 10, NTADR_A(16,5)); 
;
	jsr     decsp3
	lda     #<(L124A)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L124A)
	sta     (sp),y
	lda     #$0A
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$B0
;
; } else {
;
	jmp     L12E2
;
; multi_vram_buffer_horz("Hmmmm....", 10, NTADR_A(13,5)); 
;
L1247:	jsr     decsp3
	lda     #<(L1255)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1255)
	sta     (sp),y
	lda     #$0A
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$AD
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz("You just don't", 14, NTADR_A(13,6)); 
;
	jsr     decsp3
	lda     #<(L125F)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L125F)
	sta     (sp),y
	lda     #$0E
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$CD
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz("have what it takes", 18, NTADR_A(13,7)); 
;
	jsr     decsp3
	lda     #<(L1269)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1269)
	sta     (sp),y
	lda     #$12
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$ED
L12E2:	jsr     _multi_vram_buffer_horz
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; ppu_on_all(); // turn on screen
;
	jsr     _ppu_on_all
;
; game_mode=MODE_TALKING_TIME;
;
	lda     #$05
	sta     _game_mode
;
; game_level=LEVEL_ONE_COMPLETE;
;
	lda     #$01
	sta     _game_level
;
; } 
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_number_as_bg_tile (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_number_as_bg_tile: near

.segment	"CODE"

;
; switch(num_holder) {
;
	lda     _num_holder
;
; }
;
	jeq     L1174
	cmp     #$01
	beq     L0EC8
	cmp     #$02
	jeq     L0F14
	cmp     #$03
	jeq     L0F60
	cmp     #$04
	jeq     L0FAC
	cmp     #$05
	jeq     L0FF8
	cmp     #$06
	jeq     L1044
	cmp     #$07
	jeq     L1090
	cmp     #$08
	jeq     L10DC
	cmp     #$09
	jeq     L1128
	rts
;
; one_vram_buffer(0xc0, NTADR_A(x,y));
;
L0EC8:	lda     #$C0
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xc1, NTADR_A(x+1,y));
;
	lda     #$C1
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L0ED9
	inx
L0ED9:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xd0, NTADR_A(x, y+1));
;
	lda     #$D0
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L0EE1
	inx
L0EE1:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xd1, NTADR_A(x+1, y+1));
;
	lda     #$D1
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L0EEA
	inx
L0EEA:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L0EEC
	inx
L0EEC:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xe0, NTADR_A(x,y+2));
;
	lda     #$E0
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L0EF4
	inx
L0EF4:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xe1, NTADR_A(x+1,y+2));
;
	lda     #$E1
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L0EFD
	inx
L0EFD:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L0EFF
	inx
L0EFF:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xf0, NTADR_A(x,y+3));
;
	lda     #$F0
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L0F07
	inx
L0F07:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xf1, NTADR_A(x+1,y+3));
;
	lda     #$F1
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L0F10
	inx
L0F10:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L0F12
	inx
L0F12:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jmp     _one_vram_buffer
;
; one_vram_buffer(0xc2, NTADR_A(x,y));
;
L0F14:	lda     #$C2
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xc3, NTADR_A(x+1,y));
;
	lda     #$C3
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L0F25
	inx
L0F25:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xd2, NTADR_A(x, y+1));
;
	lda     #$D2
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L0F2D
	inx
L0F2D:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xd3, NTADR_A(x+1, y+1));
;
	lda     #$D3
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L0F36
	inx
L0F36:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L0F38
	inx
L0F38:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xe2, NTADR_A(x,y+2));
;
	lda     #$E2
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L0F40
	inx
L0F40:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xe3, NTADR_A(x+1,y+2));
;
	lda     #$E3
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L0F49
	inx
L0F49:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L0F4B
	inx
L0F4B:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xf2, NTADR_A(x,y+3));
;
	lda     #$F2
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L0F53
	inx
L0F53:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xf3, NTADR_A(x+1,y+3));
;
	lda     #$F3
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L0F5C
	inx
L0F5C:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L0F5E
	inx
L0F5E:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jmp     _one_vram_buffer
;
; one_vram_buffer(0xc4, NTADR_A(x,y));
;
L0F60:	lda     #$C4
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xc5, NTADR_A(x+1,y));
;
	lda     #$C5
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L0F71
	inx
L0F71:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xd4, NTADR_A(x, y+1));
;
	lda     #$D4
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L0F79
	inx
L0F79:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xd5, NTADR_A(x+1, y+1));
;
	lda     #$D5
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L0F82
	inx
L0F82:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L0F84
	inx
L0F84:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xe4, NTADR_A(x,y+2));
;
	lda     #$E4
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L0F8C
	inx
L0F8C:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xe5, NTADR_A(x+1,y+2));
;
	lda     #$E5
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L0F95
	inx
L0F95:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L0F97
	inx
L0F97:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xf4, NTADR_A(x,y+3));
;
	lda     #$F4
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L0F9F
	inx
L0F9F:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xf5, NTADR_A(x+1,y+3));
;
	lda     #$F5
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L0FA8
	inx
L0FA8:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L0FAA
	inx
L0FAA:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jmp     _one_vram_buffer
;
; one_vram_buffer(0xc6, NTADR_A(x,y));
;
L0FAC:	lda     #$C6
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xc7, NTADR_A(x+1,y));
;
	lda     #$C7
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L0FBD
	inx
L0FBD:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xd6, NTADR_A(x, y+1));
;
	lda     #$D6
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L0FC5
	inx
L0FC5:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xd7, NTADR_A(x+1, y+1));
;
	lda     #$D7
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L0FCE
	inx
L0FCE:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L0FD0
	inx
L0FD0:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xe6, NTADR_A(x,y+2));
;
	lda     #$E6
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L0FD8
	inx
L0FD8:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xe7, NTADR_A(x+1,y+2));
;
	lda     #$E7
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L0FE1
	inx
L0FE1:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L0FE3
	inx
L0FE3:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xf6, NTADR_A(x,y+3));
;
	lda     #$F6
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L0FEB
	inx
L0FEB:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xf7, NTADR_A(x+1,y+3));
;
	lda     #$F7
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L0FF4
	inx
L0FF4:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L0FF6
	inx
L0FF6:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jmp     _one_vram_buffer
;
; one_vram_buffer(0xc8, NTADR_A(x,y));
;
L0FF8:	lda     #$C8
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xc9, NTADR_A(x+1,y));
;
	lda     #$C9
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L1009
	inx
L1009:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xd8, NTADR_A(x, y+1));
;
	lda     #$D8
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L1011
	inx
L1011:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xd9, NTADR_A(x+1, y+1));
;
	lda     #$D9
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L101A
	inx
L101A:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L101C
	inx
L101C:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xe8, NTADR_A(x,y+2));
;
	lda     #$E8
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L1024
	inx
L1024:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xe9, NTADR_A(x+1,y+2));
;
	lda     #$E9
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L102D
	inx
L102D:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L102F
	inx
L102F:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xf8, NTADR_A(x,y+3));
;
	lda     #$F8
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L1037
	inx
L1037:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xf9, NTADR_A(x+1,y+3));
;
	lda     #$F9
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L1040
	inx
L1040:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L1042
	inx
L1042:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jmp     _one_vram_buffer
;
; one_vram_buffer(0xca, NTADR_A(x,y));
;
L1044:	lda     #$CA
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xcb, NTADR_A(x+1,y));
;
	lda     #$CB
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L1055
	inx
L1055:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xda, NTADR_A(x, y+1));
;
	lda     #$DA
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L105D
	inx
L105D:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xdb, NTADR_A(x+1, y+1));
;
	lda     #$DB
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L1066
	inx
L1066:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L1068
	inx
L1068:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xea, NTADR_A(x,y+2));
;
	lda     #$EA
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L1070
	inx
L1070:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xeb, NTADR_A(x+1,y+2));
;
	lda     #$EB
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L1079
	inx
L1079:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L107B
	inx
L107B:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xfa, NTADR_A(x,y+3));
;
	lda     #$FA
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L1083
	inx
L1083:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xfb, NTADR_A(x+1,y+3));
;
	lda     #$FB
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L108C
	inx
L108C:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L108E
	inx
L108E:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jmp     _one_vram_buffer
;
; one_vram_buffer(0xcc, NTADR_A(x,y));
;
L1090:	lda     #$CC
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xcd, NTADR_A(x+1,y));
;
	lda     #$CD
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L10A1
	inx
L10A1:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xdc, NTADR_A(x, y+1));
;
	lda     #$DC
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L10A9
	inx
L10A9:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xdd, NTADR_A(x+1, y+1));
;
	lda     #$DD
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L10B2
	inx
L10B2:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L10B4
	inx
L10B4:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xec, NTADR_A(x,y+2));
;
	lda     #$EC
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L10BC
	inx
L10BC:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xed, NTADR_A(x+1,y+2));
;
	lda     #$ED
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L10C5
	inx
L10C5:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L10C7
	inx
L10C7:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xfc, NTADR_A(x,y+3));
;
	lda     #$FC
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L10CF
	inx
L10CF:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xfd, NTADR_A(x+1,y+3));
;
	lda     #$FD
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L10D8
	inx
L10D8:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L10DA
	inx
L10DA:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jmp     _one_vram_buffer
;
; one_vram_buffer(0xce, NTADR_A(x,y));
;
L10DC:	lda     #$CE
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xcf, NTADR_A(x+1,y));
;
	lda     #$CF
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L10ED
	inx
L10ED:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xde, NTADR_A(x, y+1));
;
	lda     #$DE
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L10F5
	inx
L10F5:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xdf, NTADR_A(x+1, y+1));
;
	lda     #$DF
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L10FE
	inx
L10FE:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L1100
	inx
L1100:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xee, NTADR_A(x,y+2));
;
	lda     #$EE
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L1108
	inx
L1108:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xef, NTADR_A(x+1,y+2));
;
	lda     #$EF
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L1111
	inx
L1111:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L1113
	inx
L1113:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xfe, NTADR_A(x,y+3));
;
	lda     #$FE
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L111B
	inx
L111B:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xff, NTADR_A(x+1,y+3));
;
	lda     #$FF
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L1124
	inx
L1124:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L1126
	inx
L1126:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jmp     _one_vram_buffer
;
; one_vram_buffer(0x5e, NTADR_A(x,y));
;
L1128:	lda     #$5E
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x5f, NTADR_A(x+1,y));
;
	lda     #$5F
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L1139
	inx
L1139:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x6e, NTADR_A(x, y+1));
;
	lda     #$6E
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L1141
	inx
L1141:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x6f, NTADR_A(x+1, y+1));
;
	lda     #$6F
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L114A
	inx
L114A:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L114C
	inx
L114C:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x7e, NTADR_A(x,y+2));
;
	lda     #$7E
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L1154
	inx
L1154:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x7f, NTADR_A(x+1,y+2));
;
	lda     #$7F
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L115D
	inx
L115D:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L115F
	inx
L115F:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x8e, NTADR_A(x,y+3));
;
	lda     #$8E
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L1167
	inx
L1167:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x8f, NTADR_A(x+1,y+3));
;
	lda     #$8F
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L1170
	inx
L1170:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L1172
	inx
L1172:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jmp     _one_vram_buffer
;
; one_vram_buffer(0x1e, NTADR_A(x,y));
;
L1174:	lda     #$1E
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x1f, NTADR_A(x+1,y));
;
	lda     #$1F
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L1185
	inx
L1185:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x2e, NTADR_A(x, y+1));
;
	lda     #$2E
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L118D
	inx
L118D:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x2f, NTADR_A(x+1, y+1));
;
	lda     #$2F
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L1196
	inx
L1196:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L1198
	inx
L1198:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x3e, NTADR_A(x,y+2));
;
	lda     #$3E
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L11A0
	inx
L11A0:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x3f, NTADR_A(x+1,y+2));
;
	lda     #$3F
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L11A9
	inx
L11A9:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L11AB
	inx
L11AB:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x4e, NTADR_A(x,y+3));
;
	lda     #$4E
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L11B3
	inx
L11B3:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x4f, NTADR_A(x+1,y+3));
;
	lda     #$4F
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L11BC
	inx
L11BC:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L11BE
	inx
L11BE:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jmp     _one_vram_buffer

.endproc

; ---------------------------------------------------------------
; void __near__ draw_level_one_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_level_one_sprites: near

.segment	"CODE"

;
; oam_clear();
;
	jsr     _oam_clear
;
; bird_x += 1;
;
	inc     _bird_x
;
; bird_y = 0x20;
;
	lda     #$20
	sta     _bird_y
;
; oam_meta_spr(bird_x,bird_y,Bird);
;
	jsr     decsp2
	lda     _bird_x
	ldy     #$01
	sta     (sp),y
	lda     _bird_y
	dey
	sta     (sp),y
	lda     #<(_Bird)
	ldx     #>(_Bird)
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ draw_talking_time (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_talking_time: near

.segment	"CODE"

;
; temp1 = 0x2044; //vram addr for start of box
;
	lda     #$44
	sta     _temp1
;
; for(temp2 = 0; temp2 < 6; ++temp2){
;
	lda     #$00
	sta     _temp2
L12E3:	lda     _temp2
	cmp     #$06
	bcs     L0E15
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; vram_adr(temp1); //Nametable A starting block
;
	lda     _temp1
	ldx     #$00
	jsr     _vram_adr
;
; for(index = 0; index < 9; ++index){
;
	lda     #$00
	sta     _index
L12E4:	lda     _index
	cmp     #$09
	bcs     L0E20
;
; vram_put(0x00);
;
	lda     #$00
	jsr     _vram_put
;
; for(index = 0; index < 9; ++index){
;
	inc     _index
	jmp     L12E4
;
; flush_vram_update2();
;
L0E20:	jsr     _flush_vram_update2
;
; temp1 += 16;
;
	lda     #$10
	clc
	adc     _temp1
	sta     _temp1
;
; for(temp2 = 0; temp2 < 6; ++temp2){
;
	inc     _temp2
	jmp     L12E3
;
; flush_vram_update2();
;
L0E15:	jsr     _flush_vram_update2
;
; talking_time = 1;
;
	lda     #$01
	sta     _talking_time
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_talking_time_background (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_talking_time_background: near

.segment	"CODE"

;
; set_chr_bank_0(TALKING_TIME_CHR);
;
	lda     #$02
	jsr     _set_chr_bank_0
;
; set_chr_bank_1(TALKING_TIME_CHR);
;
	lda     #$02
	jsr     _set_chr_bank_1
;
; pal_bg(talking_time_palete);
;
	lda     #<(_talking_time_palete)
	ldx     #>(_talking_time_palete)
	jsr     _pal_bg
;
; vram_adr(NAMETABLE_A);  
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(TALKING_TIME_LEVEL);
;
	lda     #<(_TALKING_TIME_LEVEL)
	ldx     #>(_TALKING_TIME_LEVEL)
	jmp     _vram_unrle

.endproc

; ---------------------------------------------------------------
; void __near__ draw_evaluation_time_background (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_evaluation_time_background: near

.segment	"CODE"

;
; set_chr_bank_0(TALKING_TIME_CHR);
;
	lda     #$02
	jsr     _set_chr_bank_0
;
; set_chr_bank_1(TALKING_TIME_CHR);
;
	lda     #$02
	jsr     _set_chr_bank_1
;
; pal_bg(talking_time_palete);
;
	lda     #<(_talking_time_palete)
	ldx     #>(_talking_time_palete)
	jsr     _pal_bg
;
; vram_adr(NAMETABLE_A);  
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(EVALUATION);
;
	lda     #<(_EVALUATION)
	ldx     #>(_EVALUATION)
	jmp     _vram_unrle

.endproc

; ---------------------------------------------------------------
; void __near__ draw_talking_time_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_talking_time_sprites: near

.segment	"CODE"

;
; oam_meta_spr(0xa0, 0x90, BigAlsShirt);
;
	jsr     decsp2
	lda     #$A0
	ldy     #$01
	sta     (sp),y
	lda     #$90
	dey
	sta     (sp),y
	lda     #<(_BigAlsShirt)
	ldx     #>(_BigAlsShirt)
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ clear_background (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_clear_background: near

.segment	"CODE"

;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; for(tempint = 0; tempint < 960; ++tempint){
;
	lda     #$00
	sta     _tempint
	sta     _tempint+1
L0E04:	lda     _tempint
	cmp     #$C0
	lda     _tempint+1
	sbc     #$03
	bvc     L0E0B
	eor     #$80
L0E0B:	bpl     L0E05
;
; vram_put(0x00);
;
	lda     #$00
	jsr     _vram_put
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; for(tempint = 0; tempint < 960; ++tempint){
;
	inc     _tempint
	bne     L0E04
	inc     _tempint+1
	jmp     L0E04
;
; }
;
L0E05:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ reset_game_variables (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_reset_game_variables: near

.segment	"CODE"

;
; gas1 = gas2 = gas3 = gas4 = gas5 = 0;
;
	lda     #$00
	sta     _gas5
	sta     _gas4
	sta     _gas3
	sta     _gas2
	sta     _gas1
;
; cost1 = cost2 = cost3 = cost4 = cost5 = 0;
;
	sta     _cost5
	sta     _cost4
	sta     _cost3
	sta     _cost2
	sta     _cost1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ mode_intro_cutscene (void)
; ---------------------------------------------------------------

.segment	"BANK0"

.proc	_mode_intro_cutscene: near

.segment	"BANK0"

;
; ++moveframes;
;
	inc     _moveframes
;
; if(stop_scrolling == 0 && moveframes > 0){
;
	lda     _stop_scrolling
	bne     L12EB
	lda     _moveframes
	beq     L12EB
;
; scroll_y += 1;
;
	inc     _scroll_y
	bne     L0D1B
	inc     _scroll_y+1
;
; if(scrolled_past_once == 1 && scroll_y > 0x1df){
;
L0D1B:	lda     _scrolled_past_once
	cmp     #$01
	bne     L0D1C
	lda     _scroll_y
	cmp     #$E0
	lda     _scroll_y+1
	sbc     #$01
	bcc     L0D1C
;
; stop_scrolling = 1;
;
	lda     #$01
	sta     _stop_scrolling
;
; moveframes=0;
;
	lda     #$00
	sta     _moveframes
;
; if(scroll_y == 0x0ff){
;
L0D1C:	lda     _scroll_y+1
	bne     L0D24
	lda     _scroll_y
	cmp     #$FF
	bne     L0D24
;
; ppu_off();
;
	jsr     _ppu_off
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(INTRO_BOTTOM);
;
	lda     #<(_INTRO_BOTTOM)
	ldx     #>(_INTRO_BOTTOM)
	jsr     _vram_unrle
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; scrolled_past_once = 1;
;
	lda     #$01
	sta     _scrolled_past_once
;
; if(scroll_y > 0x1df) {
;
L0D24:	lda     _scroll_y
	cmp     #$E0
	lda     _scroll_y+1
	sbc     #$01
	lda     #$00
	bcc     L12EA
;
; scroll_y = 0;
;
	sta     _scroll_y
	sta     _scroll_y+1
;
; scroll(0,scroll_y);
;
L12EA:	jsr     push0
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _scroll
;
; moveframes = 0;
;
	lda     #$00
	sta     _moveframes
;
; if(stop_scrolling == 1 && moveframes == 100){
;
L12EB:	lda     _stop_scrolling
	cmp     #$01
	bne     L12EC
	lda     _moveframes
	cmp     #$64
	beq     L12ED
L12EC:	rts
;
; init_mode_intro_instructions();
;
L12ED:	jmp     _init_mode_intro_instructions

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; moveframes =0;
;
	lda     #$00
	sta     _moveframes
;
; pal_bg(background_pal); // load the palette
;
	lda     #<(_background_pal)
	ldx     #>(_background_pal)
	jsr     _pal_bg
;
; pal_spr(pal2); // load the palette
;
	lda     #<(_pal2)
	ldx     #>(_pal2)
	jsr     _pal_spr
;
; pal_col(0,0x0D);
;
	lda     #$00
	jsr     pusha
	lda     #$0D
	jsr     _pal_col
;
; bank_spr(1); // sprites use the 2nd tileset
;
	lda     #$01
	jsr     _bank_spr
;
; set_scroll_y(0xff); // shift the bg down 1 pixel
;
	ldx     #$00
	lda     #$FF
	jsr     _set_scroll_y
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; ppu_wait_nmi(); // wait
;
	jsr     _ppu_wait_nmi
;
; set_vram_buffer(); // points ppu update to vram_buffer, do this at least once
;
	jsr     _set_vram_buffer
;
; ppu_on_all(); // turn on screen
;
	jsr     _ppu_on_all
;
; init_mode_title();
;
	jsr     _init_mode_title
;
; if(game_mode == MODE_TITLE){
;
L12EE:	lda     _game_mode
	bne     L12F0
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; read_input();
;
	jsr     _read_input
;
; if (trigger_clicked)
;
	lda     _trigger_clicked
	beq     L12F0
;
; for(index=0; index < 10; ++index){
;
	lda     #$00
	sta     _index
L12EF:	lda     _index
	cmp     #$0A
	bcs     L0D5F
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; for(index=0; index < 10; ++index){
;
	inc     _index
	jmp     L12EF
;
; init_mode_game(); 
;
L0D5F:	jsr     _init_mode_game
;
; if(game_mode == MODE_INTRO_CUTSCENE){
;
L12F0:	lda     _game_mode
	cmp     #$03
	bne     L12F1
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; mode_intro_cutscene();
;
	jsr     _mode_intro_cutscene
;
; if(game_mode == MODE_INTRO_INSTRUCTION){
;
L12F1:	lda     _game_mode
	cmp     #$04
	bne     L12F8
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; draw_talking_time_sprites();
;
	jsr     _draw_talking_time_sprites
;
; if(moveframes > 60){
;
	lda     _moveframes
	cmp     #$3D
	bcc     L0D70
;
; moveframes = 0;
;
	lda     #$00
	sta     _moveframes
;
; oam_clear(); // clear all sprites
;
L0D70:	jsr     _oam_clear
;
; if(moveframes >= 0 && moveframes < 30){
;
	lda     _moveframes
	cmp     #$1E
	bcs     L12F3
;
; oam_meta_spr(0x20, 0x20, BigAlTalk1);
;
	jsr     decsp2
	lda     #$20
	ldy     #$01
	sta     (sp),y
	dey
	sta     (sp),y
	lda     #<(_BigAlTalk1)
	ldx     #>(_BigAlTalk1)
	jsr     _oam_meta_spr
;
; if(moveframes >= 30 && moveframes < 61){
;
L12F3:	lda     _moveframes
	cmp     #$1E
	bcc     L0D7D
	cmp     #$3D
	bcs     L0D7D
;
; oam_meta_spr(0x20, 0x20, BigAlTalk2);
;
	jsr     decsp2
	lda     #$20
	ldy     #$01
	sta     (sp),y
	dey
	sta     (sp),y
	lda     #<(_BigAlTalk2)
	ldx     #>(_BigAlTalk2)
	jsr     _oam_meta_spr
;
; read_input();
;
L0D7D:	jsr     _read_input
;
; if (trigger_clicked)
;
	lda     _trigger_clicked
	beq     L12F8
;
; for(index=0; index < 10; ++index){
;
	lda     #$00
	sta     _index
L12F7:	lda     _index
	cmp     #$0A
	bcs     L0D89
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; for(index=0; index < 10; ++index){
;
	inc     _index
	jmp     L12F7
;
; init_mode_game();
;
L0D89:	jsr     _init_mode_game
;
; if(game_mode == MODE_TALKING_TIME){
;
L12F8:	lda     _game_mode
	cmp     #$05
	jne     L1300
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; ++moveframes;
;
	inc     _moveframes
;
; if(moveframes > 60){
;
	lda     _moveframes
	cmp     #$3D
	bcc     L0D96
;
; moveframes = 0;
;
	lda     #$00
	sta     _moveframes
;
; oam_clear(); // clear all sprites
;
L0D96:	jsr     _oam_clear
;
; if(moveframes >= 0 && moveframes < 30){
;
	lda     _moveframes
	cmp     #$1E
	bcs     L12FA
;
; oam_meta_spr(0x20, 0x20, BigAlTalk1);
;
	jsr     decsp2
	lda     #$20
	ldy     #$01
	sta     (sp),y
	dey
	sta     (sp),y
	lda     #<(_BigAlTalk1)
	ldx     #>(_BigAlTalk1)
	jsr     _oam_meta_spr
;
; if(moveframes >= 30 && moveframes < 61){
;
L12FA:	lda     _moveframes
	cmp     #$1E
	bcc     L0DA3
	cmp     #$3D
	bcs     L0DA3
;
; oam_meta_spr(0x20, 0x20, BigAlTalk2);
;
	jsr     decsp2
	lda     #$20
	ldy     #$01
	sta     (sp),y
	dey
	sta     (sp),y
	lda     #<(_BigAlTalk2)
	ldx     #>(_BigAlTalk2)
	jsr     _oam_meta_spr
;
; read_input();
;
L0DA3:	jsr     _read_input
;
; if (trigger_clicked)
;
	lda     _trigger_clicked
	beq     L1300
;
; for(index=0; index < 10; ++index){
;
	lda     #$00
	sta     _index
L12FE:	lda     _index
	cmp     #$0A
	bcs     L12FF
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; for(index=0; index < 10; ++index){
;
	inc     _index
	jmp     L12FE
;
; switch(game_level){
;
L12FF:	lda     _game_level
;
; }
;
	beq     L0DBB
	cmp     #$01
	beq     L0DBE
	jmp     L1300
;
; init_mode_game();
;
L0DBB:	jsr     _init_mode_game
;
; break;
;
	jmp     L1300
;
; init_mode_title();
;
L0DBE:	jsr     _init_mode_title
;
; if(game_mode == MODE_GAME){
;
L1300:	lda     _game_mode
	cmp     #$01
	jne     L12EE
;
; ppu_wait_nmi(); // wait till beginning of the frame
;
	jsr     _ppu_wait_nmi
;
; draw_level_one_sprites();
;
	jsr     _draw_level_one_sprites
;
; draw_gas();
;
	jsr     _draw_gas
;
; draw_cost();
;
	jsr     _draw_cost
;
; read_input(); //sets input_active
;
	jsr     _read_input
;
; if(trigger_pulled){
;
	lda     _trigger_pulled
	beq     L0DC8
;
; started_pumping = 1; //actually only need to set this once
;
	lda     #$01
	sta     _started_pumping
;
; gas_speed += GAS_STEP;
;
	lda     #$32
	clc
	adc     _gas_speed
	sta     _gas_speed
	bcc     L0DD1
	inc     _gas_speed+1
;
; while(gas_speed > 256){
;
	jmp     L0DD1
;
; ++gas1;
;
L1301:	inc     _gas1
;
; gas_speed -= 256;
;
	lda     _gas_speed
	sec
	sbc     #$00
	sta     _gas_speed
	lda     _gas_speed+1
	sbc     #$01
	sta     _gas_speed+1
;
; while(gas_speed > 256){
;
L0DD1:	lda     _gas_speed
	cmp     #$01
	lda     _gas_speed+1
	sbc     #$01
	bcs     L1301
;
; adjust_gas();
;
	jsr     _adjust_gas
;
; cost_speed += COST_STEP;
;
	lda     #$50
	clc
	adc     _cost_speed
	sta     _cost_speed
	bcc     L0DDC
	inc     _cost_speed+1
;
; while(cost_speed > 256){
;
	jmp     L0DDC
;
; ++cost1;
;
L1302:	inc     _cost1
;
; cost_speed -= 256;
;
	lda     _cost_speed
	sec
	sbc     #$00
	sta     _cost_speed
	lda     _cost_speed+1
	sbc     #$01
	sta     _cost_speed+1
;
; while(cost_speed > 256){
;
L0DDC:	lda     _cost_speed
	cmp     #$01
	lda     _cost_speed+1
	sbc     #$01
	bcs     L1302
;
; adjust_cost(); 
;
	jsr     _adjust_cost
;
; } else {
;
	jmp     L12EE
;
; if(started_pumping == 1){
;
L0DC8:	lda     _started_pumping
	cmp     #$01
	jne     L12EE
;
; init_level_one_end();
;
	jsr     _init_level_one_end
;
; while (1){
;
	jmp     L12EE

.endproc

