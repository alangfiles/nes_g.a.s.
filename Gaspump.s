;
; File generated by cc65 v 2.18 - N/A
;
	.fopt		compiler,"cc65 v 2.18 - N/A"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_meta_spr
	.import		_pad_poll
	.import		_bank_spr
	.import		_vram_adr
	.import		_vram_put
	.import		_set_vram_buffer
	.import		_one_vram_buffer
	.import		_multi_vram_buffer_horz
	.import		_get_pad_new
	.import		_set_scroll_y
	.import		_flush_vram_update2
	.import		_zap_shoot
	.export		_pad2_zapper
	.export		_zapper_ready
	.export		_hit_detected
	.export		_cost5
	.export		_cost4
	.export		_cost3
	.export		_cost2
	.export		_cost1
	.export		_gas6
	.export		_gas5
	.export		_gas4
	.export		_gas3
	.export		_gas2
	.export		_gas1
	.export		_gas_speed
	.export		_cost_speed
	.export		_pad1
	.export		_pad1_new
	.export		_trigger_pulled
	.export		_trigger_clicked
	.export		_sprite_cost
	.export		_cost_sprite
	.export		_game_mode
	.export		_pointer
	.export		_temp1
	.export		_temp2
	.export		_address
	.export		_x
	.export		_y
	.export		_num_holder
	.export		_index
	.export		_index2
	.export		_largeindex
	.export		_wram_array
	.export		_adjust_cost
	.export		_adjust_gas
	.export		_draw_cost
	.export		_draw_gas
	.export		_read_input
	.export		_find_sprite
	.export		_init_mode_title
	.export		_init_mode_intro
	.export		_init_mode_game
	.export		_draw_number_as_bg_tile
	.export		_One
	.export		_Two
	.export		_Three
	.export		_Four
	.export		_Five
	.export		_Six
	.export		_Seven
	.export		_Eight
	.export		_Nine
	.export		_Zero
	.export		_metatiles_1
	.export		_room_1
	.export		_level1
	.export		_pal1
	.export		_pal2
	.export		_main

.segment	"DATA"

_index:
	.byte	$00

.segment	"RODATA"

_One:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$20
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$21
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$30
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$31
	.byte	$00
	.byte	$80
_Two:
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$12
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$13
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$22
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$23
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$32
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$33
	.byte	$00
	.byte	$80
_Three:
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$14
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$15
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$24
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$25
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$34
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$35
	.byte	$00
	.byte	$80
_Four:
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$16
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$17
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$26
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$27
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$36
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$37
	.byte	$00
	.byte	$80
_Five:
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$19
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$28
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$29
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$38
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$39
	.byte	$00
	.byte	$80
_Six:
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$0B
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$1A
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$1B
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$2A
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$2B
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$3A
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$3B
	.byte	$00
	.byte	$80
_Seven:
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$0D
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$1C
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$1D
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$2C
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$2D
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$3C
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$3D
	.byte	$00
	.byte	$80
_Eight:
	.byte	$00
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$0F
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$1E
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$1F
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$2E
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$2F
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$3E
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$3F
	.byte	$00
	.byte	$80
_Nine:
	.byte	$00
	.byte	$00
	.byte	$4E
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$4F
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$5E
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$5F
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$6E
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$6F
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$7E
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$7F
	.byte	$00
	.byte	$80
_Zero:
	.byte	$00
	.byte	$00
	.byte	$4C
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$4D
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$5C
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$5D
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$6C
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$7C
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$7D
	.byte	$00
	.byte	$80
_metatiles_1:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$C0
	.byte	$C1
	.byte	$D0
	.byte	$D1
	.byte	$01
	.byte	$E0
	.byte	$E1
	.byte	$F0
	.byte	$F1
	.byte	$01
	.byte	$C2
	.byte	$C3
	.byte	$D2
	.byte	$D3
	.byte	$01
	.byte	$E0
	.byte	$E3
	.byte	$F2
	.byte	$F3
	.byte	$01
	.byte	$C4
	.byte	$C5
	.byte	$D4
	.byte	$D5
	.byte	$01
	.byte	$E4
	.byte	$E5
	.byte	$F4
	.byte	$F5
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$7E
	.byte	$00
	.byte	$01
	.byte	$7C
	.byte	$00
	.byte	$5D
	.byte	$7B
	.byte	$01
	.byte	$5B
	.byte	$5C
	.byte	$5D
	.byte	$5C
	.byte	$01
	.byte	$7E
	.byte	$5B
	.byte	$7C
	.byte	$7C
	.byte	$01
	.byte	$3C
	.byte	$5C
	.byte	$7D
	.byte	$7C
	.byte	$01
	.byte	$7E
	.byte	$7E
	.byte	$7C
	.byte	$7C
	.byte	$01
	.byte	$7E
	.byte	$00
	.byte	$7C
	.byte	$00
	.byte	$01
	.byte	$5B
	.byte	$5C
	.byte	$3E
	.byte	$7F
	.byte	$01
	.byte	$5F
	.byte	$3C
	.byte	$00
	.byte	$7C
	.byte	$01
	.byte	$2F
	.byte	$5B
	.byte	$00
	.byte	$7C
	.byte	$01
	.byte	$5C
	.byte	$5B
	.byte	$7C
	.byte	$7C
	.byte	$01
	.byte	$5C
	.byte	$00
	.byte	$7F
	.byte	$00
	.byte	$01
	.byte	$7C
	.byte	$00
	.byte	$7C
	.byte	$00
	.byte	$01
	.byte	$7D
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$5F
	.byte	$7B
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$7F
	.byte	$00
	.byte	$7C
	.byte	$00
	.byte	$01
	.byte	$5E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$5B
	.byte	$7B
	.byte	$7C
	.byte	$00
	.byte	$01
	.byte	$5D
	.byte	$5E
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$7D
	.byte	$7D
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$7D
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$5D
	.byte	$5E
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$5D
	.byte	$3D
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$7D
	.byte	$7D
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$7D
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$5D
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$5E
	.byte	$7D
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$7D
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$7C
	.byte	$00
	.byte	$7C
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$5F
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$7E
	.byte	$00
	.byte	$01
	.byte	$5E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$5C
	.byte	$00
	.byte	$01
	.byte	$5D
	.byte	$7B
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$7B
	.byte	$7B
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$5E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$7E
	.byte	$00
	.byte	$01
_room_1:
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$14
	.byte	$12
	.byte	$12
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$14
	.byte	$12
	.byte	$10
	.byte	$14
	.byte	$12
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$14
	.byte	$01
	.byte	$23
	.byte	$0A
	.byte	$10
	.byte	$14
	.byte	$14
	.byte	$07
	.byte	$02
	.byte	$02
	.byte	$07
	.byte	$0B
	.byte	$0A
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$09
	.byte	$25
	.byte	$24
	.byte	$01
	.byte	$07
	.byte	$01
	.byte	$1A
	.byte	$15
	.byte	$15
	.byte	$15
	.byte	$19
	.byte	$02
	.byte	$0A
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$14
	.byte	$01
	.byte	$25
	.byte	$01
	.byte	$0B
	.byte	$02
	.byte	$16
	.byte	$28
	.byte	$1F
	.byte	$00
	.byte	$17
	.byte	$23
	.byte	$11
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$13
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$16
	.byte	$00
	.byte	$00
	.byte	$1E
	.byte	$17
	.byte	$24
	.byte	$12
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$04
	.byte	$11
	.byte	$13
	.byte	$01
	.byte	$01
	.byte	$1B
	.byte	$18
	.byte	$00
	.byte	$18
	.byte	$1C
	.byte	$01
	.byte	$11
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$09
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$26
	.byte	$01
	.byte	$01
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$13
	.byte	$05
	.byte	$0B
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$12
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$13
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$25
_level1:
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$13
	.byte	$33
	.byte	$15
	.byte	$16
	.byte	$17
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$1B
	.byte	$1C
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$22
	.byte	$23
	.byte	$33
	.byte	$25
	.byte	$26
	.byte	$27
	.byte	$28
	.byte	$29
	.byte	$2A
	.byte	$2B
	.byte	$2C
	.byte	$2D
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$32
	.byte	$33
	.byte	$03
	.byte	$35
	.byte	$36
	.byte	$37
	.byte	$38
	.byte	$39
	.byte	$3A
	.byte	$3B
	.byte	$03
	.byte	$3D
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$45
	.byte	$46
	.byte	$47
	.byte	$48
	.byte	$49
	.byte	$4A
	.byte	$4B
	.byte	$03
	.byte	$4D
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$52
	.byte	$53
	.byte	$54
	.byte	$55
	.byte	$56
	.byte	$57
	.byte	$58
	.byte	$59
	.byte	$5A
	.byte	$5B
	.byte	$5C
	.byte	$5D
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$62
	.byte	$63
	.byte	$64
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$69
	.byte	$6A
	.byte	$6B
	.byte	$6C
	.byte	$6D
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$73
	.byte	$74
	.byte	$75
	.byte	$76
	.byte	$77
	.byte	$78
	.byte	$79
	.byte	$7A
	.byte	$7B
	.byte	$7C
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$84
	.byte	$85
	.byte	$86
	.byte	$87
	.byte	$88
	.byte	$89
	.byte	$8A
	.byte	$8B
	.byte	$8C
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$91
	.byte	$92
	.byte	$93
	.byte	$94
	.byte	$95
	.byte	$96
	.byte	$97
	.byte	$98
	.byte	$99
	.byte	$9A
	.byte	$9B
	.byte	$9C
	.byte	$9D
	.byte	$9E
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$A1
	.byte	$A2
	.byte	$A3
	.byte	$A4
	.byte	$A5
	.byte	$A6
	.byte	$A7
	.byte	$A8
	.byte	$A9
	.byte	$AA
	.byte	$AB
	.byte	$AC
	.byte	$AD
	.byte	$AE
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$B1
	.byte	$B2
	.byte	$B3
	.byte	$B4
	.byte	$B5
	.byte	$B6
	.byte	$B7
	.byte	$B8
	.byte	$B9
	.byte	$BA
	.byte	$BB
	.byte	$BC
	.byte	$BD
	.byte	$BE
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$B0
	.byte	$01
	.byte	$01
	.byte	$7D
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$BF
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$61
	.byte	$61
	.byte	$00
	.byte	$00
	.byte	$61
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$61
	.byte	$90
	.byte	$81
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$0B
	.byte	$0B
	.byte	$0C
	.byte	$0D
	.byte	$0E
	.byte	$0F
	.byte	$71
	.byte	$9F
	.byte	$61
	.byte	$00
	.byte	$61
	.byte	$00
	.byte	$00
	.byte	$61
	.byte	$00
	.byte	$61
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$B0
	.byte	$81
	.byte	$01
	.byte	$20
	.byte	$21
	.byte	$30
	.byte	$30
	.byte	$31
	.byte	$40
	.byte	$41
	.byte	$50
	.byte	$01
	.byte	$71
	.byte	$AF
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$B0
	.byte	$81
	.byte	$00
	.byte	$C0
	.byte	$C1
	.byte	$C2
	.byte	$C3
	.byte	$C4
	.byte	$C5
	.byte	$C6
	.byte	$C7
	.byte	$00
	.byte	$71
	.byte	$9F
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$A0
	.byte	$81
	.byte	$00
	.byte	$D0
	.byte	$D1
	.byte	$D2
	.byte	$D3
	.byte	$D4
	.byte	$D5
	.byte	$D6
	.byte	$D7
	.byte	$00
	.byte	$3C
	.byte	$BF
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$A0
	.byte	$81
	.byte	$00
	.byte	$E0
	.byte	$E1
	.byte	$E2
	.byte	$E3
	.byte	$E4
	.byte	$E5
	.byte	$E6
	.byte	$E7
	.byte	$00
	.byte	$4C
	.byte	$AF
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$70
	.byte	$00
	.byte	$70
	.byte	$B0
	.byte	$81
	.byte	$00
	.byte	$F0
	.byte	$F1
	.byte	$F2
	.byte	$F3
	.byte	$F4
	.byte	$F5
	.byte	$F6
	.byte	$F7
	.byte	$00
	.byte	$71
	.byte	$9F
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$12
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$B0
	.byte	$81
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$71
	.byte	$BF
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$14
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$12
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$B0
	.byte	$81
	.byte	$01
	.byte	$10
	.byte	$31
	.byte	$30
	.byte	$30
	.byte	$21
	.byte	$11
	.byte	$41
	.byte	$50
	.byte	$01
	.byte	$71
	.byte	$AF
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$14
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$B0
	.byte	$81
	.byte	$00
	.byte	$C8
	.byte	$C9
	.byte	$CA
	.byte	$CB
	.byte	$CC
	.byte	$CD
	.byte	$CE
	.byte	$CF
	.byte	$00
	.byte	$71
	.byte	$9F
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$34
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$24
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$A0
	.byte	$81
	.byte	$00
	.byte	$D8
	.byte	$D9
	.byte	$DA
	.byte	$DB
	.byte	$DC
	.byte	$DD
	.byte	$DE
	.byte	$DF
	.byte	$00
	.byte	$3C
	.byte	$BF
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$34
	.byte	$61
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$24
	.byte	$60
	.byte	$60
	.byte	$34
	.byte	$61
	.byte	$24
	.byte	$60
	.byte	$90
	.byte	$81
	.byte	$00
	.byte	$E8
	.byte	$E9
	.byte	$EA
	.byte	$EB
	.byte	$EC
	.byte	$ED
	.byte	$EE
	.byte	$EF
	.byte	$00
	.byte	$4C
	.byte	$AF
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$34
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$61
	.byte	$00
	.byte	$61
	.byte	$00
	.byte	$24
	.byte	$B0
	.byte	$81
	.byte	$00
	.byte	$F8
	.byte	$F9
	.byte	$FA
	.byte	$FB
	.byte	$FC
	.byte	$FD
	.byte	$FE
	.byte	$FF
	.byte	$00
	.byte	$71
	.byte	$AF
	.byte	$61
	.byte	$61
	.byte	$61
	.byte	$61
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$B0
	.byte	$81
	.byte	$01
	.byte	$01
	.byte	$09
	.byte	$0A
	.byte	$0B
	.byte	$0B
	.byte	$0C
	.byte	$0D
	.byte	$01
	.byte	$01
	.byte	$71
	.byte	$AF
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$B0
	.byte	$01
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$0B
	.byte	$0B
	.byte	$0C
	.byte	$0D
	.byte	$0E
	.byte	$0F
	.byte	$01
	.byte	$BF
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$80
	.byte	$A2
	.byte	$A3
	.byte	$A4
	.byte	$A5
	.byte	$A6
	.byte	$01
	.byte	$01
	.byte	$A9
	.byte	$AA
	.byte	$AB
	.byte	$AC
	.byte	$AD
	.byte	$8D
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$61
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$61
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$B1
	.byte	$B2
	.byte	$B3
	.byte	$B4
	.byte	$B5
	.byte	$B6
	.byte	$B7
	.byte	$B8
	.byte	$B9
	.byte	$BA
	.byte	$BB
	.byte	$BC
	.byte	$BD
	.byte	$BE
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$A0
	.byte	$01
	.byte	$01
	.byte	$82
	.byte	$30
	.byte	$51
	.byte	$31
	.byte	$20
	.byte	$51
	.byte	$20
	.byte	$82
	.byte	$01
	.byte	$01
	.byte	$BF
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$B0
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$9F
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$05
	.byte	$05
	.byte	$45
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$10
	.byte	$00
	.byte	$54
	.byte	$55
	.byte	$55
	.byte	$FF
	.byte	$FF
	.byte	$33
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$FF
	.byte	$FF
	.byte	$5F
	.byte	$5F
	.byte	$13
	.byte	$A0
	.byte	$A0
	.byte	$20
	.byte	$5F
	.byte	$5F
	.byte	$FF
	.byte	$FF
	.byte	$33
	.byte	$0A
	.byte	$0A
	.byte	$02
	.byte	$F7
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$33
	.byte	$AA
	.byte	$AA
	.byte	$22
	.byte	$FF
	.byte	$FF
	.byte	$F7
	.byte	$F5
	.byte	$31
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$F5
	.byte	$FF
	.byte	$0F
	.byte	$0F
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0F
	.byte	$0F
_pal1:
	.byte	$0F
	.byte	$05
	.byte	$3D
	.byte	$15
	.byte	$0F
	.byte	$38
	.byte	$21
	.byte	$15
	.byte	$0F
	.byte	$3D
	.byte	$20
	.byte	$11
	.byte	$0F
	.byte	$19
	.byte	$2A
	.byte	$15
_pal2:
	.byte	$0F
	.byte	$3D
	.byte	$20
	.byte	$11
	.byte	$0F
	.byte	$19
	.byte	$2A
	.byte	$15
	.byte	$0F
	.byte	$05
	.byte	$3D
	.byte	$15
	.byte	$0F
	.byte	$38
	.byte	$21
	.byte	$15
L0B10:
	.byte	$50,$75,$6C,$6C,$20,$74,$68,$65,$20,$74,$72,$69,$67,$67,$65,$72
	.byte	$20,$68,$61,$6C,$66,$77,$61,$79,$00
L0AFF:
	.byte	$50,$75,$6C,$6C,$20,$74,$72,$69,$67,$67,$65,$72,$20,$74,$6F,$20
	.byte	$73,$74,$61,$72,$74,$00
L0AF4:
	.byte	$47,$61,$73,$20,$53,$74,$61,$74,$69,$6F,$6E,$20,$53,$69,$6D,$75
	.byte	$6C,$61,$74,$6F,$72,$00
L0B1B:
	.byte	$42,$75,$74,$20,$6E,$6F,$74,$20,$74,$69,$6C,$20,$69,$74,$20,$63
	.byte	$6C,$69,$63,$6B,$73,$00

.segment	"BSS"

.segment	"ZEROPAGE"
_pad2_zapper:
	.res	1,$00
_zapper_ready:
	.res	1,$00
_hit_detected:
	.res	1,$00
_cost5:
	.res	1,$00
_cost4:
	.res	1,$00
_cost3:
	.res	1,$00
_cost2:
	.res	1,$00
_cost1:
	.res	1,$00
_gas6:
	.res	1,$00
_gas5:
	.res	1,$00
_gas4:
	.res	1,$00
_gas3:
	.res	1,$00
_gas2:
	.res	1,$00
_gas1:
	.res	1,$00
_gas_speed:
	.res	2,$00
_cost_speed:
	.res	2,$00
_pad1:
	.res	1,$00
_pad1_new:
	.res	1,$00
_trigger_pulled:
	.res	1,$00
_trigger_clicked:
	.res	1,$00
_sprite_cost:
	.res	1,$00
_cost_sprite:
	.res	1,$00
_game_mode:
	.res	1,$00
_pointer:
	.res	2,$00
_temp1:
	.res	1,$00
_temp2:
	.res	1,$00
_address:
	.res	2,$00
_x:
	.res	1,$00
_y:
	.res	1,$00
_num_holder:
	.res	1,$00
_index2:
	.res	1,$00
_largeindex:
	.res	2,$00
.segment	"XRAM"
_wram_array:
	.res	8192,$00

; ---------------------------------------------------------------
; void __near__ adjust_cost (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_adjust_cost: near

.segment	"CODE"

;
; if(cost1 >= 10){
;
	lda     _cost1
	cmp     #$0A
	bcc     L0B46
;
; cost1 = 0;
;
	lda     #$00
	sta     _cost1
;
; ++cost2;
;
	inc     _cost2
;
; if(cost2 >= 10){
;
	lda     _cost2
	cmp     #$0A
	bcc     L0B46
;
; cost2 = 0;
;
	lda     #$00
	sta     _cost2
;
; ++cost3;
;
	inc     _cost3
;
; if(cost3 >= 10){
;
	lda     _cost3
	cmp     #$0A
	bcc     L0B45
;
; cost3 = 0;
;
	lda     #$00
	sta     _cost3
;
; ++cost4;
;
	inc     _cost4
;
; if(cost4 >= 10) {
;
L0B45:	lda     _cost4
	cmp     #$0A
	bcc     L0B46
;
; cost4 = 0;
;
	lda     #$00
	sta     _cost4
;
; ++cost5;
;
	inc     _cost5
;
; if(cost5 >= 10){ // maximum 9999
;
L0B46:	lda     _cost5
	cmp     #$0A
	bcc     L0780
;
; cost5 = 9;
;
	lda     #$09
	sta     _cost5
;
; cost4 = 9;
;
	sta     _cost4
;
; cost3 = 9;
;
	sta     _cost3
;
; cost2 = 9;
;
	sta     _cost2
;
; cost1 = 9;
;
	sta     _cost1
;
; }
;
L0780:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ adjust_gas (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_adjust_gas: near

.segment	"CODE"

;
; if(gas1 >= 10){
;
	lda     _gas1
	cmp     #$0A
	bcc     L0B48
;
; gas1 = 0;
;
	lda     #$00
	sta     _gas1
;
; ++gas2;
;
	inc     _gas2
;
; if(gas2 >= 10){
;
	lda     _gas2
	cmp     #$0A
	bcc     L0B48
;
; gas2 = 0;
;
	lda     #$00
	sta     _gas2
;
; ++gas3;
;
	inc     _gas3
;
; if(gas3 >= 10){
;
	lda     _gas3
	cmp     #$0A
	bcc     L0B47
;
; gas3 = 0;
;
	lda     #$00
	sta     _gas3
;
; ++gas4;
;
	inc     _gas4
;
; if(gas4 >= 10) {
;
L0B47:	lda     _gas4
	cmp     #$0A
	bcc     L0B48
;
; gas4 = 0;
;
	lda     #$00
	sta     _gas4
;
; ++gas5;
;
	inc     _gas5
;
; if(gas5 >= 10){ // maximum 9999
;
L0B48:	lda     _gas5
	cmp     #$0A
	bcc     L075F
;
; gas5 = 9;
;
	lda     #$09
	sta     _gas5
;
; gas4 = 9;
;
	sta     _gas4
;
; gas3 = 9;
;
	sta     _gas3
;
; gas2 = 9;
;
	sta     _gas2
;
; gas1 = 9;
;
	sta     _gas1
;
; }
;
L075F:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_cost (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_cost: near

.segment	"CODE"

;
; sprite_cost = cost4;
;
	lda     _cost4
	sta     _sprite_cost
;
; find_sprite();
;
	jsr     _find_sprite
;
; oam_meta_spr(0x68, 0xa0, pointer);
;
	jsr     decsp2
	lda     #$68
	ldy     #$01
	sta     (sp),y
	lda     #$A0
	dey
	sta     (sp),y
	lda     _pointer
	ldx     _pointer+1
	jsr     _oam_meta_spr
;
; sprite_cost = cost3;
;
	lda     _cost3
	sta     _sprite_cost
;
; find_sprite();
;
	jsr     _find_sprite
;
; oam_meta_spr(0x78, 0xa0, pointer);
;
	jsr     decsp2
	lda     #$78
	ldy     #$01
	sta     (sp),y
	lda     #$A0
	dey
	sta     (sp),y
	lda     _pointer
	ldx     _pointer+1
	jsr     _oam_meta_spr
;
; sprite_cost = cost2;
;
	lda     _cost2
	sta     _sprite_cost
;
; find_sprite();
;
	jsr     _find_sprite
;
; oam_meta_spr(0x88, 0xa0, pointer);
;
	jsr     decsp2
	lda     #$88
	ldy     #$01
	sta     (sp),y
	lda     #$A0
	dey
	sta     (sp),y
	lda     _pointer
	ldx     _pointer+1
	jsr     _oam_meta_spr
;
; num_holder = cost1;
;
	lda     _cost1
	sta     _num_holder
;
; x=19;
;
	lda     #$13
	sta     _x
;
; y=20;
;
	lda     #$14
	sta     _y
;
; draw_number_as_bg_tile();
;
	jmp     _draw_number_as_bg_tile

.endproc

; ---------------------------------------------------------------
; void __near__ draw_gas (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_gas: near

.segment	"CODE"

;
; sprite_cost = gas4;
;
	lda     _gas4
	sta     _sprite_cost
;
; find_sprite();
;
	jsr     _find_sprite
;
; oam_meta_spr(0x68, 0x70, pointer);
;
	jsr     decsp2
	lda     #$68
	ldy     #$01
	sta     (sp),y
	lda     #$70
	dey
	sta     (sp),y
	lda     _pointer
	ldx     _pointer+1
	jsr     _oam_meta_spr
;
; sprite_cost = gas3;
;
	lda     _gas3
	sta     _sprite_cost
;
; find_sprite();
;
	jsr     _find_sprite
;
; oam_meta_spr(0x78, 0x70, pointer);
;
	jsr     decsp2
	lda     #$78
	ldy     #$01
	sta     (sp),y
	lda     #$70
	dey
	sta     (sp),y
	lda     _pointer
	ldx     _pointer+1
	jsr     _oam_meta_spr
;
; sprite_cost = gas2;
;
	lda     _gas2
	sta     _sprite_cost
;
; find_sprite();
;
	jsr     _find_sprite
;
; oam_meta_spr(0x88, 0x70, pointer);
;
	jsr     decsp2
	lda     #$88
	ldy     #$01
	sta     (sp),y
	lda     #$70
	dey
	sta     (sp),y
	lda     _pointer
	ldx     _pointer+1
	jsr     _oam_meta_spr
;
; sprite_cost = gas1;
;
	lda     _gas1
	sta     _sprite_cost
;
; find_sprite();
;
	jsr     _find_sprite
;
; oam_meta_spr(0x98, 0x70, pointer);
;
	jsr     decsp2
	lda     #$98
	ldy     #$01
	sta     (sp),y
	lda     #$70
	dey
	sta     (sp),y
	lda     _pointer
	ldx     _pointer+1
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ read_input (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_read_input: near

.segment	"CODE"

;
; pad1 = pad_poll(0);     // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0); // newly pressed button. do pad_poll first
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; trigger_pulled =  (pad1 & PAD_A) || zap_shoot(0); // controller slot 1 zapper
;
	lda     _pad1
	and     #$80
	bne     L0B49
	jsr     _zap_shoot
	tax
	beq     L0B4A
L0B49:	lda     #$01
L0B4A:	sta     _trigger_pulled
;
; trigger_clicked = (pad1_new & PAD_A);
;
	lda     _pad1_new
	and     #$80
	sta     _trigger_clicked
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ find_sprite (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_find_sprite: near

.segment	"CODE"

;
; switch(sprite_cost) {
;
	lda     _sprite_cost
;
; }
;
	beq     L0AC8
	cmp     #$01
	beq     L0ACC
	cmp     #$02
	beq     L0AD0
	cmp     #$03
	beq     L0AD4
	cmp     #$04
	beq     L0AD8
	cmp     #$05
	beq     L0ADC
	cmp     #$06
	beq     L0AE0
	cmp     #$07
	beq     L0AE4
	cmp     #$08
	beq     L0AE8
	cmp     #$09
	beq     L0AEC
	rts
;
; pointer = Zero;
;
L0AC8:	lda     #>(_Zero)
	sta     _pointer+1
	lda     #<(_Zero)
	sta     _pointer
;
; break;
;
	rts
;
; pointer = One;
;
L0ACC:	lda     #>(_One)
	sta     _pointer+1
	lda     #<(_One)
	sta     _pointer
;
; break;
;
	rts
;
; pointer = Two;
;
L0AD0:	lda     #>(_Two)
	sta     _pointer+1
	lda     #<(_Two)
	sta     _pointer
;
; break;
;
	rts
;
; pointer = Three;
;
L0AD4:	lda     #>(_Three)
	sta     _pointer+1
	lda     #<(_Three)
	sta     _pointer
;
; break;
;
	rts
;
; pointer = Four;
;
L0AD8:	lda     #>(_Four)
	sta     _pointer+1
	lda     #<(_Four)
	sta     _pointer
;
; break;
;
	rts
;
; pointer = Five;
;
L0ADC:	lda     #>(_Five)
	sta     _pointer+1
	lda     #<(_Five)
	sta     _pointer
;
; break;
;
	rts
;
; pointer = Six;
;
L0AE0:	lda     #>(_Six)
	sta     _pointer+1
	lda     #<(_Six)
	sta     _pointer
;
; break;
;
	rts
;
; pointer = Seven;
;
L0AE4:	lda     #>(_Seven)
	sta     _pointer+1
	lda     #<(_Seven)
	sta     _pointer
;
; break;
;
	rts
;
; pointer = Eight;
;
L0AE8:	lda     #>(_Eight)
	sta     _pointer+1
	lda     #<(_Eight)
	sta     _pointer
;
; break;
;
	rts
;
; pointer = Nine;
;
L0AEC:	lda     #>(_Nine)
	sta     _pointer+1
	lda     #<(_Nine)
	sta     _pointer
;
; break;
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ init_mode_title (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_mode_title: near

.segment	"CODE"

;
; ppu_off();  // screen off
;
	jsr     _ppu_off
;
; oam_clear(); // clear all sprites
;
	jsr     _oam_clear
;
; multi_vram_buffer_horz("Gas Station Simulator", 21, NTADR_A(4,4)); 
;
	jsr     decsp3
	lda     #<(L0AF4)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L0AF4)
	sta     (sp),y
	lda     #$15
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$84
	jsr     _multi_vram_buffer_horz
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; multi_vram_buffer_horz("Pull trigger to start", 21, NTADR_A(4,17)); 
;
	jsr     decsp3
	lda     #<(L0AFF)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L0AFF)
	sta     (sp),y
	lda     #$15
	ldy     #$00
	sta     (sp),y
	ldx     #$22
	lda     #$24
	jsr     _multi_vram_buffer_horz
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; ppu_on_all(); // turn on screen
;
	jsr     _ppu_on_all
;
; game_mode=MODE_TITLE;
;
	lda     #$00
	sta     _game_mode
;
; } 
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ init_mode_intro (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_mode_intro: near

.segment	"CODE"

;
; ppu_off();  // screen off
;
	jsr     _ppu_off
;
; oam_clear(); // clear all sprites
;
	jsr     _oam_clear
;
; multi_vram_buffer_horz("Pull the trigger halfway", 24, NTADR_A(4,4)); 
;
	jsr     decsp3
	lda     #<(L0B10)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L0B10)
	sta     (sp),y
	lda     #$18
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$84
	jsr     _multi_vram_buffer_horz
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; multi_vram_buffer_horz("But not til it clicks", 21, NTADR_A(4,17)); 
;
	jsr     decsp3
	lda     #<(L0B1B)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L0B1B)
	sta     (sp),y
	lda     #$15
	ldy     #$00
	sta     (sp),y
	ldx     #$22
	lda     #$24
	jsr     _multi_vram_buffer_horz
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; ppu_on_all(); // turn on screen
;
	jsr     _ppu_on_all
;
; game_mode=MODE_INTRO;
;
	lda     #$03
	sta     _game_mode
;
; } 
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ init_mode_game (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_mode_game: near

.segment	"CODE"

;
; ppu_off();  // screen off
;
	jsr     _ppu_off
;
; oam_clear(); // clear all sprites
;
	jsr     _oam_clear
;
; index = 0;
;
	lda     #$00
	sta     _index
;
; vram_adr(0x2000); //Nametable A;
;
	ldx     #$20
	jsr     _vram_adr
;
; for(largeindex = 0; largeindex < 1024; ++largeindex){
;
	lda     #$00
	sta     _largeindex
	sta     _largeindex+1
L0B2F:	lda     _largeindex
	cmp     #$00
	lda     _largeindex+1
	sbc     #$04
	bvc     L0B36
	eor     #$80
L0B36:	bpl     L0B30
;
; vram_put(level1[largeindex]);
;
	lda     #<(_level1)
	sta     ptr1
	lda     #>(_level1)
	clc
	adc     _largeindex+1
	sta     ptr1+1
	ldy     _largeindex
	lda     (ptr1),y
	jsr     _vram_put
;
; ++index;
;
	inc     _index
;
; if(index > 40) { //don't put too much in the vram_buffer
;
	lda     _index
	cmp     #$29
	bcc     L0B31
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; index = 0;
;
	lda     #$00
	sta     _index
;
; for(largeindex = 0; largeindex < 1024; ++largeindex){
;
L0B31:	inc     _largeindex
	bne     L0B2F
	inc     _largeindex+1
	jmp     L0B2F
;
; ppu_on_all(); // turn on screen
;
L0B30:	jsr     _ppu_on_all
;
; game_mode=MODE_GAME;
;
	lda     #$01
	sta     _game_mode
;
; } 
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_number_as_bg_tile (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_number_as_bg_tile: near

.segment	"CODE"

;
; switch(num_holder) {
;
	lda     _num_holder
;
; }
;
	jeq     L0A5A
	cmp     #$01
	beq     L07AE
	cmp     #$02
	jeq     L07FA
	cmp     #$03
	jeq     L0846
	cmp     #$04
	jeq     L0892
	cmp     #$05
	jeq     L08DE
	cmp     #$06
	jeq     L092A
	cmp     #$07
	jeq     L0976
	cmp     #$08
	jeq     L09C2
	cmp     #$09
	jeq     L0A0E
	rts
;
; one_vram_buffer(0xc0, NTADR_A(x,y));
;
L07AE:	lda     #$C0
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xc1, NTADR_A(x+1,y));
;
	lda     #$C1
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L07BF
	inx
L07BF:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xd0, NTADR_A(x, y+1));
;
	lda     #$D0
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L07C7
	inx
L07C7:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xd1, NTADR_A(x+1, y+1));
;
	lda     #$D1
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L07D0
	inx
L07D0:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L07D2
	inx
L07D2:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xe0, NTADR_A(x,y+2));
;
	lda     #$E0
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L07DA
	inx
L07DA:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xe1, NTADR_A(x+1,y+2));
;
	lda     #$E1
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L07E3
	inx
L07E3:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L07E5
	inx
L07E5:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xf0, NTADR_A(x,y+3));
;
	lda     #$F0
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L07ED
	inx
L07ED:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xf1, NTADR_A(x+1,y+3));
;
	lda     #$F1
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L07F6
	inx
L07F6:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L07F8
	inx
L07F8:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jmp     _one_vram_buffer
;
; one_vram_buffer(0xc2, NTADR_A(x,y));
;
L07FA:	lda     #$C2
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xc3, NTADR_A(x+1,y));
;
	lda     #$C3
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L080B
	inx
L080B:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xd2, NTADR_A(x, y+1));
;
	lda     #$D2
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L0813
	inx
L0813:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xd3, NTADR_A(x+1, y+1));
;
	lda     #$D3
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L081C
	inx
L081C:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L081E
	inx
L081E:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xe2, NTADR_A(x,y+2));
;
	lda     #$E2
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L0826
	inx
L0826:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xe3, NTADR_A(x+1,y+2));
;
	lda     #$E3
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L082F
	inx
L082F:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L0831
	inx
L0831:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xf2, NTADR_A(x,y+3));
;
	lda     #$F2
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L0839
	inx
L0839:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xf3, NTADR_A(x+1,y+3));
;
	lda     #$F3
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L0842
	inx
L0842:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L0844
	inx
L0844:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jmp     _one_vram_buffer
;
; one_vram_buffer(0xc4, NTADR_A(x,y));
;
L0846:	lda     #$C4
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xc5, NTADR_A(x+1,y));
;
	lda     #$C5
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L0857
	inx
L0857:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xd4, NTADR_A(x, y+1));
;
	lda     #$D4
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L085F
	inx
L085F:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xd5, NTADR_A(x+1, y+1));
;
	lda     #$D5
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L0868
	inx
L0868:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L086A
	inx
L086A:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xe4, NTADR_A(x,y+2));
;
	lda     #$E4
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L0872
	inx
L0872:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xe5, NTADR_A(x+1,y+2));
;
	lda     #$E5
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L087B
	inx
L087B:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L087D
	inx
L087D:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xf4, NTADR_A(x,y+3));
;
	lda     #$F4
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L0885
	inx
L0885:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xf5, NTADR_A(x+1,y+3));
;
	lda     #$F5
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L088E
	inx
L088E:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L0890
	inx
L0890:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jmp     _one_vram_buffer
;
; one_vram_buffer(0xc6, NTADR_A(x,y));
;
L0892:	lda     #$C6
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xc7, NTADR_A(x+1,y));
;
	lda     #$C7
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L08A3
	inx
L08A3:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xd6, NTADR_A(x, y+1));
;
	lda     #$D6
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L08AB
	inx
L08AB:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xd7, NTADR_A(x+1, y+1));
;
	lda     #$D7
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L08B4
	inx
L08B4:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L08B6
	inx
L08B6:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xe6, NTADR_A(x,y+2));
;
	lda     #$E6
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L08BE
	inx
L08BE:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xe7, NTADR_A(x+1,y+2));
;
	lda     #$E7
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L08C7
	inx
L08C7:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L08C9
	inx
L08C9:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xf6, NTADR_A(x,y+3));
;
	lda     #$F6
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L08D1
	inx
L08D1:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xf7, NTADR_A(x+1,y+3));
;
	lda     #$F7
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L08DA
	inx
L08DA:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L08DC
	inx
L08DC:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jmp     _one_vram_buffer
;
; one_vram_buffer(0xc8, NTADR_A(x,y));
;
L08DE:	lda     #$C8
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xc9, NTADR_A(x+1,y));
;
	lda     #$C9
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L08EF
	inx
L08EF:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xd8, NTADR_A(x, y+1));
;
	lda     #$D8
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L08F7
	inx
L08F7:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xd9, NTADR_A(x+1, y+1));
;
	lda     #$D9
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L0900
	inx
L0900:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L0902
	inx
L0902:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xe8, NTADR_A(x,y+2));
;
	lda     #$E8
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L090A
	inx
L090A:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xe9, NTADR_A(x+1,y+2));
;
	lda     #$E9
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L0913
	inx
L0913:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L0915
	inx
L0915:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xf8, NTADR_A(x,y+3));
;
	lda     #$F8
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L091D
	inx
L091D:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xf9, NTADR_A(x+1,y+3));
;
	lda     #$F9
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L0926
	inx
L0926:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L0928
	inx
L0928:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jmp     _one_vram_buffer
;
; one_vram_buffer(0xca, NTADR_A(x,y));
;
L092A:	lda     #$CA
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xcb, NTADR_A(x+1,y));
;
	lda     #$CB
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L093B
	inx
L093B:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xda, NTADR_A(x, y+1));
;
	lda     #$DA
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L0943
	inx
L0943:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xdb, NTADR_A(x+1, y+1));
;
	lda     #$DB
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L094C
	inx
L094C:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L094E
	inx
L094E:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xea, NTADR_A(x,y+2));
;
	lda     #$EA
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L0956
	inx
L0956:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xeb, NTADR_A(x+1,y+2));
;
	lda     #$EB
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L095F
	inx
L095F:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L0961
	inx
L0961:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xfa, NTADR_A(x,y+3));
;
	lda     #$FA
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L0969
	inx
L0969:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xfb, NTADR_A(x+1,y+3));
;
	lda     #$FB
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L0972
	inx
L0972:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L0974
	inx
L0974:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jmp     _one_vram_buffer
;
; one_vram_buffer(0xcc, NTADR_A(x,y));
;
L0976:	lda     #$CC
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xcd, NTADR_A(x+1,y));
;
	lda     #$CD
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L0987
	inx
L0987:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xdc, NTADR_A(x, y+1));
;
	lda     #$DC
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L098F
	inx
L098F:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xdd, NTADR_A(x+1, y+1));
;
	lda     #$DD
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L0998
	inx
L0998:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L099A
	inx
L099A:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xec, NTADR_A(x,y+2));
;
	lda     #$EC
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L09A2
	inx
L09A2:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xed, NTADR_A(x+1,y+2));
;
	lda     #$ED
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L09AB
	inx
L09AB:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L09AD
	inx
L09AD:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xfc, NTADR_A(x,y+3));
;
	lda     #$FC
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L09B5
	inx
L09B5:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xfd, NTADR_A(x+1,y+3));
;
	lda     #$FD
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L09BE
	inx
L09BE:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L09C0
	inx
L09C0:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jmp     _one_vram_buffer
;
; one_vram_buffer(0xce, NTADR_A(x,y));
;
L09C2:	lda     #$CE
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xcf, NTADR_A(x+1,y));
;
	lda     #$CF
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L09D3
	inx
L09D3:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xde, NTADR_A(x, y+1));
;
	lda     #$DE
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L09DB
	inx
L09DB:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xdf, NTADR_A(x+1, y+1));
;
	lda     #$DF
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L09E4
	inx
L09E4:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L09E6
	inx
L09E6:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xee, NTADR_A(x,y+2));
;
	lda     #$EE
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L09EE
	inx
L09EE:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xef, NTADR_A(x+1,y+2));
;
	lda     #$EF
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L09F7
	inx
L09F7:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L09F9
	inx
L09F9:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xfe, NTADR_A(x,y+3));
;
	lda     #$FE
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L0A01
	inx
L0A01:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xff, NTADR_A(x+1,y+3));
;
	lda     #$FF
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L0A0A
	inx
L0A0A:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L0A0C
	inx
L0A0C:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jmp     _one_vram_buffer
;
; one_vram_buffer(0x5e, NTADR_A(x,y));
;
L0A0E:	lda     #$5E
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x5f, NTADR_A(x+1,y));
;
	lda     #$5F
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L0A1F
	inx
L0A1F:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x6e, NTADR_A(x, y+1));
;
	lda     #$6E
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L0A27
	inx
L0A27:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x6f, NTADR_A(x+1, y+1));
;
	lda     #$6F
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L0A30
	inx
L0A30:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L0A32
	inx
L0A32:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x7e, NTADR_A(x,y+2));
;
	lda     #$7E
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L0A3A
	inx
L0A3A:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x7f, NTADR_A(x+1,y+2));
;
	lda     #$7F
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L0A43
	inx
L0A43:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L0A45
	inx
L0A45:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x8e, NTADR_A(x,y+3));
;
	lda     #$8E
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L0A4D
	inx
L0A4D:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x8f, NTADR_A(x+1,y+3));
;
	lda     #$8F
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L0A56
	inx
L0A56:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L0A58
	inx
L0A58:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jmp     _one_vram_buffer
;
; one_vram_buffer(0x1e, NTADR_A(x,y));
;
L0A5A:	lda     #$1E
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x1f, NTADR_A(x+1,y));
;
	lda     #$1F
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L0A6B
	inx
L0A6B:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x2e, NTADR_A(x, y+1));
;
	lda     #$2E
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L0A73
	inx
L0A73:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x2f, NTADR_A(x+1, y+1));
;
	lda     #$2F
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L0A7C
	inx
L0A7C:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L0A7E
	inx
L0A7E:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x3e, NTADR_A(x,y+2));
;
	lda     #$3E
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L0A86
	inx
L0A86:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x3f, NTADR_A(x+1,y+2));
;
	lda     #$3F
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L0A8F
	inx
L0A8F:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L0A91
	inx
L0A91:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x4e, NTADR_A(x,y+3));
;
	lda     #$4E
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L0A99
	inx
L0A99:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x4f, NTADR_A(x+1,y+3));
;
	lda     #$4F
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L0AA2
	inx
L0AA2:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L0AA4
	inx
L0AA4:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jmp     _one_vram_buffer

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; pal_bg(pal1); // load the palette
;
	lda     #<(_pal1)
	ldx     #>(_pal1)
	jsr     _pal_bg
;
; pal_spr(pal2); // load the palette
;
	lda     #<(_pal2)
	ldx     #>(_pal2)
	jsr     _pal_spr
;
; bank_spr(1); // sprites use the 2nd tileset
;
	lda     #$01
	jsr     _bank_spr
;
; set_scroll_y(0xff); // shift the bg down 1 pixel
;
	ldx     #$00
	lda     #$FF
	jsr     _set_scroll_y
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; ppu_wait_nmi(); // wait
;
	jsr     _ppu_wait_nmi
;
; set_vram_buffer(); // points ppu update to vram_buffer, do this at least once
;
	jsr     _set_vram_buffer
;
; ppu_on_all(); // turn on screen
;
	jsr     _ppu_on_all
;
; game_mode = MODE_TITLE;
;
	lda     #$00
	sta     _game_mode
;
; init_mode_title();
;
	jsr     _init_mode_title
;
; if(game_mode == MODE_TITLE){
;
L0B4B:	lda     _game_mode
	bne     L0B4C
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; read_input();
;
	jsr     _read_input
;
; if (trigger_clicked)
;
	lda     _trigger_clicked
	beq     L0B4C
;
; init_mode_intro();
;
	jsr     _init_mode_intro
;
; if(game_mode == MODE_INTRO){
;
L0B4C:	lda     _game_mode
	cmp     #$03
	bne     L0B4E
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; read_input();
;
	jsr     _read_input
;
; if (trigger_clicked)
;
	lda     _trigger_clicked
	beq     L0B4E
;
; for(index=0; index < 10; ++index){
;
	lda     #$00
	sta     _index
L0B4D:	lda     _index
	cmp     #$0A
	bcs     L0712
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; for(index=0; index < 10; ++index){
;
	inc     _index
	jmp     L0B4D
;
; init_mode_game();
;
L0712:	jsr     _init_mode_game
;
; if(game_mode == MODE_GAME){
;
L0B4E:	lda     _game_mode
	cmp     #$01
	bne     L0B4B
;
; ppu_wait_nmi(); // wait till beginning of the frame
;
	jsr     _ppu_wait_nmi
;
; oam_clear();
;
	jsr     _oam_clear
;
; read_input(); //sets input_active
;
	jsr     _read_input
;
; if(trigger_pulled){
;
	lda     _trigger_pulled
	beq     L0720
;
; gas_speed += GAS_STEP;
;
	lda     #$32
	clc
	adc     _gas_speed
	sta     _gas_speed
	bcc     L0727
	inc     _gas_speed+1
;
; while(gas_speed > 256){
;
	jmp     L0727
;
; ++gas1;
;
L0B4F:	inc     _gas1
;
; gas_speed -= 256;
;
	lda     _gas_speed
	sec
	sbc     #$00
	sta     _gas_speed
	lda     _gas_speed+1
	sbc     #$01
	sta     _gas_speed+1
;
; while(gas_speed > 256){
;
L0727:	lda     _gas_speed
	cmp     #$01
	lda     _gas_speed+1
	sbc     #$01
	bcs     L0B4F
;
; adjust_gas();
;
	jsr     _adjust_gas
;
; cost_speed += COST_STEP;
;
	lda     #$50
	clc
	adc     _cost_speed
	sta     _cost_speed
	bcc     L0732
	inc     _cost_speed+1
;
; while(cost_speed > 256){
;
	jmp     L0732
;
; ++cost1;
;
L0B50:	inc     _cost1
;
; cost_speed -= 256;
;
	lda     _cost_speed
	sec
	sbc     #$00
	sta     _cost_speed
	lda     _cost_speed+1
	sbc     #$01
	sta     _cost_speed+1
;
; while(cost_speed > 256){
;
L0732:	lda     _cost_speed
	cmp     #$01
	lda     _cost_speed+1
	sbc     #$01
	bcs     L0B50
;
; adjust_cost();
;
	jsr     _adjust_cost
;
; draw_gas();
;
L0720:	jsr     _draw_gas
;
; draw_cost();
;
	jsr     _draw_cost
;
; while (1){
;
	jmp     L0B4B

.endproc

