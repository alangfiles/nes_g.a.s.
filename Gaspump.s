;
; File generated by cc65 v 2.18 - N/A
;
	.fopt		compiler,"cc65 v 2.18 - N/A"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_pal_col
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_ppu_mask
	.import		_oam_clear
	.import		_oam_meta_spr
	.import		_pad_poll
	.import		_scroll
	.import		_bank_spr
	.import		_vram_adr
	.import		_vram_put
	.import		_vram_unrle
	.import		_set_vram_buffer
	.import		_one_vram_buffer
	.import		_multi_vram_buffer_horz
	.import		_get_pad_new
	.import		_get_frame_count
	.import		_pal_fade_to
	.import		_set_scroll_y
	.import		_flush_vram_update2
	.import		_zap_shoot
	.export		_bankLevel
	.export		_bankBuffer
	.export		_banked_call
	.export		_bank_push
	.export		_bank_pop
	.import		_set_prg_bank
	.import		_set_chr_bank_0
	.import		_set_chr_bank_1
	.import		_set_mirroring
	.export		_pad2_zapper
	.export		_zapper_ready
	.export		_hit_detected
	.export		_scroll_y
	.export		_scrolled_past_once
	.export		_stop_scrolling
	.export		_option
	.export		_cost5
	.export		_cost4
	.export		_cost3
	.export		_cost2
	.export		_cost1
	.export		_cost5_changed
	.export		_cost4_changed
	.export		_cost3_changed
	.export		_cost2_changed
	.export		_cost1_changed
	.export		_gas5
	.export		_gas4
	.export		_gas3
	.export		_gas2
	.export		_gas1
	.export		_gas5_changed
	.export		_gas4_changed
	.export		_gas3_changed
	.export		_gas2_changed
	.export		_gas1_changed
	.export		_gas_goal
	.export		_gas_goal_hundreds
	.export		_gas_goal_array
	.export		_gas_speed
	.export		_cost_speed
	.export		_gas_pumped
	.export		_pad1
	.export		_pad1_new
	.export		_trigger_pulled
	.export		_trigger_clicked
	.export		_trigger_hit
	.export		_trigger_miss
	.export		_started_pumping
	.export		_sprite_cost
	.export		_cost_sprite
	.export		_game_mode
	.export		_game_level
	.export		_levels_complete
	.export		_perfect_levels
	.export		_pointer
	.export		_temp1
	.export		_temp2
	.export		_temp3
	.export		_tempint
	.export		_talking_time
	.export		_bird_x
	.export		_bird_y
	.export		_address
	.export		_x
	.export		_y
	.export		_num_holder
	.export		_index
	.export		_index2
	.export		_largeindex
	.export		_moveframes
	.export		_wram_array
	.export		_adjust_cost
	.export		_adjust_gas
	.export		_draw_cost
	.export		_draw_gas
	.export		_read_input
	.export		_find_sprite
	.export		_init_mode_title
	.export		_init_mode_intro_cutscene
	.export		_init_mode_intro_instructions
	.export		_init_mode_game
	.export		_init_level_one_end
	.export		_draw_number_as_bg_tile
	.export		_draw_level_one_sprites
	.export		_draw_talking_time
	.export		_draw_talking_time_background
	.export		_draw_evaluation_time_background
	.export		_draw_talking_time_sprites
	.export		_clear_background
	.export		_white_background
	.export		_reset_game_variables
	.export		_wait_a_little
	.export		_draw_title_background
	.export		_TurboGut_2
	.export		_BigAlTalkSmallMouth
	.export		_BigAlTalkMidMouth
	.export		_BigAlTalkClosedMouth
	.export		_BigAlTalkBigMouth
	.export		_BigAlsEyes
	.export		_Decimal_1
	.export		_BigAlsShirt
	.export		_Bird
	.export		_One
	.export		_Two
	.export		_Three
	.export		_Four
	.export		_Five
	.export		_Six
	.export		_Seven
	.export		_Eight
	.export		_Nine
	.export		_Zero
	.export		_metatiles_1
	.export		_room_1
	.export		_LEVEL_1_PUMP
	.export		_EVALUATION
	.export		_TALKING_TIME_LEVEL
	.export		_background_pal
	.export		_pal2
	.export		_talking_time_palete
	.export		_palette
	.export		_INTRO_TOP
	.export		_INTRO_MIDDLE
	.export		_bottomdata
	.export		_cutscene_index
	.export		_nametable_index
	.export		_intro_cutscene_palette
	.export		_line_counter
	.export		_init_mode_intro_text
	.export		_mode_intro_text
	.export		_mode_intro_cutscene
	.export		_init_mode_instructions
	.export		_main

.segment	"DATA"

_talking_time:
	.byte	$00
_index:
	.byte	$00
_cutscene_index:
	.word	$2000
_nametable_index:
	.word	$0000
_line_counter:
	.byte	$00

.segment	"RODATA"

_gas_goal_array:
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
_TurboGut_2:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$11
	.byte	$00
	.byte	$80
_BigAlTalkSmallMouth:
	.byte	$08
	.byte	$00
	.byte	$8C
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$8D
	.byte	$00
	.byte	$18
	.byte	$00
	.byte	$8E
	.byte	$00
	.byte	$20
	.byte	$00
	.byte	$8F
	.byte	$00
	.byte	$80
_BigAlTalkMidMouth:
	.byte	$08
	.byte	$00
	.byte	$9C
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$9D
	.byte	$00
	.byte	$18
	.byte	$00
	.byte	$9E
	.byte	$00
	.byte	$20
	.byte	$00
	.byte	$9F
	.byte	$00
	.byte	$80
_BigAlTalkClosedMouth:
	.byte	$08
	.byte	$00
	.byte	$AC
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$AD
	.byte	$00
	.byte	$18
	.byte	$00
	.byte	$AE
	.byte	$00
	.byte	$20
	.byte	$00
	.byte	$AF
	.byte	$00
	.byte	$80
_BigAlTalkBigMouth:
	.byte	$08
	.byte	$00
	.byte	$BC
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$BD
	.byte	$00
	.byte	$18
	.byte	$00
	.byte	$BE
	.byte	$00
	.byte	$20
	.byte	$00
	.byte	$BF
	.byte	$00
	.byte	$80
_BigAlsEyes:
	.byte	$00
	.byte	$00
	.byte	$A8
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$A9
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$A8
	.byte	$00
	.byte	$18
	.byte	$00
	.byte	$A9
	.byte	$00
	.byte	$80
_Decimal_1:
	.byte	$00
	.byte	$00
	.byte	$84
	.byte	$00
	.byte	$80
_BigAlsShirt:
	.byte	$00
	.byte	$00
	.byte	$D8
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$D9
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$DA
	.byte	$00
	.byte	$18
	.byte	$00
	.byte	$DB
	.byte	$00
	.byte	$20
	.byte	$00
	.byte	$DC
	.byte	$00
	.byte	$28
	.byte	$00
	.byte	$DD
	.byte	$00
	.byte	$30
	.byte	$00
	.byte	$DE
	.byte	$00
	.byte	$38
	.byte	$00
	.byte	$DF
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$E8
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$E9
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$EA
	.byte	$00
	.byte	$18
	.byte	$08
	.byte	$EB
	.byte	$00
	.byte	$20
	.byte	$08
	.byte	$EC
	.byte	$00
	.byte	$28
	.byte	$08
	.byte	$ED
	.byte	$00
	.byte	$30
	.byte	$08
	.byte	$EE
	.byte	$00
	.byte	$38
	.byte	$08
	.byte	$EF
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$F8
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$F9
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$FA
	.byte	$00
	.byte	$18
	.byte	$10
	.byte	$FB
	.byte	$00
	.byte	$20
	.byte	$10
	.byte	$FC
	.byte	$00
	.byte	$28
	.byte	$10
	.byte	$FD
	.byte	$00
	.byte	$30
	.byte	$10
	.byte	$FE
	.byte	$00
	.byte	$38
	.byte	$10
	.byte	$FF
	.byte	$00
	.byte	$80
_Bird:
	.byte	$00
	.byte	$00
	.byte	$A2
	.byte	$20
	.byte	$08
	.byte	$00
	.byte	$A3
	.byte	$20
	.byte	$10
	.byte	$00
	.byte	$A4
	.byte	$20
	.byte	$00
	.byte	$08
	.byte	$B2
	.byte	$20
	.byte	$08
	.byte	$08
	.byte	$B3
	.byte	$20
	.byte	$10
	.byte	$08
	.byte	$B4
	.byte	$20
	.byte	$80
_One:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$20
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$21
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$30
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$31
	.byte	$00
	.byte	$80
_Two:
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$12
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$13
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$22
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$23
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$32
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$33
	.byte	$00
	.byte	$80
_Three:
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$14
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$15
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$24
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$25
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$34
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$35
	.byte	$00
	.byte	$80
_Four:
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$16
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$17
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$26
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$27
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$36
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$37
	.byte	$00
	.byte	$80
_Five:
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$19
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$28
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$29
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$38
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$39
	.byte	$00
	.byte	$80
_Six:
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$0B
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$1A
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$1B
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$2A
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$2B
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$3A
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$3B
	.byte	$00
	.byte	$80
_Seven:
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$0D
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$1C
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$1D
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$2C
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$2D
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$3C
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$3D
	.byte	$00
	.byte	$80
_Eight:
	.byte	$00
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$0F
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$1E
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$1F
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$2E
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$2F
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$3E
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$3F
	.byte	$00
	.byte	$80
_Nine:
	.byte	$00
	.byte	$00
	.byte	$4E
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$4F
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$5E
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$5F
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$6E
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$6F
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$7E
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$7F
	.byte	$00
	.byte	$80
_Zero:
	.byte	$00
	.byte	$00
	.byte	$4C
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$4D
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$5C
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$5D
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$6C
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$7C
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$7D
	.byte	$00
	.byte	$80
_metatiles_1:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$C0
	.byte	$C1
	.byte	$D0
	.byte	$D1
	.byte	$01
	.byte	$E0
	.byte	$E1
	.byte	$F0
	.byte	$F1
	.byte	$01
	.byte	$C2
	.byte	$C3
	.byte	$D2
	.byte	$D3
	.byte	$01
	.byte	$E0
	.byte	$E3
	.byte	$F2
	.byte	$F3
	.byte	$01
	.byte	$C4
	.byte	$C5
	.byte	$D4
	.byte	$D5
	.byte	$01
	.byte	$E4
	.byte	$E5
	.byte	$F4
	.byte	$F5
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$7E
	.byte	$00
	.byte	$01
	.byte	$7C
	.byte	$00
	.byte	$5D
	.byte	$7B
	.byte	$01
	.byte	$5B
	.byte	$5C
	.byte	$5D
	.byte	$5C
	.byte	$01
	.byte	$7E
	.byte	$5B
	.byte	$7C
	.byte	$7C
	.byte	$01
	.byte	$3C
	.byte	$5C
	.byte	$7D
	.byte	$7C
	.byte	$01
	.byte	$7E
	.byte	$7E
	.byte	$7C
	.byte	$7C
	.byte	$01
	.byte	$7E
	.byte	$00
	.byte	$7C
	.byte	$00
	.byte	$01
	.byte	$5B
	.byte	$5C
	.byte	$3E
	.byte	$7F
	.byte	$01
	.byte	$5F
	.byte	$3C
	.byte	$00
	.byte	$7C
	.byte	$01
	.byte	$2F
	.byte	$5B
	.byte	$00
	.byte	$7C
	.byte	$01
	.byte	$5C
	.byte	$5B
	.byte	$7C
	.byte	$7C
	.byte	$01
	.byte	$5C
	.byte	$00
	.byte	$7F
	.byte	$00
	.byte	$01
	.byte	$7C
	.byte	$00
	.byte	$7C
	.byte	$00
	.byte	$01
	.byte	$7D
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$5F
	.byte	$7B
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$7F
	.byte	$00
	.byte	$7C
	.byte	$00
	.byte	$01
	.byte	$5E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$5B
	.byte	$7B
	.byte	$7C
	.byte	$00
	.byte	$01
	.byte	$5D
	.byte	$5E
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$7D
	.byte	$7D
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$7D
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$5D
	.byte	$5E
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$5D
	.byte	$3D
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$7D
	.byte	$7D
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$7D
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$5D
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$5E
	.byte	$7D
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$7D
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$7C
	.byte	$00
	.byte	$7C
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$5F
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$7E
	.byte	$00
	.byte	$01
	.byte	$5E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$5C
	.byte	$00
	.byte	$01
	.byte	$5D
	.byte	$7B
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$7B
	.byte	$7B
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$5E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$7E
	.byte	$00
	.byte	$01
_room_1:
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$14
	.byte	$12
	.byte	$12
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$14
	.byte	$12
	.byte	$10
	.byte	$14
	.byte	$12
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$14
	.byte	$01
	.byte	$23
	.byte	$0A
	.byte	$10
	.byte	$14
	.byte	$14
	.byte	$07
	.byte	$02
	.byte	$02
	.byte	$07
	.byte	$0B
	.byte	$0A
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$09
	.byte	$25
	.byte	$24
	.byte	$01
	.byte	$07
	.byte	$01
	.byte	$1A
	.byte	$15
	.byte	$15
	.byte	$15
	.byte	$19
	.byte	$02
	.byte	$0A
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$14
	.byte	$01
	.byte	$25
	.byte	$01
	.byte	$0B
	.byte	$02
	.byte	$16
	.byte	$28
	.byte	$1F
	.byte	$00
	.byte	$17
	.byte	$23
	.byte	$11
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$13
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$16
	.byte	$00
	.byte	$00
	.byte	$1E
	.byte	$17
	.byte	$24
	.byte	$12
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$04
	.byte	$11
	.byte	$13
	.byte	$01
	.byte	$01
	.byte	$1B
	.byte	$18
	.byte	$00
	.byte	$18
	.byte	$1C
	.byte	$01
	.byte	$11
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$09
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$26
	.byte	$01
	.byte	$01
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$13
	.byte	$05
	.byte	$0B
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$12
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$13
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$25
_LEVEL_1_PUMP:
	.byte	$13
	.byte	$00
	.byte	$13
	.byte	$12
	.byte	$22
	.byte	$23
	.byte	$03
	.byte	$15
	.byte	$16
	.byte	$17
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$1B
	.byte	$2C
	.byte	$2D
	.byte	$00
	.byte	$13
	.byte	$13
	.byte	$32
	.byte	$03
	.byte	$03
	.byte	$25
	.byte	$26
	.byte	$27
	.byte	$28
	.byte	$29
	.byte	$2A
	.byte	$2B
	.byte	$03
	.byte	$3D
	.byte	$00
	.byte	$13
	.byte	$13
	.byte	$42
	.byte	$03
	.byte	$03
	.byte	$35
	.byte	$36
	.byte	$37
	.byte	$38
	.byte	$39
	.byte	$3A
	.byte	$3B
	.byte	$03
	.byte	$4D
	.byte	$00
	.byte	$13
	.byte	$13
	.byte	$42
	.byte	$03
	.byte	$44
	.byte	$45
	.byte	$46
	.byte	$47
	.byte	$48
	.byte	$49
	.byte	$4A
	.byte	$4B
	.byte	$03
	.byte	$4D
	.byte	$00
	.byte	$13
	.byte	$13
	.byte	$52
	.byte	$53
	.byte	$54
	.byte	$55
	.byte	$56
	.byte	$57
	.byte	$58
	.byte	$59
	.byte	$5A
	.byte	$5B
	.byte	$5C
	.byte	$5D
	.byte	$00
	.byte	$13
	.byte	$13
	.byte	$62
	.byte	$63
	.byte	$64
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$69
	.byte	$6A
	.byte	$6B
	.byte	$6C
	.byte	$6D
	.byte	$00
	.byte	$13
	.byte	$14
	.byte	$73
	.byte	$74
	.byte	$75
	.byte	$76
	.byte	$77
	.byte	$78
	.byte	$79
	.byte	$7A
	.byte	$7B
	.byte	$7C
	.byte	$00
	.byte	$13
	.byte	$15
	.byte	$83
	.byte	$84
	.byte	$85
	.byte	$86
	.byte	$87
	.byte	$88
	.byte	$89
	.byte	$8A
	.byte	$8B
	.byte	$8C
	.byte	$00
	.byte	$13
	.byte	$13
	.byte	$91
	.byte	$92
	.byte	$93
	.byte	$94
	.byte	$95
	.byte	$96
	.byte	$97
	.byte	$98
	.byte	$99
	.byte	$9A
	.byte	$9B
	.byte	$9C
	.byte	$9D
	.byte	$9E
	.byte	$00
	.byte	$13
	.byte	$11
	.byte	$A1
	.byte	$A2
	.byte	$A3
	.byte	$A4
	.byte	$A5
	.byte	$01
	.byte	$A7
	.byte	$A8
	.byte	$A9
	.byte	$AA
	.byte	$AB
	.byte	$AC
	.byte	$AD
	.byte	$AE
	.byte	$00
	.byte	$13
	.byte	$11
	.byte	$B1
	.byte	$B2
	.byte	$B3
	.byte	$B4
	.byte	$B5
	.byte	$B6
	.byte	$B7
	.byte	$B8
	.byte	$B9
	.byte	$BA
	.byte	$BB
	.byte	$BC
	.byte	$BD
	.byte	$BE
	.byte	$00
	.byte	$13
	.byte	$11
	.byte	$B0
	.byte	$01
	.byte	$13
	.byte	$0B
	.byte	$BF
	.byte	$60
	.byte	$13
	.byte	$11
	.byte	$B0
	.byte	$81
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$0B
	.byte	$0B
	.byte	$0C
	.byte	$0D
	.byte	$0E
	.byte	$0F
	.byte	$71
	.byte	$9F
	.byte	$60
	.byte	$13
	.byte	$11
	.byte	$B0
	.byte	$81
	.byte	$06
	.byte	$20
	.byte	$21
	.byte	$30
	.byte	$30
	.byte	$31
	.byte	$40
	.byte	$41
	.byte	$50
	.byte	$05
	.byte	$71
	.byte	$BF
	.byte	$60
	.byte	$13
	.byte	$11
	.byte	$90
	.byte	$81
	.byte	$02
	.byte	$1E
	.byte	$1F
	.byte	$1E
	.byte	$1F
	.byte	$1E
	.byte	$1F
	.byte	$1E
	.byte	$1F
	.byte	$02
	.byte	$71
	.byte	$BF
	.byte	$61
	.byte	$61
	.byte	$03
	.byte	$03
	.byte	$61
	.byte	$03
	.byte	$61
	.byte	$13
	.byte	$05
	.byte	$03
	.byte	$03
	.byte	$61
	.byte	$03
	.byte	$61
	.byte	$61
	.byte	$A0
	.byte	$81
	.byte	$02
	.byte	$2E
	.byte	$2F
	.byte	$2E
	.byte	$2F
	.byte	$2E
	.byte	$2F
	.byte	$2E
	.byte	$2F
	.byte	$02
	.byte	$3C
	.byte	$BF
	.byte	$02
	.byte	$13
	.byte	$05
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$B0
	.byte	$81
	.byte	$02
	.byte	$3E
	.byte	$3F
	.byte	$3E
	.byte	$3F
	.byte	$3E
	.byte	$3F
	.byte	$3E
	.byte	$3F
	.byte	$02
	.byte	$4C
	.byte	$9F
	.byte	$02
	.byte	$04
	.byte	$02
	.byte	$13
	.byte	$02
	.byte	$04
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$03
	.byte	$03
	.byte	$04
	.byte	$02
	.byte	$B0
	.byte	$81
	.byte	$02
	.byte	$4E
	.byte	$4F
	.byte	$4E
	.byte	$4F
	.byte	$4E
	.byte	$4F
	.byte	$4E
	.byte	$4F
	.byte	$02
	.byte	$71
	.byte	$AF
	.byte	$03
	.byte	$13
	.byte	$0C
	.byte	$70
	.byte	$03
	.byte	$13
	.byte	$03
	.byte	$B0
	.byte	$81
	.byte	$43
	.byte	$01
	.byte	$7D
	.byte	$01
	.byte	$13
	.byte	$05
	.byte	$33
	.byte	$71
	.byte	$BF
	.byte	$03
	.byte	$13
	.byte	$11
	.byte	$90
	.byte	$81
	.byte	$06
	.byte	$10
	.byte	$31
	.byte	$30
	.byte	$30
	.byte	$21
	.byte	$11
	.byte	$41
	.byte	$50
	.byte	$05
	.byte	$71
	.byte	$BF
	.byte	$03
	.byte	$13
	.byte	$04
	.byte	$70
	.byte	$03
	.byte	$70
	.byte	$13
	.byte	$05
	.byte	$03
	.byte	$03
	.byte	$70
	.byte	$13
	.byte	$02
	.byte	$B0
	.byte	$81
	.byte	$02
	.byte	$1E
	.byte	$1F
	.byte	$1E
	.byte	$1F
	.byte	$1E
	.byte	$1F
	.byte	$1E
	.byte	$1F
	.byte	$02
	.byte	$71
	.byte	$BF
	.byte	$03
	.byte	$13
	.byte	$03
	.byte	$12
	.byte	$60
	.byte	$13
	.byte	$0C
	.byte	$B0
	.byte	$81
	.byte	$02
	.byte	$2E
	.byte	$2F
	.byte	$2E
	.byte	$2F
	.byte	$2E
	.byte	$2F
	.byte	$2E
	.byte	$2F
	.byte	$02
	.byte	$3C
	.byte	$BF
	.byte	$03
	.byte	$13
	.byte	$03
	.byte	$24
	.byte	$60
	.byte	$13
	.byte	$0C
	.byte	$B0
	.byte	$81
	.byte	$02
	.byte	$3E
	.byte	$3F
	.byte	$3E
	.byte	$3F
	.byte	$3E
	.byte	$3F
	.byte	$3E
	.byte	$3F
	.byte	$02
	.byte	$4C
	.byte	$BF
	.byte	$03
	.byte	$13
	.byte	$04
	.byte	$24
	.byte	$60
	.byte	$13
	.byte	$0A
	.byte	$34
	.byte	$B0
	.byte	$81
	.byte	$02
	.byte	$4E
	.byte	$4F
	.byte	$4E
	.byte	$4F
	.byte	$4E
	.byte	$4F
	.byte	$4E
	.byte	$4F
	.byte	$02
	.byte	$71
	.byte	$BF
	.byte	$03
	.byte	$70
	.byte	$03
	.byte	$13
	.byte	$04
	.byte	$61
	.byte	$03
	.byte	$24
	.byte	$60
	.byte	$13
	.byte	$05
	.byte	$34
	.byte	$70
	.byte	$B0
	.byte	$81
	.byte	$43
	.byte	$01
	.byte	$09
	.byte	$0A
	.byte	$0B
	.byte	$0B
	.byte	$0C
	.byte	$0D
	.byte	$01
	.byte	$33
	.byte	$71
	.byte	$AF
	.byte	$03
	.byte	$13
	.byte	$09
	.byte	$61
	.byte	$13
	.byte	$04
	.byte	$03
	.byte	$13
	.byte	$02
	.byte	$B0
	.byte	$01
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$0B
	.byte	$0B
	.byte	$0C
	.byte	$0D
	.byte	$0E
	.byte	$0F
	.byte	$01
	.byte	$BF
	.byte	$03
	.byte	$13
	.byte	$02
	.byte	$70
	.byte	$03
	.byte	$13
	.byte	$0D
	.byte	$80
	.byte	$A2
	.byte	$A3
	.byte	$A4
	.byte	$A5
	.byte	$01
	.byte	$13
	.byte	$02
	.byte	$A9
	.byte	$AA
	.byte	$AB
	.byte	$AC
	.byte	$AD
	.byte	$8D
	.byte	$03
	.byte	$13
	.byte	$02
	.byte	$61
	.byte	$03
	.byte	$13
	.byte	$0D
	.byte	$B1
	.byte	$B2
	.byte	$B3
	.byte	$B4
	.byte	$B5
	.byte	$B6
	.byte	$B7
	.byte	$B8
	.byte	$B9
	.byte	$BA
	.byte	$BB
	.byte	$BC
	.byte	$BD
	.byte	$BE
	.byte	$03
	.byte	$13
	.byte	$0E
	.byte	$70
	.byte	$03
	.byte	$03
	.byte	$B0
	.byte	$01
	.byte	$01
	.byte	$82
	.byte	$30
	.byte	$51
	.byte	$31
	.byte	$20
	.byte	$51
	.byte	$20
	.byte	$82
	.byte	$01
	.byte	$01
	.byte	$BF
	.byte	$03
	.byte	$13
	.byte	$11
	.byte	$B0
	.byte	$01
	.byte	$13
	.byte	$0A
	.byte	$7D
	.byte	$BF
	.byte	$00
	.byte	$13
	.byte	$04
	.byte	$54
	.byte	$55
	.byte	$01
	.byte	$00
	.byte	$13
	.byte	$04
	.byte	$05
	.byte	$05
	.byte	$01
	.byte	$00
	.byte	$13
	.byte	$07
	.byte	$FF
	.byte	$13
	.byte	$03
	.byte	$33
	.byte	$A0
	.byte	$A0
	.byte	$20
	.byte	$FA
	.byte	$FE
	.byte	$13
	.byte	$02
	.byte	$32
	.byte	$0A
	.byte	$0A
	.byte	$02
	.byte	$FF
	.byte	$13
	.byte	$03
	.byte	$33
	.byte	$AA
	.byte	$AA
	.byte	$22
	.byte	$FF
	.byte	$13
	.byte	$03
	.byte	$33
	.byte	$00
	.byte	$13
	.byte	$02
	.byte	$0F
	.byte	$13
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$13
	.byte	$00
_EVALUATION:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$1F
	.byte	$90
	.byte	$00
	.byte	$01
	.byte	$22
	.byte	$47
	.byte	$6F
	.byte	$61
	.byte	$6C
	.byte	$2E
	.byte	$01
	.byte	$0C
	.byte	$00
	.byte	$01
	.byte	$23
	.byte	$87
	.byte	$00
	.byte	$87
	.byte	$00
	.byte	$01
	.byte	$47
	.byte	$53
	.byte	$70
	.byte	$65
	.byte	$65
	.byte	$64
	.byte	$2E
	.byte	$01
	.byte	$0B
	.byte	$00
	.byte	$01
	.byte	$0A
	.byte	$F0
	.byte	$00
	.byte	$01
	.byte	$22
	.byte	$41
	.byte	$63
	.byte	$63
	.byte	$75
	.byte	$72
	.byte	$61
	.byte	$63
	.byte	$79
	.byte	$2E
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$CF
	.byte	$00
	.byte	$01
	.byte	$19
	.byte	$53
	.byte	$74
	.byte	$79
	.byte	$6C
	.byte	$65
	.byte	$2E
	.byte	$01
	.byte	$0B
	.byte	$00
	.byte	$01
	.byte	$6B
	.byte	$04
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$0A
	.byte	$2D
	.byte	$41
	.byte	$4C
	.byte	$2D
	.byte	$00
	.byte	$01
	.byte	$0A
	.byte	$0A
	.byte	$0B
	.byte	$00
	.byte	$00
	.byte	$14
	.byte	$00
	.byte	$01
	.byte	$1A
	.byte	$1A
	.byte	$1B
	.byte	$00
	.byte	$00
	.byte	$16
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$80
	.byte	$81
	.byte	$82
	.byte	$83
	.byte	$84
	.byte	$85
	.byte	$86
	.byte	$87
	.byte	$D7
	.byte	$16
	.byte	$00
	.byte	$00
	.byte	$16
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$90
	.byte	$91
	.byte	$92
	.byte	$93
	.byte	$94
	.byte	$95
	.byte	$96
	.byte	$97
	.byte	$D7
	.byte	$16
	.byte	$00
	.byte	$00
	.byte	$16
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$A0
	.byte	$A1
	.byte	$A2
	.byte	$A3
	.byte	$A4
	.byte	$A5
	.byte	$A6
	.byte	$A7
	.byte	$D7
	.byte	$16
	.byte	$00
	.byte	$00
	.byte	$16
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$B0
	.byte	$B1
	.byte	$B2
	.byte	$B3
	.byte	$B4
	.byte	$B5
	.byte	$B6
	.byte	$B7
	.byte	$D7
	.byte	$16
	.byte	$00
	.byte	$00
	.byte	$16
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$C0
	.byte	$C1
	.byte	$C2
	.byte	$C3
	.byte	$C4
	.byte	$C5
	.byte	$C6
	.byte	$C7
	.byte	$D7
	.byte	$16
	.byte	$00
	.byte	$00
	.byte	$16
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$D0
	.byte	$D1
	.byte	$D2
	.byte	$D3
	.byte	$D4
	.byte	$D5
	.byte	$D6
	.byte	$D7
	.byte	$D7
	.byte	$16
	.byte	$00
	.byte	$00
	.byte	$16
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$E1
	.byte	$BC
	.byte	$BD
	.byte	$BE
	.byte	$BF
	.byte	$E6
	.byte	$CF
	.byte	$D7
	.byte	$16
	.byte	$00
	.byte	$00
	.byte	$16
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$D8
	.byte	$D9
	.byte	$DA
	.byte	$DB
	.byte	$DC
	.byte	$DD
	.byte	$DE
	.byte	$DF
	.byte	$D7
	.byte	$16
	.byte	$00
	.byte	$00
	.byte	$16
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$E8
	.byte	$E9
	.byte	$EA
	.byte	$EB
	.byte	$EC
	.byte	$ED
	.byte	$EE
	.byte	$EF
	.byte	$D7
	.byte	$16
	.byte	$00
	.byte	$00
	.byte	$16
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$F8
	.byte	$F9
	.byte	$FA
	.byte	$FB
	.byte	$FC
	.byte	$FD
	.byte	$FE
	.byte	$FF
	.byte	$D7
	.byte	$16
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$17
	.byte	$01
	.byte	$1B
	.byte	$19
	.byte	$00
	.byte	$01
	.byte	$22
	.byte	$F0
	.byte	$F1
	.byte	$00
	.byte	$01
	.byte	$16
	.byte	$F7
	.byte	$00
	.byte	$01
	.byte	$23
	.byte	$55
	.byte	$A5
	.byte	$01
	.byte	$02
	.byte	$A1
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$90
	.byte	$A0
	.byte	$01
	.byte	$03
	.byte	$24
	.byte	$00
	.byte	$00
	.byte	$55
	.byte	$AA
	.byte	$01
	.byte	$03
	.byte	$62
	.byte	$50
	.byte	$00
	.byte	$A5
	.byte	$55
	.byte	$01
	.byte	$05
	.byte	$A5
	.byte	$66
	.byte	$55
	.byte	$01
	.byte	$05
	.byte	$99
	.byte	$66
	.byte	$55
	.byte	$01
	.byte	$04
	.byte	$45
	.byte	$99
	.byte	$AA
	.byte	$A5
	.byte	$01
	.byte	$05
	.byte	$A9
	.byte	$05
	.byte	$01
	.byte	$06
	.byte	$05
	.byte	$01
	.byte	$00
_TALKING_TIME_LEVEL:
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$1F
	.byte	$90
	.byte	$00
	.byte	$02
	.byte	$1F
	.byte	$04
	.byte	$05
	.byte	$00
	.byte	$02
	.byte	$19
	.byte	$0A
	.byte	$0B
	.byte	$00
	.byte	$00
	.byte	$14
	.byte	$00
	.byte	$02
	.byte	$1A
	.byte	$1A
	.byte	$1B
	.byte	$00
	.byte	$00
	.byte	$16
	.byte	$00
	.byte	$02
	.byte	$1B
	.byte	$16
	.byte	$00
	.byte	$00
	.byte	$16
	.byte	$00
	.byte	$02
	.byte	$13
	.byte	$9A
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$16
	.byte	$00
	.byte	$00
	.byte	$16
	.byte	$00
	.byte	$02
	.byte	$1B
	.byte	$16
	.byte	$00
	.byte	$F0
	.byte	$16
	.byte	$00
	.byte	$02
	.byte	$1B
	.byte	$16
	.byte	$00
	.byte	$00
	.byte	$16
	.byte	$00
	.byte	$02
	.byte	$1B
	.byte	$16
	.byte	$00
	.byte	$00
	.byte	$16
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$CF
	.byte	$00
	.byte	$02
	.byte	$13
	.byte	$16
	.byte	$00
	.byte	$00
	.byte	$16
	.byte	$00
	.byte	$02
	.byte	$1B
	.byte	$16
	.byte	$00
	.byte	$00
	.byte	$16
	.byte	$00
	.byte	$02
	.byte	$1B
	.byte	$16
	.byte	$00
	.byte	$00
	.byte	$16
	.byte	$00
	.byte	$02
	.byte	$1B
	.byte	$16
	.byte	$00
	.byte	$00
	.byte	$16
	.byte	$00
	.byte	$02
	.byte	$1B
	.byte	$16
	.byte	$00
	.byte	$00
	.byte	$16
	.byte	$00
	.byte	$02
	.byte	$1B
	.byte	$16
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$17
	.byte	$02
	.byte	$1B
	.byte	$19
	.byte	$00
	.byte	$02
	.byte	$1C
	.byte	$87
	.byte	$00
	.byte	$02
	.byte	$38
	.byte	$80
	.byte	$81
	.byte	$82
	.byte	$83
	.byte	$84
	.byte	$85
	.byte	$86
	.byte	$87
	.byte	$00
	.byte	$02
	.byte	$17
	.byte	$90
	.byte	$91
	.byte	$92
	.byte	$93
	.byte	$94
	.byte	$95
	.byte	$96
	.byte	$97
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$88
	.byte	$00
	.byte	$02
	.byte	$12
	.byte	$A0
	.byte	$A1
	.byte	$A2
	.byte	$A3
	.byte	$A4
	.byte	$A5
	.byte	$A6
	.byte	$A7
	.byte	$00
	.byte	$02
	.byte	$17
	.byte	$B0
	.byte	$B1
	.byte	$B2
	.byte	$B3
	.byte	$B4
	.byte	$B5
	.byte	$B6
	.byte	$B7
	.byte	$00
	.byte	$02
	.byte	$17
	.byte	$C0
	.byte	$C1
	.byte	$C2
	.byte	$C3
	.byte	$C4
	.byte	$C5
	.byte	$C6
	.byte	$C7
	.byte	$00
	.byte	$02
	.byte	$17
	.byte	$D0
	.byte	$D1
	.byte	$D2
	.byte	$D3
	.byte	$D4
	.byte	$D5
	.byte	$D6
	.byte	$D7
	.byte	$00
	.byte	$02
	.byte	$17
	.byte	$C8
	.byte	$C9
	.byte	$CA
	.byte	$CB
	.byte	$CC
	.byte	$CD
	.byte	$CE
	.byte	$CF
	.byte	$00
	.byte	$02
	.byte	$17
	.byte	$D8
	.byte	$D9
	.byte	$DA
	.byte	$DB
	.byte	$DC
	.byte	$DD
	.byte	$DE
	.byte	$DF
	.byte	$00
	.byte	$02
	.byte	$17
	.byte	$E8
	.byte	$E9
	.byte	$EA
	.byte	$EB
	.byte	$EC
	.byte	$ED
	.byte	$EE
	.byte	$EF
	.byte	$00
	.byte	$02
	.byte	$17
	.byte	$F8
	.byte	$F9
	.byte	$FA
	.byte	$FB
	.byte	$FC
	.byte	$FD
	.byte	$FE
	.byte	$FF
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$F0
	.byte	$F1
	.byte	$00
	.byte	$02
	.byte	$16
	.byte	$F7
	.byte	$00
	.byte	$02
	.byte	$23
	.byte	$AA
	.byte	$05
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$A0
	.byte	$22
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$8A
	.byte	$62
	.byte	$50
	.byte	$02
	.byte	$05
	.byte	$98
	.byte	$A6
	.byte	$A5
	.byte	$02
	.byte	$02
	.byte	$A0
	.byte	$A5
	.byte	$A5
	.byte	$AA
	.byte	$55
	.byte	$02
	.byte	$17
	.byte	$05
	.byte	$02
	.byte	$06
	.byte	$05
	.byte	$02
	.byte	$00
_background_pal:
	.byte	$2C
	.byte	$05
	.byte	$3D
	.byte	$15
	.byte	$2C
	.byte	$05
	.byte	$37
	.byte	$15
	.byte	$2C
	.byte	$0F
	.byte	$20
	.byte	$11
	.byte	$2C
	.byte	$19
	.byte	$2A
	.byte	$0F
_pal2:
	.byte	$0F
	.byte	$20
	.byte	$16
	.byte	$36
	.byte	$0F
	.byte	$05
	.byte	$16
	.byte	$36
	.byte	$0F
	.byte	$13
	.byte	$0F
	.byte	$36
	.byte	$0F
	.byte	$09
	.byte	$19
	.byte	$29
_talking_time_palete:
	.byte	$0F
	.byte	$20
	.byte	$16
	.byte	$36
	.byte	$0F
	.byte	$05
	.byte	$16
	.byte	$36
	.byte	$0F
	.byte	$00
	.byte	$1B
	.byte	$30
	.byte	$0F
	.byte	$09
	.byte	$19
	.byte	$38
_palette:
	.res	16,$00
.segment	"BANK0"
_INTRO_TOP:
	.byte	$04
	.byte	$00
	.byte	$04
	.byte	$56
	.byte	$03
	.byte	$00
	.byte	$04
	.byte	$0C
	.byte	$03
	.byte	$00
	.byte	$04
	.byte	$06
	.byte	$03
	.byte	$00
	.byte	$04
	.byte	$4D
	.byte	$03
	.byte	$00
	.byte	$04
	.byte	$A6
	.byte	$03
	.byte	$00
	.byte	$04
	.byte	$DE
	.byte	$03
	.byte	$00
	.byte	$04
	.byte	$09
	.byte	$03
	.byte	$00
	.byte	$04
	.byte	$06
	.byte	$03
	.byte	$00
	.byte	$04
	.byte	$05
	.byte	$03
	.byte	$00
	.byte	$04
	.byte	$BF
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$05
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$03
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$0E
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$09
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$03
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$06
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$06
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$FF
	.byte	$CF
	.byte	$FF
	.byte	$CF
	.byte	$FF
	.byte	$3F
	.byte	$FF
	.byte	$04
	.byte	$05
	.byte	$33
	.byte	$FF
	.byte	$FF
	.byte	$FC
	.byte	$FF
	.byte	$CF
	.byte	$FF
	.byte	$04
	.byte	$0A
	.byte	$F0
	.byte	$FF
	.byte	$04
	.byte	$02
	.byte	$CF
	.byte	$FF
	.byte	$3F
	.byte	$FF
	.byte	$3F
	.byte	$FF
	.byte	$3F
	.byte	$FF
	.byte	$04
	.byte	$07
	.byte	$AE
	.byte	$AE
	.byte	$BF
	.byte	$AE
	.byte	$BB
	.byte	$EB
	.byte	$AF
	.byte	$EB
	.byte	$0A
	.byte	$04
	.byte	$02
	.byte	$0E
	.byte	$0E
	.byte	$0A
	.byte	$0E
	.byte	$0A
	.byte	$04
	.byte	$00
_INTRO_MIDDLE:
	.byte	$04
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$08
	.byte	$01
	.byte	$04
	.byte	$0A
	.byte	$02
	.byte	$04
	.byte	$16
	.byte	$01
	.byte	$04
	.byte	$09
	.byte	$02
	.byte	$04
	.byte	$0B
	.byte	$01
	.byte	$04
	.byte	$09
	.byte	$03
	.byte	$04
	.byte	$09
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$12
	.byte	$03
	.byte	$04
	.byte	$0B
	.byte	$01
	.byte	$04
	.byte	$09
	.byte	$03
	.byte	$04
	.byte	$15
	.byte	$01
	.byte	$04
	.byte	$09
	.byte	$03
	.byte	$04
	.byte	$15
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$09
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$09
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$09
	.byte	$01
	.byte	$04
	.byte	$0A
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$11
	.byte	$01
	.byte	$04
	.byte	$09
	.byte	$02
	.byte	$04
	.byte	$0C
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$11
	.byte	$03
	.byte	$04
	.byte	$0D
	.byte	$02
	.byte	$04
	.byte	$11
	.byte	$03
	.byte	$04
	.byte	$0D
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$0B
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$0D
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$0B
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$0D
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$04
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$03
	.byte	$01
	.byte	$04
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$04
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$03
	.byte	$01
	.byte	$04
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$04
	.byte	$0B
	.byte	$01
	.byte	$04
	.byte	$03
	.byte	$03
	.byte	$04
	.byte	$0D
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$04
	.byte	$0B
	.byte	$01
	.byte	$04
	.byte	$03
	.byte	$03
	.byte	$04
	.byte	$0D
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$06
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$04
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$03
	.byte	$01
	.byte	$04
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$04
	.byte	$02
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$01
	.byte	$04
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$02
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$02
	.byte	$04
	.byte	$03
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$02
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$03
	.byte	$01
	.byte	$04
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$05
	.byte	$01
	.byte	$04
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$04
	.byte	$A0
	.byte	$AA
	.byte	$04
	.byte	$09
	.byte	$6A
	.byte	$5A
	.byte	$04
	.byte	$04
	.byte	$55
	.byte	$A5
	.byte	$A5
	.byte	$5A
	.byte	$5A
	.byte	$56
	.byte	$55
	.byte	$55
	.byte	$79
	.byte	$5A
	.byte	$5A
	.byte	$56
	.byte	$59
	.byte	$5A
	.byte	$04
	.byte	$02
	.byte	$67
	.byte	$55
	.byte	$55
	.byte	$9D
	.byte	$67
	.byte	$55
	.byte	$04
	.byte	$02
	.byte	$77
	.byte	$55
	.byte	$55
	.byte	$DD
	.byte	$77
	.byte	$55
	.byte	$04
	.byte	$02
	.byte	$FF
	.byte	$33
	.byte	$FF
	.byte	$04
	.byte	$03
	.byte	$CC
	.byte	$FF
	.byte	$0F
	.byte	$03
	.byte	$0F
	.byte	$04
	.byte	$03
	.byte	$0C
	.byte	$0F
	.byte	$04
	.byte	$00
_bottomdata:
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$90
	.byte	$A1
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$A0
	.byte	$A1
	.byte	$A2
	.byte	$A3
	.byte	$A4
	.byte	$A5
	.byte	$A6
	.byte	$A7
	.byte	$A8
	.byte	$A9
	.byte	$AA
	.byte	$AB
	.byte	$AC
	.byte	$AD
	.byte	$AE
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$B1
	.byte	$B2
	.byte	$B3
	.byte	$B4
	.byte	$B5
	.byte	$B6
	.byte	$B7
	.byte	$B8
	.byte	$B9
	.byte	$BA
	.byte	$BB
	.byte	$BC
	.byte	$BD
	.byte	$BE
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$C1
	.byte	$C2
	.byte	$C3
	.byte	$C4
	.byte	$C5
	.byte	$C6
	.byte	$C7
	.byte	$C8
	.byte	$C9
	.byte	$CA
	.byte	$CB
	.byte	$CC
	.byte	$CD
	.byte	$CE
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$D0
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$D4
	.byte	$D5
	.byte	$D6
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$DC
	.byte	$DD
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$E0
	.byte	$E1
	.byte	$00
	.byte	$00
	.byte	$E4
	.byte	$E5
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$ED
	.byte	$EE
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$F3
	.byte	$F4
	.byte	$F5
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$FD
	.byte	$FE
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$49
	.byte	$49
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$49
	.byte	$49
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$49
	.byte	$49
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$49
	.byte	$49
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$49
	.byte	$49
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$49
	.byte	$49
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$49
	.byte	$49
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$49
	.byte	$49
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$49
	.byte	$49
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$49
	.byte	$49
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$49
	.byte	$49
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$49
	.byte	$49
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$02
	.byte	$02
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$15
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$45
	.byte	$55
	.byte	$55
	.byte	$05
	.byte	$D5
	.byte	$F5
	.byte	$F5
	.byte	$F5
	.byte	$F5
	.byte	$55
	.byte	$55
	.byte	$01
	.byte	$4C
	.byte	$9F
	.byte	$5F
	.byte	$9F
	.byte	$5F
	.byte	$47
	.byte	$7F
	.byte	$50
	.byte	$05
	.byte	$08
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$55
	.byte	$47
	.byte	$55
	.byte	$50
	.byte	$0D
	.byte	$2E
	.byte	$8B
	.byte	$0F
	.byte	$FF
	.byte	$77
	.byte	$55
	.byte	$F5
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$F5
	.byte	$F5
	.byte	$F5
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
_intro_cutscene_palette:
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$0F
	.byte	$01
	.byte	$21
	.byte	$31
	.byte	$0F
	.byte	$06
	.byte	$16
	.byte	$26
	.byte	$0F
	.byte	$09
	.byte	$19
	.byte	$29
.segment	"BANK1"
.segment	"CODE"
L1093:
	.byte	$59,$6F,$75,$27,$72,$65,$20,$73,$74,$61,$72,$74,$69,$6E,$67,$20
	.byte	$74,$6F,$20,$62,$65,$6C,$69,$65,$76,$65,$00
L10D5:
	.byte	$42,$75,$74,$20,$63,$61,$6E,$20,$79,$6F,$75,$20,$64,$6F,$20,$58
	.byte	$20,$67,$61,$6C,$6C,$6F,$6E,$73,$3F,$00
L105C:
	.byte	$53,$6F,$20,$79,$6F,$75,$20,$77,$61,$6E,$6E,$61,$20,$70,$75,$6D
	.byte	$70,$20,$67,$61,$73,$3F,$21,$3F,$00
L176C	:=	L105C+0
L10E9:
	.byte	$49,$27,$6D,$20,$77,$61,$74,$63,$68,$69,$6E,$67,$20,$63,$6C,$6F
	.byte	$73,$65,$6C,$79,$2E,$2E,$2E,$00
L164D:
	.byte	$47,$61,$73,$20,$41,$74,$74,$65,$6E,$64,$61,$6E,$74,$20,$53,$69
	.byte	$6D,$75,$6C,$61,$74,$6F,$72,$00
L109E:
	.byte	$4E,$6F,$77,$20,$67,$69,$76,$65,$20,$6D,$65,$20,$58,$20,$67,$61
	.byte	$6C,$6C,$6F,$6E,$73,$21,$00
L10BF:
	.byte	$49,$20,$63,$61,$6E,$27,$74,$20,$64,$65,$6E,$79,$2C,$20,$79,$6F
	.byte	$75,$20,$77,$65,$72,$65,$00
L114C:
	.byte	$4E,$6F,$20,$4F,$70,$74,$69,$6F,$6E,$73,$20,$4D,$6F,$64,$65,$20
	.byte	$79,$65,$74,$00
L1086:
	.byte	$42,$75,$74,$20,$64,$6F,$6E,$27,$74,$20,$63,$6C,$69,$63,$6B,$20
	.byte	$69,$74,$00
L1067:
	.byte	$47,$69,$76,$65,$20,$6D,$65,$20,$58,$20,$67,$61,$6C,$6C,$6F,$6E
	.byte	$73,$21,$00
L1796	:=	L1086+0
L174F:
	.byte	$68,$61,$76,$65,$20,$77,$68,$61,$74,$20,$69,$74,$20,$74,$61,$6B
	.byte	$65,$73,$00
L1706:
	.byte	$42,$69,$74,$20,$74,$6F,$6F,$20,$6D,$75,$63,$68,$2C,$20,$62,$75
	.byte	$62,$2E,$00
L1777	:=	L1067+0
L10B2:
	.byte	$41,$6E,$64,$20,$6D,$61,$6B,$65,$20,$69,$74,$20,$71,$75,$69,$63
	.byte	$6B,$00
L1720:
	.byte	$59,$6F,$75,$27,$76,$65,$20,$67,$6F,$74,$20,$69,$74,$20,$6B,$69
	.byte	$64,$00
L178B:
	.byte	$50,$75,$6C,$6C,$20,$74,$68,$65,$20,$74,$72,$69,$67,$67,$65,$72
	.byte	$00
L107B	:=	L178B+0
L10CA:
	.byte	$62,$6F,$72,$6E,$20,$74,$6F,$20,$64,$6F,$20,$74,$68,$69,$73,$2E
	.byte	$00
L1745:
	.byte	$59,$6F,$75,$20,$6A,$75,$73,$74,$20,$64,$6F,$6E,$27,$74,$00
L1739:
	.byte	$50,$75,$6D,$70,$20,$68,$61,$72,$64,$65,$72,$2E,$00
L1716:
	.byte	$21,$21,$21,$20,$57,$4F,$57,$20,$21,$21,$21,$00
L172F:
	.byte	$48,$6D,$6D,$6D,$6D,$6D,$2E,$2E,$2E,$2E,$00
L1662:
	.byte	$4F,$70,$74,$69,$6F,$6E,$73,$00
L1643:
	.byte	$47,$2E,$41,$2E,$53,$2E,$00
L1658:
	.byte	$53,$74,$61,$72,$74,$00
L16B6:
	.byte	$2E,$30,$30,$20,$47,$00
L16F8:
	.byte	$4E,$4F,$4E,$45,$00
L16C1:
	.byte	$3E,$3E,$3E,$00

.segment	"BSS"

_bankLevel:
	.res	1,$00
_bankBuffer:
	.res	10,$00
.segment	"ZEROPAGE"
_pad2_zapper:
	.res	1,$00
_zapper_ready:
	.res	1,$00
_hit_detected:
	.res	1,$00
_scroll_y:
	.res	2,$00
_scrolled_past_once:
	.res	1,$00
_stop_scrolling:
	.res	1,$00
_option:
	.res	1,$00
_cost5:
	.res	1,$00
_cost4:
	.res	1,$00
_cost3:
	.res	1,$00
_cost2:
	.res	1,$00
_cost1:
	.res	1,$00
_cost5_changed:
	.res	1,$00
_cost4_changed:
	.res	1,$00
_cost3_changed:
	.res	1,$00
_cost2_changed:
	.res	1,$00
_cost1_changed:
	.res	1,$00
_gas5:
	.res	1,$00
_gas4:
	.res	1,$00
_gas3:
	.res	1,$00
_gas2:
	.res	1,$00
_gas1:
	.res	1,$00
_gas5_changed:
	.res	1,$00
_gas4_changed:
	.res	1,$00
_gas3_changed:
	.res	1,$00
_gas2_changed:
	.res	1,$00
_gas1_changed:
	.res	1,$00
_gas_goal:
	.res	2,$00
_gas_goal_hundreds:
	.res	2,$00
_gas_speed:
	.res	2,$00
_cost_speed:
	.res	2,$00
_gas_pumped:
	.res	2,$00
_pad1:
	.res	1,$00
_pad1_new:
	.res	1,$00
_trigger_pulled:
	.res	1,$00
_trigger_clicked:
	.res	1,$00
_trigger_hit:
	.res	1,$00
_trigger_miss:
	.res	1,$00
_started_pumping:
	.res	1,$00
_sprite_cost:
	.res	1,$00
_cost_sprite:
	.res	1,$00
_game_mode:
	.res	1,$00
_game_level:
	.res	1,$00
_levels_complete:
	.res	1,$00
_perfect_levels:
	.res	1,$00
_pointer:
	.res	2,$00
_temp1:
	.res	1,$00
_temp2:
	.res	1,$00
_temp3:
	.res	1,$00
_tempint:
	.res	2,$00
_bird_x:
	.res	1,$00
_bird_y:
	.res	1,$00
_address:
	.res	2,$00
_x:
	.res	1,$00
_y:
	.res	1,$00
_num_holder:
	.res	1,$00
_index2:
	.res	1,$00
_largeindex:
	.res	2,$00
_moveframes:
	.res	1,$00
.segment	"XRAM"
_wram_array:
	.res	8192,$00

; ---------------------------------------------------------------
; void __near__ banked_call (unsigned char, __near__ __near__ function returning void *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_banked_call: near

.segment	"CODE"

;
; void banked_call(unsigned char bankId, void (*method)(void)) {
;
	jsr     pushax
;
; bank_push(bankId);
;
	ldy     #$02
	lda     (sp),y
	jsr     _bank_push
;
; (*method)();
;
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     callax
;
; bank_pop();
;
	jsr     _bank_pop
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ bank_push (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bank_push: near

.segment	"CODE"

;
; void bank_push(unsigned char bankId) {
;
	jsr     pusha
;
; bankBuffer[bankLevel] = bankId;
;
	ldy     #$00
	lda     (sp),y
	ldy     _bankLevel
	sta     _bankBuffer,y
;
; ++bankLevel;
;
	inc     _bankLevel
;
; set_prg_bank(bankId);
;
	ldy     #$00
	lda     (sp),y
	jsr     _set_prg_bank
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ bank_pop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bank_pop: near

.segment	"CODE"

;
; --bankLevel;
;
	dec     _bankLevel
;
; if (bankLevel > 0) {
;
	beq     L0012
;
; set_prg_bank(bankBuffer[bankLevel-1]);
;
	ldx     #$00
	lda     _bankLevel
	sec
	sbc     #$01
	bcs     L0017
	dex
L0017:	sta     ptr1
	txa
	clc
	adc     #>(_bankBuffer)
	sta     ptr1+1
	ldy     #<(_bankBuffer)
	lda     (ptr1),y
	jmp     _set_prg_bank
;
; }
;
L0012:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ adjust_cost (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_adjust_cost: near

.segment	"CODE"

;
; if(cost1 >= 10){
;
	lda     _cost1
	cmp     #$0A
	bcc     L17DB
;
; cost1_changed = 1;
;
	lda     #$01
	sta     _cost1_changed
;
; cost1 = 0;
;
	lda     #$00
	sta     _cost1
;
; ++cost2;
;
	inc     _cost2
;
; if(cost2 >= 10){
;
	lda     _cost2
	cmp     #$0A
	bcc     L17DB
;
; cost2_changed = 1;
;
	lda     #$01
	sta     _cost2_changed
;
; cost2 = 0;
;
	lda     #$00
	sta     _cost2
;
; ++cost3;
;
	inc     _cost3
;
; if(cost3 >= 10){
;
	lda     _cost3
	cmp     #$0A
	bcc     L17DA
;
; cost3_changed = 1;
;
	lda     #$01
	sta     _cost3_changed
;
; cost3 = 0;
;
	lda     #$00
	sta     _cost3
;
; ++cost4;
;
	inc     _cost4
;
; if(cost4 >= 10) {
;
L17DA:	lda     _cost4
	cmp     #$0A
	bcc     L17DB
;
; cost4_changed = 1;
;
	lda     #$01
	sta     _cost4_changed
;
; cost4 = 0;
;
	lda     #$00
	sta     _cost4
;
; ++cost5;
;
	inc     _cost5
;
; if(cost5 >= 10){ // maximum 9999
;
L17DB:	lda     _cost5
	cmp     #$0A
	bcc     L12A6
;
; cost5 = 9;
;
	lda     #$09
	sta     _cost5
;
; cost4 = 9;
;
	sta     _cost4
;
; cost3 = 9;
;
	sta     _cost3
;
; cost2 = 9;
;
	sta     _cost2
;
; cost1 = 9;
;
	sta     _cost1
;
; }
;
L12A6:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ adjust_gas (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_adjust_gas: near

.segment	"CODE"

;
; if(gas1 >= 10){
;
	lda     _gas1
	cmp     #$0A
	bcc     L17DD
;
; gas1_changed = 1;
;
	lda     #$01
	sta     _gas1_changed
;
; gas1 = 0;
;
	lda     #$00
	sta     _gas1
;
; ++gas2;
;
	inc     _gas2
;
; if(gas2 >= 10){
;
	lda     _gas2
	cmp     #$0A
	bcc     L17DD
;
; gas2_changed = 1;
;
	lda     #$01
	sta     _gas2_changed
;
; gas2 = 0;
;
	lda     #$00
	sta     _gas2
;
; ++gas3;
;
	inc     _gas3
;
; if(gas3 >= 10){
;
	lda     _gas3
	cmp     #$0A
	bcc     L17DC
;
; gas3_changed = 1;
;
	lda     #$01
	sta     _gas3_changed
;
; gas3 = 0;
;
	lda     #$00
	sta     _gas3
;
; ++gas4;
;
	inc     _gas4
;
; if(gas4 >= 10) {
;
L17DC:	lda     _gas4
	cmp     #$0A
	bcc     L17DD
;
; gas4_changed = 1;
;
	lda     #$01
	sta     _gas4_changed
;
; gas4 = 0;
;
	lda     #$00
	sta     _gas4
;
; ++gas5;
;
	inc     _gas5
;
; if(gas5 >= 10){ // maximum 9999
;
L17DD:	lda     _gas5
	cmp     #$0A
	bcc     L127D
;
; gas5 = 9;
;
	lda     #$09
	sta     _gas5
;
; gas4 = 9;
;
	sta     _gas4
;
; gas3 = 9;
;
	sta     _gas3
;
; gas2 = 9;
;
	sta     _gas2
;
; gas1 = 9;
;
	sta     _gas1
;
; }
;
L127D:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_cost (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_cost: near

.segment	"CODE"

;
; if(cost3_changed){
;
	lda     _cost3_changed
	beq     L12BD
;
; num_holder = cost4;
;
	lda     _cost4
	sta     _num_holder
;
; x=21;
;
	lda     #$15
	sta     _x
;
; y=14;
;
	lda     #$0E
	sta     _y
;
; draw_number_as_bg_tile();
;
	jsr     _draw_number_as_bg_tile
;
; cost3_changed = 0;
;
	lda     #$00
	sta     _cost3_changed
;
; if(cost2_changed){
;
L12BD:	lda     _cost2_changed
	beq     L12C8
;
; num_holder = cost3;
;
	lda     _cost3
	sta     _num_holder
;
; x=23;
;
	lda     #$17
	sta     _x
;
; y=14;
;
	lda     #$0E
	sta     _y
;
; draw_number_as_bg_tile();
;
	jsr     _draw_number_as_bg_tile
;
; cost2_changed = 0;
;
	lda     #$00
	sta     _cost2_changed
;
; if(cost1_changed){
;
L12C8:	lda     _cost1_changed
	beq     L12D3
;
; num_holder = cost2;
;
	lda     _cost2
	sta     _num_holder
;
; x=25;
;
	lda     #$19
	sta     _x
;
; y=14;
;
	lda     #$0E
	sta     _y
;
; draw_number_as_bg_tile();
;
	jsr     _draw_number_as_bg_tile
;
; cost1_changed = 0;
;
	lda     #$00
	sta     _cost1_changed
;
; num_holder = cost1;
;
L12D3:	lda     _cost1
	sta     _num_holder
;
; x=27;
;
	lda     #$1B
	sta     _x
;
; y=14;
;
	lda     #$0E
	sta     _y
;
; draw_number_as_bg_tile();
;
	jmp     _draw_number_as_bg_tile

.endproc

; ---------------------------------------------------------------
; void __near__ draw_gas (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_gas: near

.segment	"CODE"

;
; if(gas3_changed){
;
	lda     _gas3_changed
	beq     L15E3
;
; num_holder = gas4;
;
	lda     _gas4
	sta     _num_holder
;
; x=21;
;
	lda     #$15
	sta     _x
;
; y=20;
;
	lda     #$14
	sta     _y
;
; draw_number_as_bg_tile();
;
	jsr     _draw_number_as_bg_tile
;
; gas3_changed=0;
;
	lda     #$00
	sta     _gas3_changed
;
; if(gas2_changed){
;
L15E3:	lda     _gas2_changed
	beq     L15EE
;
; num_holder = gas3;
;
	lda     _gas3
	sta     _num_holder
;
; x=23;
;
	lda     #$17
	sta     _x
;
; y=20;
;
	lda     #$14
	sta     _y
;
; draw_number_as_bg_tile();
;
	jsr     _draw_number_as_bg_tile
;
; gas2_changed = 0;
;
	lda     #$00
	sta     _gas2_changed
;
; if(gas1_changed){
;
L15EE:	lda     _gas1_changed
	beq     L15F9
;
; num_holder = gas2;
;
	lda     _gas2
	sta     _num_holder
;
; x=25;
;
	lda     #$19
	sta     _x
;
; y=20;
;
	lda     #$14
	sta     _y
;
; draw_number_as_bg_tile();
;
	jsr     _draw_number_as_bg_tile
;
; gas1_changed = 0;
;
	lda     #$00
	sta     _gas1_changed
;
; oam_meta_spr(0xc5,0x89,Decimal_1);//decimal for dollars
;
L15F9:	jsr     decsp2
	lda     #$C5
	ldy     #$01
	sta     (sp),y
	lda     #$89
	dey
	sta     (sp),y
	lda     #<(_Decimal_1)
	ldx     #>(_Decimal_1)
	jsr     _oam_meta_spr
;
; oam_meta_spr(0xc5,0xb9,Decimal_1);//decimal for gas
;
	jsr     decsp2
	lda     #$C5
	ldy     #$01
	sta     (sp),y
	lda     #$B9
	dey
	sta     (sp),y
	lda     #<(_Decimal_1)
	ldx     #>(_Decimal_1)
	jsr     _oam_meta_spr
;
; num_holder = gas1;
;
	lda     _gas1
	sta     _num_holder
;
; x=27;
;
	lda     #$1B
	sta     _x
;
; y=20;
;
	lda     #$14
	sta     _y
;
; draw_number_as_bg_tile();
;
	jmp     _draw_number_as_bg_tile

.endproc

; ---------------------------------------------------------------
; void __near__ read_input (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_read_input: near

.segment	"CODE"

;
; pad1 = pad_poll(0);     // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0); // newly pressed button. do pad_poll first
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; trigger_pulled =  (pad1 & PAD_B) || (pad1 & PAD_A) || zap_shoot(0); // controller slot 1 zapper
;
	lda     _pad1
	and     #$40
	bne     L17DE
	lda     _pad1
	and     #$80
	bne     L17DE
	jsr     _zap_shoot
	tax
	beq     L17DF
L17DE:	lda     #$01
L17DF:	sta     _trigger_pulled
;
; trigger_clicked = (pad1_new & PAD_A) || (pad1_new & PAD_B); //needs to check last frame for blank
;
	lda     _pad1_new
	and     #$80
	bne     L17E0
	lda     _pad1_new
	and     #$40
	beq     L17E1
L17E0:	lda     #$01
L17E1:	sta     _trigger_clicked
;
; trigger_hit =  (pad1 & PAD_A) || zap_shoot(0); // controller slot 1 zapper
;
	lda     _pad1
	and     #$80
	bne     L17E2
	jsr     _zap_shoot
	tax
	beq     L17E3
L17E2:	lda     #$01
L17E3:	sta     _trigger_hit
;
; trigger_miss =  (pad1 & PAD_B) || zap_shoot(0); // controller slot 1 zapper
;
	lda     _pad1
	and     #$40
	bne     L17E4
	jsr     _zap_shoot
	tax
	beq     L17E5
L17E4:	lda     #$01
L17E5:	sta     _trigger_miss
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ find_sprite (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_find_sprite: near

.segment	"CODE"

;
; switch(sprite_cost) {
;
	lda     _sprite_cost
;
; }
;
	beq     L1618
	cmp     #$01
	beq     L161C
	cmp     #$02
	beq     L1620
	cmp     #$03
	beq     L1624
	cmp     #$04
	beq     L1628
	cmp     #$05
	beq     L162C
	cmp     #$06
	beq     L1630
	cmp     #$07
	beq     L1634
	cmp     #$08
	beq     L1638
	cmp     #$09
	beq     L163C
	rts
;
; pointer = Zero;
;
L1618:	lda     #>(_Zero)
	sta     _pointer+1
	lda     #<(_Zero)
	sta     _pointer
;
; break;
;
	rts
;
; pointer = One;
;
L161C:	lda     #>(_One)
	sta     _pointer+1
	lda     #<(_One)
	sta     _pointer
;
; break;
;
	rts
;
; pointer = Two;
;
L1620:	lda     #>(_Two)
	sta     _pointer+1
	lda     #<(_Two)
	sta     _pointer
;
; break;
;
	rts
;
; pointer = Three;
;
L1624:	lda     #>(_Three)
	sta     _pointer+1
	lda     #<(_Three)
	sta     _pointer
;
; break;
;
	rts
;
; pointer = Four;
;
L1628:	lda     #>(_Four)
	sta     _pointer+1
	lda     #<(_Four)
	sta     _pointer
;
; break;
;
	rts
;
; pointer = Five;
;
L162C:	lda     #>(_Five)
	sta     _pointer+1
	lda     #<(_Five)
	sta     _pointer
;
; break;
;
	rts
;
; pointer = Six;
;
L1630:	lda     #>(_Six)
	sta     _pointer+1
	lda     #<(_Six)
	sta     _pointer
;
; break;
;
	rts
;
; pointer = Seven;
;
L1634:	lda     #>(_Seven)
	sta     _pointer+1
	lda     #<(_Seven)
	sta     _pointer
;
; break;
;
	rts
;
; pointer = Eight;
;
L1638:	lda     #>(_Eight)
	sta     _pointer+1
	lda     #<(_Eight)
	sta     _pointer
;
; break;
;
	rts
;
; pointer = Nine;
;
L163C:	lda     #>(_Nine)
	sta     _pointer+1
	lda     #<(_Nine)
	sta     _pointer
;
; break;
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ init_mode_title (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_mode_title: near

.segment	"CODE"

;
; ppu_off();  // screen off
;
	jsr     _ppu_off
;
; oam_clear(); // clear all sprites
;
	jsr     _oam_clear
;
; set_chr_bank_0(TALKING_TIME_CHR);
;
	lda     #$02
	jsr     _set_chr_bank_0
;
; set_chr_bank_1(TALKING_TIME_CHR);
;
	lda     #$02
	jsr     _set_chr_bank_1
;
; draw_title_background();
;
	jsr     _draw_title_background
;
; ppu_on_all(); // turn on screen
;
	jsr     _ppu_on_all
;
; game_mode=MODE_TITLE;
;
	lda     #$00
	sta     _game_mode
;
; game_level=START_OF_GAME;
;
	sta     _game_level
;
; option = 0;
;
	sta     _option
;
; levels_complete = 0;
;
	sta     _levels_complete
;
; perfect_levels = 0;
;
	sta     _perfect_levels
;
; reset_game_variables();
;
	jmp     _reset_game_variables

.endproc

; ---------------------------------------------------------------
; void __near__ init_mode_intro_cutscene (void)
; ---------------------------------------------------------------

.segment	"BANK0"

.proc	_init_mode_intro_cutscene: near

.segment	"BANK0"

;
; nametable_index = 0;
;
	lda     #$00
	sta     _nametable_index
	sta     _nametable_index+1
;
; scrolled_past_once = 0;
;
	sta     _scrolled_past_once
;
; stop_scrolling = 0;
;
	sta     _stop_scrolling
;
; moveframes = 0;
;
	sta     _moveframes
;
; line_counter = 0;
;
	sta     _line_counter
;
; scroll(0,0); //reset scrolling
;
	jsr     push0
	jsr     _scroll
;
; set_mirroring(MIRROR_HORIZONTAL);
;
	lda     #$03
	jsr     _set_mirroring
;
; ppu_off();  // screen off
;
	jsr     _ppu_off
;
; oam_clear(); // clear all sprites
;
	jsr     _oam_clear
;
; pal_bg(intro_cutscene_palette);
;
	lda     #<(_intro_cutscene_palette)
	ldx     #>(_intro_cutscene_palette)
	jsr     _pal_bg
;
; set_chr_bank_0(INTRO_CHR);
;
	lda     #$04
	jsr     _set_chr_bank_0
;
; set_chr_bank_1(TALKING_TIME_CHR);
;
	lda     #$02
	jsr     _set_chr_bank_1
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(INTRO_TOP);
;
	lda     #<(_INTRO_TOP)
	ldx     #>(_INTRO_TOP)
	jsr     _vram_unrle
;
; vram_adr(NAMETABLE_C);
;
	ldx     #$28
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(INTRO_MIDDLE);
;
	lda     #<(_INTRO_MIDDLE)
	ldx     #>(_INTRO_MIDDLE)
	jsr     _vram_unrle
;
; ppu_on_all(); // turn on screen
;
	jsr     _ppu_on_all
;
; game_mode=MODE_INTRO_CUTSCENE;
;
	lda     #$04
	sta     _game_mode
;
; pal_fade_to(0,4);
;
	lda     #$00
	jsr     pusha
	lda     #$04
	jmp     _pal_fade_to

.endproc

; ---------------------------------------------------------------
; void __near__ init_mode_intro_instructions (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_mode_intro_instructions: near

.segment	"CODE"

;
; ppu_off();  // screen off
;
	jsr     _ppu_off
;
; oam_clear(); // clear all sprites
;
	jsr     _oam_clear
;
; clear_background();
;
	jsr     _clear_background
;
; reset_game_variables();
;
	jsr     _reset_game_variables
;
; draw_talking_time_background();
;
	jsr     _draw_talking_time_background
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; index = get_frame_count() & 3; // returns 0,1,2,3
;
	jsr     _get_frame_count
	and     #$03
	sta     _index
;
; gas_goal = gas_goal_array[index];
;
	ldy     _index
	lda     #$00
	sta     _gas_goal+1
	lda     _gas_goal_array,y
	sta     _gas_goal
;
; multi_vram_buffer_horz("So you wanna pump gas?!?", 24, NTADR_A(3,6)); 
;
	jsr     decsp3
	lda     #<(L176C)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L176C)
	sta     (sp),y
	lda     #$18
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$C3
	jsr     _multi_vram_buffer_horz
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; multi_vram_buffer_horz("Give me X gallons!", 18, NTADR_A(3,9)); 
;
	jsr     decsp3
	lda     #<(L1777)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1777)
	sta     (sp),y
	lda     #$12
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$23
	jsr     _multi_vram_buffer_horz
;
; one_vram_buffer(gas_goal+48, NTADR_A(11,9));
;
	lda     _gas_goal
	clc
	adc     #$30
	jsr     pusha
	ldx     #$21
	lda     #$2B
	jsr     _one_vram_buffer
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; multi_vram_buffer_horz("Pull the trigger", 24, NTADR_A(2,20)); 
;
	jsr     decsp3
	lda     #<(L178B)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L178B)
	sta     (sp),y
	lda     #$18
	ldy     #$00
	sta     (sp),y
	ldx     #$22
	lda     #$82
	jsr     _multi_vram_buffer_horz
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; multi_vram_buffer_horz("But don't click it", 18, NTADR_A(2,22)); 
;
	jsr     decsp3
	lda     #<(L1796)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1796)
	sta     (sp),y
	lda     #$12
	ldy     #$00
	sta     (sp),y
	ldx     #$22
	lda     #$C2
	jsr     _multi_vram_buffer_horz
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; ppu_on_all(); // turn on screen
;
	jsr     _ppu_on_all
;
; game_mode = MODE_INTRO_INSTRUCTION;
;
	lda     #$05
	sta     _game_mode
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ init_mode_game (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_mode_game: near

.segment	"CODE"

;
; ppu_off();  // screen off
;
	jsr     _ppu_off
;
; oam_clear(); // clear all sprites
;
	jsr     _oam_clear
;
; pal_col(0,0x21);
;
	lda     #$00
	jsr     pusha
	lda     #$21
	jsr     _pal_col
;
; pal_bg(background_pal);
;
	lda     #<(_background_pal)
	ldx     #>(_background_pal)
	jsr     _pal_bg
;
; bird_x = 0;
;
	lda     #$00
	sta     _bird_x
;
; set_chr_bank_0(LEVEL1_BG_CHR);
;
	jsr     _set_chr_bank_0
;
; set_chr_bank_1(LEVEL1_FG_CHR);
;
	lda     #$01
	jsr     _set_chr_bank_1
;
; scroll(0,0); //reset scrolling
;
	jsr     push0
	jsr     _scroll
;
; index = 0;
;
	lda     #$00
	sta     _index
;
; vram_adr(NAMETABLE_A); //Nametable A;
;
	ldx     #$20
	jsr     _vram_adr
;
; vram_unrle(LEVEL_1_PUMP);
;
	lda     #<(_LEVEL_1_PUMP)
	ldx     #>(_LEVEL_1_PUMP)
	jsr     _vram_unrle
;
; ppu_on_all(); // turn on screen
;
	jsr     _ppu_on_all
;
; pal_fade_to(0,4);
;
	lda     #$00
	jsr     pusha
	lda     #$04
	jsr     _pal_fade_to
;
; wait_a_little();
;
	jsr     _wait_a_little
;
; game_mode=MODE_GAME;
;
	lda     #$01
	sta     _game_mode
;
; started_pumping=0;
;
	lda     #$00
	sta     _started_pumping
;
; } 
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ init_level_one_end (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_level_one_end: near

.segment	"CODE"

;
; ppu_off();  // screen off
;
	jsr     _ppu_off
;
; oam_clear(); // clear all sprites
;
	jsr     _oam_clear
;
; clear_background();
;
	jsr     _clear_background
;
; gas_goal_hundreds = 0;
;
	lda     #$00
	sta     _gas_goal_hundreds
	sta     _gas_goal_hundreds+1
;
; draw_evaluation_time_background();
;
	jsr     _draw_evaluation_time_background
;
; gas_pumped = 0;
;
	ldx     #$00
	txa
	sta     _gas_pumped
	sta     _gas_pumped+1
;
; for(index = 0; index < gas3; ++index){
;
	sta     _index
L17E7:	lda     _index
	cmp     _gas3
	txa
	sbc     #$00
	bcs     L17E8
;
; gas_pumped += 100;
;
	lda     #$64
	clc
	adc     _gas_pumped
	sta     _gas_pumped
	bcc     L1693
	inc     _gas_pumped+1
;
; for(index = 0; index < gas3; ++index){
;
L1693:	inc     _index
	jmp     L17E7
;
; for(index = 0; index < gas2; ++index){
;
L17E8:	lda     #$00
	sta     _index
L17E9:	lda     _index
	cmp     _gas2
	txa
	sbc     #$00
	bcs     L17EA
;
; gas_pumped += 10;
;
	lda     #$0A
	clc
	adc     _gas_pumped
	sta     _gas_pumped
	bcc     L169E
	inc     _gas_pumped+1
;
; for(index = 0; index < gas2; ++index){
;
L169E:	inc     _index
	jmp     L17E9
;
; gas_pumped += gas1;
;
L17EA:	lda     _gas1
	clc
	adc     _gas_pumped
	sta     _gas_pumped
	lda     #$00
	adc     _gas_pumped+1
	sta     _gas_pumped+1
;
; for(index = 0; index < gas_goal; ++index){
;
	lda     #$00
	sta     _index
L17EB:	lda     _index
	cmp     _gas_goal
	txa
	sbc     _gas_goal+1
	bcs     L16A2
;
; gas_goal_hundreds += 100;
;
	lda     #$64
	clc
	adc     _gas_goal_hundreds
	sta     _gas_goal_hundreds
	bcc     L16AB
	inc     _gas_goal_hundreds+1
;
; for(index = 0; index < gas_goal; ++index){
;
L16AB:	inc     _index
	jmp     L17EB
;
; one_vram_buffer(gas_goal+48, NTADR_A(21,2));
;
L16A2:	lda     _gas_goal
	clc
	adc     #$30
	jsr     pusha
	ldx     #$20
	lda     #$55
	jsr     _one_vram_buffer
;
; multi_vram_buffer_horz(".00 G", 5, NTADR_A(22,2)); 
;
	jsr     decsp3
	lda     #<(L16B6)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L16B6)
	sta     (sp),y
	lda     #$05
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$56
	jsr     _multi_vram_buffer_horz
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; multi_vram_buffer_horz(">>>", 3, NTADR_A(21,6)); 
;
	jsr     decsp3
	lda     #<(L16C1)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L16C1)
	sta     (sp),y
	lda     #$03
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$D5
	jsr     _multi_vram_buffer_horz
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; one_vram_buffer(gas3+48, NTADR_A(21,8));
;
	lda     _gas3
	clc
	adc     #$30
	jsr     pusha
	ldx     #$21
	lda     #$15
	jsr     _one_vram_buffer
;
; one_vram_buffer('.', NTADR_A(22,8));
;
	lda     #$2E
	jsr     pusha
	ldx     #$21
	lda     #$16
	jsr     _one_vram_buffer
;
; one_vram_buffer(gas2+48, NTADR_A(23,8));
;
	lda     _gas2
	clc
	adc     #$30
	jsr     pusha
	ldx     #$21
	lda     #$17
	jsr     _one_vram_buffer
;
; one_vram_buffer(gas1+48, NTADR_A(24,8));
;
	lda     _gas1
	clc
	adc     #$30
	jsr     pusha
	ldx     #$21
	lda     #$18
	jsr     _one_vram_buffer
;
; one_vram_buffer('G', NTADR_A(26,8));
;
	lda     #$47
	jsr     pusha
	ldx     #$21
	lda     #$1A
	jsr     _one_vram_buffer
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; multi_vram_buffer_horz("NONE", 4, NTADR_A(21,10)); 
;
	jsr     decsp3
	lda     #<(L16F8)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L16F8)
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$55
	jsr     _multi_vram_buffer_horz
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; if(gas_pumped > gas_goal_hundreds + 5){
;
	lda     _gas_pumped
	ldx     _gas_pumped+1
	jsr     pushax
	lda     _gas_goal_hundreds
	ldx     _gas_goal_hundreds+1
	clc
	adc     #$05
	bcc     L1704
	inx
L1704:	jsr     tosicmp
	bcc     L1702
	beq     L1702
;
; multi_vram_buffer_horz("Bit too much, bub.", 18, NTADR_A(2,18)); 
;
	jsr     decsp3
	lda     #<(L1706)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1706)
	sta     (sp),y
	lda     #$12
	ldy     #$00
	sta     (sp),y
	ldx     #$22
	lda     #$42
;
; } else if (gas_pumped >= gas_goal_hundreds-5){
;
	jmp     L17EC
L1702:	lda     _gas_pumped
	ldx     _gas_pumped+1
	jsr     pushax
	lda     _gas_goal_hundreds
	ldx     _gas_goal_hundreds+1
	sec
	sbc     #$05
	bcs     L1713
	dex
L1713:	jsr     tosicmp
	bcc     L1711
;
; ++levels_complete;
;
	inc     _levels_complete
;
; multi_vram_buffer_horz("!!! WOW !!!", 11, NTADR_A(2,18)); 
;
	jsr     decsp3
	lda     #<(L1716)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1716)
	sta     (sp),y
	lda     #$0B
	ldy     #$00
	sta     (sp),y
	ldx     #$22
	lda     #$42
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz("You've got it kid", 17, NTADR_A(2,20)); 
;
	jsr     decsp3
	lda     #<(L1720)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1720)
	sta     (sp),y
	lda     #$11
;
; } else if (gas_pumped >= gas_goal_hundreds-100){
;
	jmp     L17F0
L1711:	lda     _gas_pumped
	ldx     _gas_pumped+1
	jsr     pushax
	lda     _gas_goal_hundreds
	ldx     _gas_goal_hundreds+1
	sec
	sbc     #$64
	bcs     L172D
	dex
L172D:	jsr     tosicmp
	bcc     L172B
;
; multi_vram_buffer_horz("Hmmmmm....", 10, NTADR_A(2,18)); 
;
	jsr     decsp3
	lda     #<(L172F)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L172F)
	sta     (sp),y
	lda     #$0A
	ldy     #$00
	sta     (sp),y
	ldx     #$22
	lda     #$42
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz("Pump harder.", 12, NTADR_A(2,20)); 
;
	jsr     decsp3
	lda     #<(L1739)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1739)
	sta     (sp),y
	lda     #$0C
;
; } else {
;
	jmp     L17F0
;
; multi_vram_buffer_horz("You just don't", 14, NTADR_A(2,18)); 
;
L172B:	jsr     decsp3
	lda     #<(L1745)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1745)
	sta     (sp),y
	lda     #$0E
	ldy     #$00
	sta     (sp),y
	ldx     #$22
	lda     #$42
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz("have what it takes", 18, NTADR_A(2,20)); 
;
	jsr     decsp3
	lda     #<(L174F)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L174F)
	sta     (sp),y
	lda     #$12
L17F0:	ldy     #$00
	sta     (sp),y
	ldx     #$22
	lda     #$82
L17EC:	jsr     _multi_vram_buffer_horz
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; ppu_on_all(); // turn on screen
;
	jsr     _ppu_on_all
;
; game_mode=MODE_TALKING_TIME;
;
	lda     #$06
	sta     _game_mode
;
; game_level=LEVEL_ONE_COMPLETE;
;
	lda     #$01
	sta     _game_level
;
; } 
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_number_as_bg_tile (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_number_as_bg_tile: near

.segment	"CODE"

;
; switch(num_holder) {
;
	lda     _num_holder
;
; }
;
	jeq     L1596
	cmp     #$01
	beq     L12EA
	cmp     #$02
	jeq     L1336
	cmp     #$03
	jeq     L1382
	cmp     #$04
	jeq     L13CE
	cmp     #$05
	jeq     L141A
	cmp     #$06
	jeq     L1466
	cmp     #$07
	jeq     L14B2
	cmp     #$08
	jeq     L14FE
	cmp     #$09
	jeq     L154A
	rts
;
; one_vram_buffer(0xc0, NTADR_A(x,y));
;
L12EA:	lda     #$C0
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xc1, NTADR_A(x+1,y));
;
	lda     #$C1
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L12FB
	inx
L12FB:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xd0, NTADR_A(x, y+1));
;
	lda     #$D0
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L1303
	inx
L1303:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xd1, NTADR_A(x+1, y+1));
;
	lda     #$D1
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L130C
	inx
L130C:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L130E
	inx
L130E:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xe0, NTADR_A(x,y+2));
;
	lda     #$E0
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L1316
	inx
L1316:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xe1, NTADR_A(x+1,y+2));
;
	lda     #$E1
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L131F
	inx
L131F:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L1321
	inx
L1321:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xf0, NTADR_A(x,y+3));
;
	lda     #$F0
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L1329
	inx
L1329:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xf1, NTADR_A(x+1,y+3));
;
	lda     #$F1
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L1332
	inx
L1332:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L1334
	inx
L1334:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jmp     _one_vram_buffer
;
; one_vram_buffer(0xc2, NTADR_A(x,y));
;
L1336:	lda     #$C2
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xc3, NTADR_A(x+1,y));
;
	lda     #$C3
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L1347
	inx
L1347:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xd2, NTADR_A(x, y+1));
;
	lda     #$D2
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L134F
	inx
L134F:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xd3, NTADR_A(x+1, y+1));
;
	lda     #$D3
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L1358
	inx
L1358:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L135A
	inx
L135A:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xe2, NTADR_A(x,y+2));
;
	lda     #$E2
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L1362
	inx
L1362:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xe3, NTADR_A(x+1,y+2));
;
	lda     #$E3
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L136B
	inx
L136B:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L136D
	inx
L136D:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xf2, NTADR_A(x,y+3));
;
	lda     #$F2
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L1375
	inx
L1375:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xf3, NTADR_A(x+1,y+3));
;
	lda     #$F3
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L137E
	inx
L137E:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L1380
	inx
L1380:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jmp     _one_vram_buffer
;
; one_vram_buffer(0xc4, NTADR_A(x,y));
;
L1382:	lda     #$C4
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xc5, NTADR_A(x+1,y));
;
	lda     #$C5
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L1393
	inx
L1393:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xd4, NTADR_A(x, y+1));
;
	lda     #$D4
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L139B
	inx
L139B:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xd5, NTADR_A(x+1, y+1));
;
	lda     #$D5
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L13A4
	inx
L13A4:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L13A6
	inx
L13A6:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xe4, NTADR_A(x,y+2));
;
	lda     #$E4
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L13AE
	inx
L13AE:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xe5, NTADR_A(x+1,y+2));
;
	lda     #$E5
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L13B7
	inx
L13B7:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L13B9
	inx
L13B9:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xf4, NTADR_A(x,y+3));
;
	lda     #$F4
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L13C1
	inx
L13C1:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xf5, NTADR_A(x+1,y+3));
;
	lda     #$F5
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L13CA
	inx
L13CA:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L13CC
	inx
L13CC:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jmp     _one_vram_buffer
;
; one_vram_buffer(0xc6, NTADR_A(x,y));
;
L13CE:	lda     #$C6
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xc7, NTADR_A(x+1,y));
;
	lda     #$C7
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L13DF
	inx
L13DF:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xd6, NTADR_A(x, y+1));
;
	lda     #$D6
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L13E7
	inx
L13E7:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xd7, NTADR_A(x+1, y+1));
;
	lda     #$D7
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L13F0
	inx
L13F0:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L13F2
	inx
L13F2:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xe6, NTADR_A(x,y+2));
;
	lda     #$E6
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L13FA
	inx
L13FA:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xe7, NTADR_A(x+1,y+2));
;
	lda     #$E7
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L1403
	inx
L1403:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L1405
	inx
L1405:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xf6, NTADR_A(x,y+3));
;
	lda     #$F6
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L140D
	inx
L140D:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xf7, NTADR_A(x+1,y+3));
;
	lda     #$F7
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L1416
	inx
L1416:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L1418
	inx
L1418:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jmp     _one_vram_buffer
;
; one_vram_buffer(0xc8, NTADR_A(x,y));
;
L141A:	lda     #$C8
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xc9, NTADR_A(x+1,y));
;
	lda     #$C9
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L142B
	inx
L142B:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xd8, NTADR_A(x, y+1));
;
	lda     #$D8
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L1433
	inx
L1433:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xd9, NTADR_A(x+1, y+1));
;
	lda     #$D9
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L143C
	inx
L143C:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L143E
	inx
L143E:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xe8, NTADR_A(x,y+2));
;
	lda     #$E8
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L1446
	inx
L1446:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xe9, NTADR_A(x+1,y+2));
;
	lda     #$E9
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L144F
	inx
L144F:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L1451
	inx
L1451:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xf8, NTADR_A(x,y+3));
;
	lda     #$F8
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L1459
	inx
L1459:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xf9, NTADR_A(x+1,y+3));
;
	lda     #$F9
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L1462
	inx
L1462:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L1464
	inx
L1464:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jmp     _one_vram_buffer
;
; one_vram_buffer(0xca, NTADR_A(x,y));
;
L1466:	lda     #$CA
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xcb, NTADR_A(x+1,y));
;
	lda     #$CB
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L1477
	inx
L1477:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xda, NTADR_A(x, y+1));
;
	lda     #$DA
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L147F
	inx
L147F:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xdb, NTADR_A(x+1, y+1));
;
	lda     #$DB
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L1488
	inx
L1488:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L148A
	inx
L148A:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xea, NTADR_A(x,y+2));
;
	lda     #$EA
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L1492
	inx
L1492:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xeb, NTADR_A(x+1,y+2));
;
	lda     #$EB
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L149B
	inx
L149B:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L149D
	inx
L149D:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xfa, NTADR_A(x,y+3));
;
	lda     #$FA
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L14A5
	inx
L14A5:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xfb, NTADR_A(x+1,y+3));
;
	lda     #$FB
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L14AE
	inx
L14AE:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L14B0
	inx
L14B0:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jmp     _one_vram_buffer
;
; one_vram_buffer(0xcc, NTADR_A(x,y));
;
L14B2:	lda     #$CC
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xcd, NTADR_A(x+1,y));
;
	lda     #$CD
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L14C3
	inx
L14C3:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xdc, NTADR_A(x, y+1));
;
	lda     #$DC
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L14CB
	inx
L14CB:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xdd, NTADR_A(x+1, y+1));
;
	lda     #$DD
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L14D4
	inx
L14D4:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L14D6
	inx
L14D6:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xec, NTADR_A(x,y+2));
;
	lda     #$EC
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L14DE
	inx
L14DE:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xed, NTADR_A(x+1,y+2));
;
	lda     #$ED
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L14E7
	inx
L14E7:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L14E9
	inx
L14E9:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xfc, NTADR_A(x,y+3));
;
	lda     #$FC
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L14F1
	inx
L14F1:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xfd, NTADR_A(x+1,y+3));
;
	lda     #$FD
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L14FA
	inx
L14FA:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L14FC
	inx
L14FC:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jmp     _one_vram_buffer
;
; one_vram_buffer(0xce, NTADR_A(x,y));
;
L14FE:	lda     #$CE
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xcf, NTADR_A(x+1,y));
;
	lda     #$CF
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L150F
	inx
L150F:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xde, NTADR_A(x, y+1));
;
	lda     #$DE
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L1517
	inx
L1517:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xdf, NTADR_A(x+1, y+1));
;
	lda     #$DF
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L1520
	inx
L1520:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L1522
	inx
L1522:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xee, NTADR_A(x,y+2));
;
	lda     #$EE
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L152A
	inx
L152A:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xef, NTADR_A(x+1,y+2));
;
	lda     #$EF
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L1533
	inx
L1533:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L1535
	inx
L1535:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xfe, NTADR_A(x,y+3));
;
	lda     #$FE
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L153D
	inx
L153D:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0xff, NTADR_A(x+1,y+3));
;
	lda     #$FF
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L1546
	inx
L1546:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L1548
	inx
L1548:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jmp     _one_vram_buffer
;
; one_vram_buffer(0x5e, NTADR_A(x,y));
;
L154A:	lda     #$5E
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x5f, NTADR_A(x+1,y));
;
	lda     #$5F
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L155B
	inx
L155B:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x6e, NTADR_A(x, y+1));
;
	lda     #$6E
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L1563
	inx
L1563:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x6f, NTADR_A(x+1, y+1));
;
	lda     #$6F
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L156C
	inx
L156C:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L156E
	inx
L156E:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x7e, NTADR_A(x,y+2));
;
	lda     #$7E
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L1576
	inx
L1576:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x7f, NTADR_A(x+1,y+2));
;
	lda     #$7F
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L157F
	inx
L157F:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L1581
	inx
L1581:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x8e, NTADR_A(x,y+3));
;
	lda     #$8E
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L1589
	inx
L1589:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x8f, NTADR_A(x+1,y+3));
;
	lda     #$8F
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L1592
	inx
L1592:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L1594
	inx
L1594:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jmp     _one_vram_buffer
;
; one_vram_buffer(0x1e, NTADR_A(x,y));
;
L1596:	lda     #$1E
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x1f, NTADR_A(x+1,y));
;
	lda     #$1F
	jsr     pusha
	ldx     #$00
	lda     _y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L15A7
	inx
L15A7:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x2e, NTADR_A(x, y+1));
;
	lda     #$2E
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L15AF
	inx
L15AF:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x2f, NTADR_A(x+1, y+1));
;
	lda     #$2F
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$01
	bcc     L15B8
	inx
L15B8:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L15BA
	inx
L15BA:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x3e, NTADR_A(x,y+2));
;
	lda     #$3E
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L15C2
	inx
L15C2:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x3f, NTADR_A(x+1,y+2));
;
	lda     #$3F
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$02
	bcc     L15CB
	inx
L15CB:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L15CD
	inx
L15CD:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x4e, NTADR_A(x,y+3));
;
	lda     #$4E
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L15D5
	inx
L15D5:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _x
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x4f, NTADR_A(x+1,y+3));
;
	lda     #$4F
	jsr     pusha
	ldx     #$00
	lda     _y
	clc
	adc     #$03
	bcc     L15DE
	inx
L15DE:	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	lda     _x
	clc
	adc     #$01
	bcc     L15E0
	inx
L15E0:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jmp     _one_vram_buffer

.endproc

; ---------------------------------------------------------------
; void __near__ draw_level_one_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_level_one_sprites: near

.segment	"CODE"

;
; oam_clear();
;
	jsr     _oam_clear
;
; bird_x += 1;
;
	inc     _bird_x
;
; bird_y = 0x20;
;
	lda     #$20
	sta     _bird_y
;
; oam_meta_spr(bird_x,bird_y,Bird);
;
	jsr     decsp2
	lda     _bird_x
	ldy     #$01
	sta     (sp),y
	lda     _bird_y
	dey
	sta     (sp),y
	lda     #<(_Bird)
	ldx     #>(_Bird)
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ draw_talking_time (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_talking_time: near

.segment	"CODE"

;
; temp1 = 0x2044; //vram addr for start of box
;
	lda     #$44
	sta     _temp1
;
; for(temp2 = 0; temp2 < 6; ++temp2){
;
	lda     #$00
	sta     _temp2
L17F1:	lda     _temp2
	cmp     #$06
	bcs     L122A
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; vram_adr(temp1); //Nametable A starting block
;
	lda     _temp1
	ldx     #$00
	jsr     _vram_adr
;
; for(index = 0; index < 9; ++index){
;
	lda     #$00
	sta     _index
L17F2:	lda     _index
	cmp     #$09
	bcs     L1235
;
; vram_put(0x00);
;
	lda     #$00
	jsr     _vram_put
;
; for(index = 0; index < 9; ++index){
;
	inc     _index
	jmp     L17F2
;
; flush_vram_update2();
;
L1235:	jsr     _flush_vram_update2
;
; temp1 += 16;
;
	lda     #$10
	clc
	adc     _temp1
	sta     _temp1
;
; for(temp2 = 0; temp2 < 6; ++temp2){
;
	inc     _temp2
	jmp     L17F1
;
; flush_vram_update2();
;
L122A:	jsr     _flush_vram_update2
;
; talking_time = 1;
;
	lda     #$01
	sta     _talking_time
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_talking_time_background (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_talking_time_background: near

.segment	"CODE"

;
; set_chr_bank_0(TALKING_TIME_CHR);
;
	lda     #$02
	jsr     _set_chr_bank_0
;
; set_chr_bank_1(TALKING_TIME_CHR);
;
	lda     #$02
	jsr     _set_chr_bank_1
;
; pal_bg(talking_time_palete);
;
	lda     #<(_talking_time_palete)
	ldx     #>(_talking_time_palete)
	jsr     _pal_bg
;
; vram_adr(NAMETABLE_A);  
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(TALKING_TIME_LEVEL);
;
	lda     #<(_TALKING_TIME_LEVEL)
	ldx     #>(_TALKING_TIME_LEVEL)
	jmp     _vram_unrle

.endproc

; ---------------------------------------------------------------
; void __near__ draw_evaluation_time_background (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_evaluation_time_background: near

.segment	"CODE"

;
; set_chr_bank_0(TALKING_TIME_CHR);
;
	lda     #$02
	jsr     _set_chr_bank_0
;
; set_chr_bank_1(TALKING_TIME_CHR);
;
	lda     #$02
	jsr     _set_chr_bank_1
;
; pal_bg(talking_time_palete);
;
	lda     #<(_talking_time_palete)
	ldx     #>(_talking_time_palete)
	jsr     _pal_bg
;
; vram_adr(NAMETABLE_A);  
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(EVALUATION);
;
	lda     #<(_EVALUATION)
	ldx     #>(_EVALUATION)
	jmp     _vram_unrle

.endproc

; ---------------------------------------------------------------
; void __near__ draw_talking_time_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_talking_time_sprites: near

.segment	"CODE"

;
; oam_meta_spr(0xb0, 0xc0, BigAlsShirt);
;
	jsr     decsp2
	lda     #$B0
	ldy     #$01
	sta     (sp),y
	lda     #$C0
	dey
	sta     (sp),y
	lda     #<(_BigAlsShirt)
	ldx     #>(_BigAlsShirt)
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ clear_background (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_clear_background: near

.segment	"CODE"

;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; for(tempint = 0; tempint < 960; ++tempint){
;
	lda     #$00
	sta     _tempint
	sta     _tempint+1
L1209:	lda     _tempint
	cmp     #$C0
	lda     _tempint+1
	sbc     #$03
	bvc     L1210
	eor     #$80
L1210:	bpl     L120A
;
; vram_put(0x00);
;
	lda     #$00
	jsr     _vram_put
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; for(tempint = 0; tempint < 960; ++tempint){
;
	inc     _tempint
	bne     L1209
	inc     _tempint+1
	jmp     L1209
;
; }
;
L120A:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ white_background (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_white_background: near

.segment	"CODE"

;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; for(tempint = 0; tempint < 960; ++tempint){
;
	lda     #$00
	sta     _tempint
	sta     _tempint+1
L1219:	lda     _tempint
	cmp     #$C0
	lda     _tempint+1
	sbc     #$03
	bvc     L1220
	eor     #$80
L1220:	bpl     L121A
;
; vram_put(0x03);
;
	lda     #$03
	jsr     _vram_put
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; for(tempint = 0; tempint < 960; ++tempint){
;
	inc     _tempint
	bne     L1219
	inc     _tempint+1
	jmp     L1219
;
; }
;
L121A:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ reset_game_variables (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_reset_game_variables: near

.segment	"CODE"

;
; gas1 = gas2 = gas3 = gas4 = gas5 = 0;
;
	lda     #$00
	sta     _gas5
	sta     _gas4
	sta     _gas3
	sta     _gas2
	sta     _gas1
;
; cost1 = cost2 = cost3 = cost4 = cost5 = 0;
;
	sta     _cost5
	sta     _cost4
	sta     _cost3
	sta     _cost2
	sta     _cost1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ wait_a_little (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_wait_a_little: near

.segment	"CODE"

;
; for(index=0; index < 25; ++index){
;
	lda     #$00
	sta     _index
L17F3:	lda     _index
	cmp     #$19
	bcs     L17D2
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; for(index=0; index < 25; ++index){
;
	inc     _index
	jmp     L17F3
;
; }
;
L17D2:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_title_background (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_title_background: near

.segment	"CODE"

;
; clear_background();
;
	jsr     _clear_background
;
; multi_vram_buffer_horz("G.A.S.", 6, NTADR_A(12,4)); 
;
	jsr     decsp3
	lda     #<(L1643)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1643)
	sta     (sp),y
	lda     #$06
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$8C
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz("Gas Attendant Simulator", 23, NTADR_A(5,6)); 
;
	jsr     decsp3
	lda     #<(L164D)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L164D)
	sta     (sp),y
	lda     #$17
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$C5
	jsr     _multi_vram_buffer_horz
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; multi_vram_buffer_horz("Start", 5, NTADR_A(12,17)); 
;
	jsr     decsp3
	lda     #<(L1658)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1658)
	sta     (sp),y
	lda     #$05
	ldy     #$00
	sta     (sp),y
	ldx     #$22
	lda     #$2C
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz("Options", 7, NTADR_A(12,19)); 
;
	jsr     decsp3
	lda     #<(L1662)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1662)
	sta     (sp),y
	lda     #$07
	ldy     #$00
	sta     (sp),y
	ldx     #$22
	lda     #$6C
	jsr     _multi_vram_buffer_horz
;
; flush_vram_update2();
;
	jmp     _flush_vram_update2

.endproc

; ---------------------------------------------------------------
; void __near__ init_mode_intro_text (void)
; ---------------------------------------------------------------

.segment	"BANK0"

.proc	_init_mode_intro_text: near

.segment	"BANK0"

;
; nametable_index = 0;
;
	lda     #$00
	sta     _nametable_index
	sta     _nametable_index+1
;
; scrolled_past_once = 0;
;
	sta     _scrolled_past_once
;
; stop_scrolling = 0;
;
	sta     _stop_scrolling
;
; moveframes = 0;
;
	sta     _moveframes
;
; line_counter = 0;
;
	sta     _line_counter
;
; scroll(0,0); //reset scrolling
;
	jsr     push0
	jsr     _scroll
;
; set_mirroring(MIRROR_HORIZONTAL);
;
	lda     #$03
	jsr     _set_mirroring
;
; ppu_off();  // screen off
;
	jsr     _ppu_off
;
; oam_clear(); // clear all sprites
;
	jsr     _oam_clear
;
; pal_bg(intro_cutscene_palette);
;
	lda     #<(_intro_cutscene_palette)
	ldx     #>(_intro_cutscene_palette)
	jsr     _pal_bg
;
; set_chr_bank_0(INTRO_CHR);
;
	lda     #$04
	jsr     _set_chr_bank_0
;
; set_chr_bank_1(TALKING_TIME_CHR);
;
	lda     #$02
	jsr     _set_chr_bank_1
;
; vram_adr(NAMETABLE_C);
;
	ldx     #$28
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(EVALUATION);
;
	lda     #<(_EVALUATION)
	ldx     #>(_EVALUATION)
	jsr     _vram_unrle
;
; ppu_on_all(); // turn on screen
;
	jsr     _ppu_on_all
;
; game_mode = MODE_INTRO_TEXT;
;
	lda     #$03
	sta     _game_mode
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ mode_intro_text (void)
; ---------------------------------------------------------------

.segment	"BANK0"

.proc	_mode_intro_text: near

.segment	"BANK0"

;
; ++moveframes;
;
	inc     _moveframes
;
; ++line_counter;
;
	inc     _line_counter
;
; if(stop_scrolling == 0 && moveframes > 0){
;
	lda     _stop_scrolling
	jne     L17FF
	lda     _moveframes
	jeq     L17FF
;
; scroll_y += 1;
;
	inc     _scroll_y
	bne     L0FD6
	inc     _scroll_y+1
;
; if(scrolled_past_once == 1 && scroll_y > 0x1df){
;
L0FD6:	lda     _scrolled_past_once
	cmp     #$01
	bne     L17F8
	lda     _scroll_y
	cmp     #$E0
	lda     _scroll_y+1
	sbc     #$01
	bcc     L17F8
;
; stop_scrolling = 1;
;
	lda     #$01
	sta     _stop_scrolling
;
; moveframes=0;
;
	lda     #$00
	sta     _moveframes
;
; if( line_counter == 8 && nametable_index < 1024){ // after we've scrolled 8 lines down, let's draw the next line in the nametable.
;
L17F8:	lda     _line_counter
	cmp     #$08
	bne     L0FDF
	lda     _nametable_index
	cmp     #$00
	lda     _nametable_index+1
	sbc     #$04
	bvc     L0FE2
	eor     #$80
L0FE2:	bpl     L0FDF
;
; for(index = 0; index < 32; ++index){
;
	lda     #$00
	sta     _index
L17FB:	lda     _index
	cmp     #$20
	bcs     L17FC
;
; one_vram_buffer(0x0, cutscene_index);
;
	lda     #$00
	jsr     pusha
	lda     _cutscene_index
	ldx     _cutscene_index+1
	jsr     _one_vram_buffer
;
; ++nametable_index;
;
	inc     _nametable_index
	bne     L0FF0
	inc     _nametable_index+1
;
; ++cutscene_index;
;
L0FF0:	inc     _cutscene_index
	bne     L0FF2
	inc     _cutscene_index+1
;
; for(index = 0; index < 32; ++index){
;
L0FF2:	inc     _index
	jmp     L17FB
;
; line_counter = 0;
;
L17FC:	lda     #$00
	sta     _line_counter
;
; if(scroll_y == 0x0ff){
;
L0FDF:	lda     _scroll_y+1
	bne     L0FF5
	lda     _scroll_y
	cmp     #$FF
	bne     L0FF5
;
; scrolled_past_once = 1;
;
	lda     #$01
	sta     _scrolled_past_once
;
; if(scroll_y > 0x1df) {
;
L0FF5:	lda     _scroll_y
	cmp     #$E0
	lda     _scroll_y+1
	sbc     #$01
	lda     #$00
	bcc     L17FE
;
; scroll_y = 0;
;
	sta     _scroll_y
	sta     _scroll_y+1
;
; scroll(0,scroll_y);
;
L17FE:	jsr     push0
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _scroll
;
; moveframes = 0;
;
	lda     #$00
	sta     _moveframes
;
; if(stop_scrolling == 1 && moveframes == 20){
;
L17FF:	lda     _stop_scrolling
	cmp     #$01
	bne     L1800
	lda     _moveframes
	cmp     #$14
	beq     L1801
L1800:	rts
;
; pal_fade_to(4,0);
;
L1801:	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _pal_fade_to
;
; init_mode_intro_cutscene();
;
	jmp     _init_mode_intro_cutscene

.endproc

; ---------------------------------------------------------------
; void __near__ mode_intro_cutscene (void)
; ---------------------------------------------------------------

.segment	"BANK0"

.proc	_mode_intro_cutscene: near

.segment	"BANK0"

;
; ++moveframes;
;
	inc     _moveframes
;
; ++line_counter;
;
	inc     _line_counter
;
; if(stop_scrolling == 0 && moveframes > 0){
;
	lda     _stop_scrolling
	jne     L180D
	lda     _moveframes
	jeq     L180D
;
; scroll_y += 1;
;
	inc     _scroll_y
	bne     L1014
	inc     _scroll_y+1
;
; if(scrolled_past_once == 1 && scroll_y > 0x1df){
;
L1014:	lda     _scrolled_past_once
	cmp     #$01
	bne     L1806
	lda     _scroll_y
	cmp     #$E0
	lda     _scroll_y+1
	sbc     #$01
	bcc     L1806
;
; stop_scrolling = 1;
;
	lda     #$01
	sta     _stop_scrolling
;
; moveframes=0;
;
	lda     #$00
	sta     _moveframes
;
; if( line_counter == 8 && nametable_index < 1024){ // after we've scrolled 8 lines down, let's draw the next line in the nametable.
;
L1806:	lda     _line_counter
	cmp     #$08
	bne     L101D
	lda     _nametable_index
	cmp     #$00
	lda     _nametable_index+1
	sbc     #$04
	bvc     L1020
	eor     #$80
L1020:	bpl     L101D
;
; for(index = 0; index < 32; ++index){
;
	lda     #$00
	sta     _index
L1809:	lda     _index
	cmp     #$20
	bcs     L180A
;
; one_vram_buffer(bottomdata[nametable_index], cutscene_index);
;
	lda     #<(_bottomdata)
	sta     ptr1
	lda     #>(_bottomdata)
	clc
	adc     _nametable_index+1
	sta     ptr1+1
	ldy     _nametable_index
	lda     (ptr1),y
	jsr     pusha
	lda     _cutscene_index
	ldx     _cutscene_index+1
	jsr     _one_vram_buffer
;
; ++nametable_index;
;
	inc     _nametable_index
	bne     L102F
	inc     _nametable_index+1
;
; ++cutscene_index;
;
L102F:	inc     _cutscene_index
	bne     L1031
	inc     _cutscene_index+1
;
; for(index = 0; index < 32; ++index){
;
L1031:	inc     _index
	jmp     L1809
;
; line_counter = 0;
;
L180A:	lda     #$00
	sta     _line_counter
;
; if(scroll_y == 0x0ff){
;
L101D:	lda     _scroll_y+1
	bne     L1034
	lda     _scroll_y
	cmp     #$FF
	bne     L1034
;
; scrolled_past_once = 1;
;
	lda     #$01
	sta     _scrolled_past_once
;
; if(scroll_y > 0x1df) {
;
L1034:	lda     _scroll_y
	cmp     #$E0
	lda     _scroll_y+1
	sbc     #$01
	lda     #$00
	bcc     L180C
;
; scroll_y = 0;
;
	sta     _scroll_y
	sta     _scroll_y+1
;
; scroll(0,scroll_y);
;
L180C:	jsr     push0
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _scroll
;
; moveframes = 0;
;
	lda     #$00
	sta     _moveframes
;
; if(stop_scrolling == 1 && moveframes == 100){
;
L180D:	lda     _stop_scrolling
	cmp     #$01
	bne     L180E
	lda     _moveframes
	cmp     #$64
	beq     L180F
L180E:	rts
;
; init_mode_intro_instructions();
;
L180F:	jmp     _init_mode_intro_instructions

.endproc

; ---------------------------------------------------------------
; void __near__ init_mode_instructions (void)
; ---------------------------------------------------------------

.segment	"BANK1"

.proc	_init_mode_instructions: near

.segment	"BANK1"

;
; ppu_off();  // screen off
;
	jsr     _ppu_off
;
; oam_clear(); // clear all sprites
;
	jsr     _oam_clear
;
; clear_background();
;
	jsr     _clear_background
;
; reset_game_variables();
;
	jsr     _reset_game_variables
;
; draw_talking_time_background();
;
	jsr     _draw_talking_time_background
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; index = get_frame_count() & 3; // returns 0,1,2,3
;
	jsr     _get_frame_count
	and     #$03
	sta     _index
;
; gas_goal = gas_goal_array[index];
;
	ldy     _index
	lda     #$00
	sta     _gas_goal+1
	lda     _gas_goal_array,y
	sta     _gas_goal
;
; switch (levels_complete)
;
	lda     _levels_complete
;
; }
;
	beq     L105A
	cmp     #$01
	jeq     L1091
	cmp     #$02
	jeq     L10BD
	jmp     L1058
;
; multi_vram_buffer_horz("So you wanna pump gas?!?", 24, NTADR_A(3,6)); 
;
L105A:	jsr     decsp3
	lda     #<(L105C)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L105C)
	sta     (sp),y
	lda     #$18
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$C3
	jsr     _multi_vram_buffer_horz
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; multi_vram_buffer_horz("Give me X gallons!", 18, NTADR_A(3,9)); 
;
	jsr     decsp3
	lda     #<(L1067)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1067)
	sta     (sp),y
	lda     #$12
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$23
	jsr     _multi_vram_buffer_horz
;
; one_vram_buffer(gas_goal+48, NTADR_A(11,9));
;
	lda     _gas_goal
	clc
	adc     #$30
	jsr     pusha
	ldx     #$21
	lda     #$2B
	jsr     _one_vram_buffer
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; multi_vram_buffer_horz("Pull the trigger", 24, NTADR_A(2,20)); 
;
	jsr     decsp3
	lda     #<(L107B)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L107B)
	sta     (sp),y
	lda     #$18
	ldy     #$00
	sta     (sp),y
	ldx     #$22
	lda     #$82
	jsr     _multi_vram_buffer_horz
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; multi_vram_buffer_horz("But don't click it", 18, NTADR_A(2,22)); 
;
	jsr     decsp3
	lda     #<(L1086)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1086)
	sta     (sp),y
	lda     #$12
	ldy     #$00
	sta     (sp),y
	ldx     #$22
	lda     #$C2
;
; break;
;
	jmp     L1811
;
; multi_vram_buffer_horz("You're starting to believe", 26, NTADR_A(3,6)); 
;
L1091:	jsr     decsp3
	lda     #<(L1093)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L1093)
	sta     (sp),y
	lda     #$1A
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$C3
	jsr     _multi_vram_buffer_horz
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; multi_vram_buffer_horz("Now give me X gallons!", 22, NTADR_A(3,9)); 
;
	jsr     decsp3
	lda     #<(L109E)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L109E)
	sta     (sp),y
	lda     #$16
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$23
	jsr     _multi_vram_buffer_horz
;
; one_vram_buffer(gas_goal+48, NTADR_A(15,9));
;
	lda     _gas_goal
	clc
	adc     #$30
	jsr     pusha
	ldx     #$21
	lda     #$2F
	jsr     _one_vram_buffer
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; multi_vram_buffer_horz("And make it quick", 18, NTADR_A(3,12)); 
;
	jsr     decsp3
	lda     #<(L10B2)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L10B2)
	sta     (sp),y
	lda     #$12
;
; break;
;
	jmp     L1815
;
; multi_vram_buffer_horz("I can't deny, you were", 22, NTADR_A(3,6)); 
;
L10BD:	jsr     decsp3
	lda     #<(L10BF)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L10BF)
	sta     (sp),y
	lda     #$16
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$C3
	jsr     _multi_vram_buffer_horz
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; multi_vram_buffer_horz("born to do this.", 17, NTADR_A(3,7)); 
;
	jsr     decsp3
	lda     #<(L10CA)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L10CA)
	sta     (sp),y
	lda     #$11
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$E3
	jsr     _multi_vram_buffer_horz
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; multi_vram_buffer_horz("But can you do X gallons?", 25, NTADR_A(3,9)); 
;
	jsr     decsp3
	lda     #<(L10D5)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L10D5)
	sta     (sp),y
	lda     #$19
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$23
	jsr     _multi_vram_buffer_horz
;
; one_vram_buffer(gas_goal+48, NTADR_A(18,9));
;
	lda     _gas_goal
	clc
	adc     #$30
	jsr     pusha
	ldx     #$21
	lda     #$32
	jsr     _one_vram_buffer
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; multi_vram_buffer_horz("I'm watching closely...", 23, NTADR_A(3,12)); 
;
	jsr     decsp3
	lda     #<(L10E9)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L10E9)
	sta     (sp),y
	lda     #$17
L1815:	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$83
L1811:	jsr     _multi_vram_buffer_horz
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; ppu_on_all(); // turn on screen
;
L1058:	jsr     _ppu_on_all
;
; game_mode = MODE_INTRO_INSTRUCTION;
;
	lda     #$05
	sta     _game_mode
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; moveframes =0;
;
	lda     #$00
	sta     _moveframes
;
; pal_bg(background_pal); // load the palette
;
	lda     #<(_background_pal)
	ldx     #>(_background_pal)
	jsr     _pal_bg
;
; pal_spr(pal2); // load the palette
;
	lda     #<(_pal2)
	ldx     #>(_pal2)
	jsr     _pal_spr
;
; pal_col(0,0x0D);
;
	lda     #$00
	jsr     pusha
	lda     #$0D
	jsr     _pal_col
;
; bank_spr(1); // sprites use the 2nd tileset
;
	lda     #$01
	jsr     _bank_spr
;
; set_scroll_y(0xff); // shift the bg down 1 pixel
;
	ldx     #$00
	lda     #$FF
	jsr     _set_scroll_y
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; ppu_wait_nmi(); // wait
;
	jsr     _ppu_wait_nmi
;
; set_vram_buffer(); // points ppu update to vram_buffer, do this at least once
;
	jsr     _set_vram_buffer
;
; ppu_on_all(); // turn on screen
;
	jsr     _ppu_on_all
;
; init_mode_title();
;
	jsr     _init_mode_title
;
; if(game_mode == MODE_TITLE){
;
L1818:	lda     _game_mode
	jne     L181A
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; read_input();
;
	jsr     _read_input
;
; if(option == 0){
;
	lda     _option
	bne     L1116
;
; one_vram_buffer(0x3d, NTADR_A(10,17));
;
	lda     #$3D
	jsr     pusha
	ldx     #$22
	lda     #$2A
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x3f, NTADR_A(10,19));
;
	lda     #$3F
;
; } else {
;
	jmp     L182B
;
; one_vram_buffer(0x3f, NTADR_A(10,17));
;
L1116:	lda     #$3F
	jsr     pusha
	ldx     #$22
	lda     #$2A
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x3d, NTADR_A(10,19));
;
	lda     #$3D
L182B:	jsr     pusha
	ldx     #$22
	lda     #$6A
	jsr     _one_vram_buffer
;
; if (trigger_clicked) //if((pad2_zapper)&&(zapper_ready)){
;
	lda     _trigger_clicked
	beq     L181A
;
; oam_clear();
;
	jsr     _oam_clear
;
; ppu_mask(0x16); // BG off, won't happen till NEXT frame
;
	lda     #$16
	jsr     _ppu_mask
;
; ppu_wait_nmi(); // wait till the top of the next frame
;
	jsr     _ppu_wait_nmi
;
; oam_clear(); // clear the NEXT frame
;
	jsr     _oam_clear
;
; ppu_mask(0x1e); // bg on, won't happen till NEXT frame
;
	lda     #$1E
	jsr     _ppu_mask
;
; if(trigger_hit){
;
	lda     _trigger_hit
	beq     L114A
;
; if(option == 0){
;
	lda     _option
	bne     L1144
;
; wait_a_little();
;
	jsr     _wait_a_little
;
; banked_call(BANK_0, init_mode_intro_text);
;
	lda     #$00
	jsr     pusha
	lda     #<(_init_mode_intro_text)
	ldx     #>(_init_mode_intro_text)
	jsr     _banked_call
;
; } else {
;
	jmp     L114A
;
; multi_vram_buffer_horz("No Options Mode yet", 19, NTADR_A(6, 21));
;
L1144:	jsr     decsp3
	lda     #<(L114C)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L114C)
	sta     (sp),y
	lda     #$13
	ldy     #$00
	sta     (sp),y
	ldx     #$22
	lda     #$A6
	jsr     _multi_vram_buffer_horz
;
; if(trigger_miss){
;
L114A:	lda     _trigger_miss
	beq     L181A
;
; if(option == 0){
;
	lda     _option
	bne     L1819
;
; option = 1;
;
	lda     #$01
;
; } else {
;
	jmp     L1817
;
; option = 0;
;
L1819:	lda     #$00
L1817:	sta     _option
;
; if(game_mode == MODE_INTRO_TEXT){
;
L181A:	lda     _game_mode
	cmp     #$03
	bne     L181B
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; banked_call(BANK_0, mode_intro_text);
;
	lda     #$00
	jsr     pusha
	lda     #<(_mode_intro_text)
	ldx     #>(_mode_intro_text)
	jsr     _banked_call
;
; read_input();
;
	jsr     _read_input
;
; if (trigger_clicked) //allow cutscene to be skipped
;
	lda     _trigger_clicked
	beq     L181B
;
; wait_a_little();
;
	jsr     _wait_a_little
;
; set_scroll_y(0);
;
	ldx     #$00
	txa
	jsr     _set_scroll_y
;
; banked_call(BANK_0, init_mode_intro_cutscene);
;
	lda     #$00
	jsr     pusha
	lda     #<(_init_mode_intro_cutscene)
	ldx     #>(_init_mode_intro_cutscene)
	jsr     _banked_call
;
; if(game_mode == MODE_INTRO_CUTSCENE){
;
L181B:	lda     _game_mode
	cmp     #$04
	bne     L181C
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; banked_call(BANK_0, mode_intro_cutscene);
;
	lda     #$00
	jsr     pusha
	lda     #<(_mode_intro_cutscene)
	ldx     #>(_mode_intro_cutscene)
	jsr     _banked_call
;
; read_input();
;
	jsr     _read_input
;
; if (trigger_clicked) //allow cutscene to be skipped
;
	lda     _trigger_clicked
	beq     L181C
;
; wait_a_little();
;
	jsr     _wait_a_little
;
; set_scroll_y(0);
;
	ldx     #$00
	txa
	jsr     _set_scroll_y
;
; banked_call(BANK_1, init_mode_instructions);
;
	lda     #$01
	jsr     pusha
	lda     #<(_init_mode_instructions)
	ldx     #>(_init_mode_instructions)
	jsr     _banked_call
;
; if(game_mode == MODE_INTRO_INSTRUCTION){
;
L181C:	lda     _game_mode
	cmp     #$05
	bne     L181D
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; if(moveframes > 60){
;
	lda     _moveframes
	cmp     #$3D
	bcc     L117F
;
; moveframes = 0;
;
	lda     #$00
	sta     _moveframes
;
; oam_clear(); // clear all sprites
;
L117F:	jsr     _oam_clear
;
; read_input();
;
	jsr     _read_input
;
; if (trigger_clicked)
;
	lda     _trigger_clicked
	beq     L181D
;
; pal_fade_to(4,0);
;
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _pal_fade_to
;
; wait_a_little();
;
	jsr     _wait_a_little
;
; init_mode_game();
;
	jsr     _init_mode_game
;
; if(game_mode == MODE_TALKING_TIME){
;
L181D:	lda     _game_mode
	cmp     #$06
	jne     L1826
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; ++moveframes;
;
	inc     _moveframes
;
; if(moveframes > 60){
;
	lda     _moveframes
	cmp     #$3D
	bcc     L1190
;
; moveframes = 0;
;
	lda     #$00
	sta     _moveframes
;
; oam_clear(); // clear all sprites
;
L1190:	jsr     _oam_clear
;
; oam_meta_spr(0xa8, 0xb8, BigAlsShirt);
;
	jsr     decsp2
	lda     #$A8
	ldy     #$01
	sta     (sp),y
	lda     #$B8
	dey
	sta     (sp),y
	lda     #<(_BigAlsShirt)
	ldx     #>(_BigAlsShirt)
	jsr     _oam_meta_spr
;
; oam_meta_spr(0xb8, 0x98, BigAlsEyes);
;
	jsr     decsp2
	lda     #$B8
	ldy     #$01
	sta     (sp),y
	lda     #$98
	dey
	sta     (sp),y
	lda     #<(_BigAlsEyes)
	ldx     #>(_BigAlsEyes)
	jsr     _oam_meta_spr
;
; if(moveframes >= 0 && moveframes < 30){
;
	lda     _moveframes
	cmp     #$1E
	bcs     L181F
;
; oam_meta_spr(0xb0, 0xaf, BigAlTalkClosedMouth);
;
	jsr     decsp2
	lda     #$B0
	ldy     #$01
	sta     (sp),y
	lda     #$AF
	dey
	sta     (sp),y
	lda     #<(_BigAlTalkClosedMouth)
	ldx     #>(_BigAlTalkClosedMouth)
	jsr     _oam_meta_spr
;
; if(moveframes >= 30 && moveframes < 61){
;
L181F:	lda     _moveframes
	cmp     #$1E
	bcc     L11A5
	cmp     #$3D
	bcs     L11A5
;
; oam_meta_spr(0xb0, 0xaf, BigAlTalkMidMouth);
;
	jsr     decsp2
	lda     #$B0
	ldy     #$01
	sta     (sp),y
	lda     #$AF
	dey
	sta     (sp),y
	lda     #<(_BigAlTalkMidMouth)
	ldx     #>(_BigAlTalkMidMouth)
	jsr     _oam_meta_spr
;
; read_input();
;
L11A5:	jsr     _read_input
;
; if (trigger_clicked)
;
	lda     _trigger_clicked
	beq     L1826
;
; for(index=0; index < 10; ++index){
;
	lda     #$00
	sta     _index
L1823:	lda     _index
	cmp     #$0A
	bcs     L1824
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; for(index=0; index < 10; ++index){
;
	inc     _index
	jmp     L1823
;
; switch(game_level){
;
L1824:	lda     _game_level
;
; }
;
	beq     L11BD
	cmp     #$01
	beq     L1825
	jmp     L1826
;
; init_mode_game();
;
L11BD:	jsr     _init_mode_game
;
; break;
;
	jmp     L1826
;
; banked_call(BANK_1, init_mode_instructions);
;
L1825:	jsr     pusha
	lda     #<(_init_mode_instructions)
	ldx     #>(_init_mode_instructions)
	jsr     _banked_call
;
; if(game_mode == MODE_GAME){
;
L1826:	lda     _game_mode
	cmp     #$01
	jne     L1818
;
; ppu_wait_nmi(); // wait till beginning of the frame
;
	jsr     _ppu_wait_nmi
;
; draw_level_one_sprites();
;
	jsr     _draw_level_one_sprites
;
; draw_gas();
;
	jsr     _draw_gas
;
; draw_cost();
;
	jsr     _draw_cost
;
; read_input(); //sets input_active
;
	jsr     _read_input
;
; if(trigger_pulled){
;
	lda     _trigger_pulled
	beq     L11CC
;
; started_pumping = 1; //actually only need to set this once
;
	lda     #$01
	sta     _started_pumping
;
; gas_speed += GAS_STEP;
;
	lda     #$32
	clc
	adc     _gas_speed
	sta     _gas_speed
	bcc     L11D5
	inc     _gas_speed+1
;
; while(gas_speed > 256){
;
	jmp     L11D5
;
; ++gas1;
;
L1827:	inc     _gas1
;
; gas_speed -= 256;
;
	lda     _gas_speed
	sec
	sbc     #$00
	sta     _gas_speed
	lda     _gas_speed+1
	sbc     #$01
	sta     _gas_speed+1
;
; while(gas_speed > 256){
;
L11D5:	lda     _gas_speed
	cmp     #$01
	lda     _gas_speed+1
	sbc     #$01
	bcs     L1827
;
; adjust_gas();
;
	jsr     _adjust_gas
;
; cost_speed += COST_STEP;
;
	lda     #$50
	clc
	adc     _cost_speed
	sta     _cost_speed
	bcc     L11E0
	inc     _cost_speed+1
;
; while(cost_speed > 256){
;
	jmp     L11E0
;
; ++cost1;
;
L1828:	inc     _cost1
;
; cost_speed -= 256;
;
	lda     _cost_speed
	sec
	sbc     #$00
	sta     _cost_speed
	lda     _cost_speed+1
	sbc     #$01
	sta     _cost_speed+1
;
; while(cost_speed > 256){
;
L11E0:	lda     _cost_speed
	cmp     #$01
	lda     _cost_speed+1
	sbc     #$01
	bcs     L1828
;
; adjust_cost(); 
;
	jsr     _adjust_cost
;
; } else {
;
	jmp     L1818
;
; if(started_pumping == 1){
;
L11CC:	lda     _started_pumping
	cmp     #$01
	jne     L1818
;
; wait_a_little();
;
	jsr     _wait_a_little
;
; init_level_one_end();
;
	jsr     _init_level_one_end
;
; while (1){
;
	jmp     L1818

.endproc

